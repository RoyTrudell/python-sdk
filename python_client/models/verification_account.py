# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.verification_bank_transfer_code import VerificationBankTransferCode  # noqa: F401,E501


class VerificationAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'account_type': 'str',
        'account_number': 'str',
        'bank_transfer_code': 'VerificationBankTransferCode'
    }

    attribute_map = {
        'account_name': 'accountName',
        'account_type': 'accountType',
        'account_number': 'accountNumber',
        'bank_transfer_code': 'bankTransferCode'
    }

    def __init__(self, account_name=None, account_type=None, account_number=None, bank_transfer_code=None):  # noqa: E501
        """VerificationAccount - a model defined in Swagger"""  # noqa: E501

        self._account_name = None
        self._account_type = None
        self._account_number = None
        self._bank_transfer_code = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        self.account_type = account_type
        self.account_number = account_number
        self.bank_transfer_code = bank_transfer_code

    @property
    def account_name(self):
        """Gets the account_name of this VerificationAccount.  # noqa: E501


        :return: The account_name of this VerificationAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this VerificationAccount.


        :param account_name: The account_name of this VerificationAccount.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def account_type(self):
        """Gets the account_type of this VerificationAccount.  # noqa: E501


        :return: The account_type of this VerificationAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this VerificationAccount.


        :param account_type: The account_type of this VerificationAccount.  # noqa: E501
        :type: str
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")  # noqa: E501
        allowed_values = ["SAVINGS", "CHECKING"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def account_number(self):
        """Gets the account_number of this VerificationAccount.  # noqa: E501


        :return: The account_number of this VerificationAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this VerificationAccount.


        :param account_number: The account_number of this VerificationAccount.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501
        if account_number is not None and len(account_number) > 17:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `17`")  # noqa: E501
        if account_number is not None and len(account_number) < 3:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `3`")  # noqa: E501

        self._account_number = account_number

    @property
    def bank_transfer_code(self):
        """Gets the bank_transfer_code of this VerificationAccount.  # noqa: E501


        :return: The bank_transfer_code of this VerificationAccount.  # noqa: E501
        :rtype: VerificationBankTransferCode
        """
        return self._bank_transfer_code

    @bank_transfer_code.setter
    def bank_transfer_code(self, bank_transfer_code):
        """Sets the bank_transfer_code of this VerificationAccount.


        :param bank_transfer_code: The bank_transfer_code of this VerificationAccount.  # noqa: E501
        :type: VerificationBankTransferCode
        """
        if bank_transfer_code is None:
            raise ValueError("Invalid value for `bank_transfer_code`, must not be `None`")  # noqa: E501

        self._bank_transfer_code = bank_transfer_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerificationAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerificationAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
