# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.account_address import AccountAddress  # noqa: F401,E501
from python_client.models.payment_bank_transfer_code import PaymentBankTransferCode  # noqa: F401,E501
from python_client.models.payment_identifier import PaymentIdentifier  # noqa: F401,E501


class PaymentProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'PaymentIdentifier',
        'address': 'list[AccountAddress]',
        'payment_bank_transfer_code': 'PaymentBankTransferCode'
    }

    attribute_map = {
        'identifier': 'identifier',
        'address': 'address',
        'payment_bank_transfer_code': 'paymentBankTransferCode'
    }

    def __init__(self, identifier=None, address=None, payment_bank_transfer_code=None):  # noqa: E501
        """PaymentProfile - a model defined in Swagger"""  # noqa: E501

        self._identifier = None
        self._address = None
        self._payment_bank_transfer_code = None
        self.discriminator = None

        if identifier is not None:
            self.identifier = identifier
        if address is not None:
            self.address = address
        if payment_bank_transfer_code is not None:
            self.payment_bank_transfer_code = payment_bank_transfer_code

    @property
    def identifier(self):
        """Gets the identifier of this PaymentProfile.  # noqa: E501

        The additional information such as platform code or payment reference number that is required to make payments.<br><b>Additional Details:</b>The identifier field applies only to the student loan account type.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :return: The identifier of this PaymentProfile.  # noqa: E501
        :rtype: PaymentIdentifier
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PaymentProfile.

        The additional information such as platform code or payment reference number that is required to make payments.<br><b>Additional Details:</b>The identifier field applies only to the student loan account type.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :param identifier: The identifier of this PaymentProfile.  # noqa: E501
        :type: PaymentIdentifier
        """

        self._identifier = identifier

    @property
    def address(self):
        """Gets the address of this PaymentProfile.  # noqa: E501

        The address of the lender to which the monthly payments or the loan payoff amount should be paid. <br><b>Additional Details:</b>The address field applies only to the student loan account type.<br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :return: The address of this PaymentProfile.  # noqa: E501
        :rtype: list[AccountAddress]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PaymentProfile.

        The address of the lender to which the monthly payments or the loan payoff amount should be paid. <br><b>Additional Details:</b>The address field applies only to the student loan account type.<br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :param address: The address of this PaymentProfile.  # noqa: E501
        :type: list[AccountAddress]
        """

        self._address = address

    @property
    def payment_bank_transfer_code(self):
        """Gets the payment_bank_transfer_code of this PaymentProfile.  # noqa: E501

        The additional information for payment bank transfer code.<br><br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :return: The payment_bank_transfer_code of this PaymentProfile.  # noqa: E501
        :rtype: PaymentBankTransferCode
        """
        return self._payment_bank_transfer_code

    @payment_bank_transfer_code.setter
    def payment_bank_transfer_code(self, payment_bank_transfer_code):
        """Sets the payment_bank_transfer_code of this PaymentProfile.

        The additional information for payment bank transfer code.<br><br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :param payment_bank_transfer_code: The payment_bank_transfer_code of this PaymentProfile.  # noqa: E501
        :type: PaymentBankTransferCode
        """

        self._payment_bank_transfer_code = payment_bank_transfer_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
