# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactionDays(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'full_account_number_fields': 'list[str]',
        'number_of_transaction_days': 'int'
    }

    attribute_map = {
        'full_account_number_fields': 'fullAccountNumberFields',
        'number_of_transaction_days': 'numberOfTransactionDays'
    }

    def __init__(self, full_account_number_fields=None, number_of_transaction_days=None):  # noqa: E501
        """TransactionDays - a model defined in Swagger"""  # noqa: E501

        self._full_account_number_fields = None
        self._number_of_transaction_days = None
        self.discriminator = None

        if full_account_number_fields is not None:
            self.full_account_number_fields = full_account_number_fields
        if number_of_transaction_days is not None:
            self.number_of_transaction_days = number_of_transaction_days

    @property
    def full_account_number_fields(self):
        """Gets the full_account_number_fields of this TransactionDays.  # noqa: E501


        :return: The full_account_number_fields of this TransactionDays.  # noqa: E501
        :rtype: list[str]
        """
        return self._full_account_number_fields

    @full_account_number_fields.setter
    def full_account_number_fields(self, full_account_number_fields):
        """Sets the full_account_number_fields of this TransactionDays.


        :param full_account_number_fields: The full_account_number_fields of this TransactionDays.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["paymentAccountNumber", "unmaskedAccountNumber"]  # noqa: E501
        if not set(full_account_number_fields).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `full_account_number_fields` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(full_account_number_fields) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._full_account_number_fields = full_account_number_fields

    @property
    def number_of_transaction_days(self):
        """Gets the number_of_transaction_days of this TransactionDays.  # noqa: E501


        :return: The number_of_transaction_days of this TransactionDays.  # noqa: E501
        :rtype: int
        """
        return self._number_of_transaction_days

    @number_of_transaction_days.setter
    def number_of_transaction_days(self, number_of_transaction_days):
        """Sets the number_of_transaction_days of this TransactionDays.


        :param number_of_transaction_days: The number_of_transaction_days of this TransactionDays.  # noqa: E501
        :type: int
        """

        self._number_of_transaction_days = number_of_transaction_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionDays, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionDays):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
