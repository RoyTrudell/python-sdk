# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.verification_account import VerificationAccount  # noqa: F401,E501


class Verification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'reason': 'str',
        'verification_status': 'str',
        'provider_account_id': 'int',
        'verification_type': 'str',
        'account': 'VerificationAccount',
        'verification_date': 'str',
        'verification_id': 'int'
    }

    attribute_map = {
        'account_id': 'accountId',
        'reason': 'reason',
        'verification_status': 'verificationStatus',
        'provider_account_id': 'providerAccountId',
        'verification_type': 'verificationType',
        'account': 'account',
        'verification_date': 'verificationDate',
        'verification_id': 'verificationId'
    }

    def __init__(self, account_id=None, reason=None, verification_status=None, provider_account_id=None, verification_type=None, account=None, verification_date=None, verification_id=None):  # noqa: E501
        """Verification - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._reason = None
        self._verification_status = None
        self._provider_account_id = None
        self._verification_type = None
        self._account = None
        self._verification_date = None
        self._verification_id = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if reason is not None:
            self.reason = reason
        if verification_status is not None:
            self.verification_status = verification_status
        if provider_account_id is not None:
            self.provider_account_id = provider_account_id
        if verification_type is not None:
            self.verification_type = verification_type
        if account is not None:
            self.account = account
        if verification_date is not None:
            self.verification_date = verification_date
        if verification_id is not None:
            self.verification_id = verification_id

    @property
    def account_id(self):
        """Gets the account_id of this Verification.  # noqa: E501

        Unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>  # noqa: E501

        :return: The account_id of this Verification.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Verification.

        Unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>  # noqa: E501

        :param account_id: The account_id of this Verification.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def reason(self):
        """Gets the reason of this Verification.  # noqa: E501

        The reason the account verification failed.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>  # noqa: E501

        :return: The reason of this Verification.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Verification.

        The reason the account verification failed.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>  # noqa: E501

        :param reason: The reason of this Verification.  # noqa: E501
        :type: str
        """
        allowed_values = ["DATA_NOT_AVAILABLE", "ACCOUNT_HOLDER_MISMATCH", "FULL_ACCOUNT_NUMBER_AND_BANK_TRANSFER_CODE_NOT_AVAILABLE", "FULL_ACCOUNT_NUMBER_NOT_AVAILABLE", "BANK_TRANSFER_CODE_NOT_AVAILABLE", "EXPIRED", "DATA_MISMATCH", "INSTRUCTION_GENERATION_ERROR"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"  # noqa: E501
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def verification_status(self):
        """Gets the verification_status of this Verification.  # noqa: E501

        The status of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>  # noqa: E501

        :return: The verification_status of this Verification.  # noqa: E501
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this Verification.

        The status of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>  # noqa: E501

        :param verification_status: The verification_status of this Verification.  # noqa: E501
        :type: str
        """
        allowed_values = ["INITIATED", "DEPOSITED", "SUCCESS", "FAILED"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status

    @property
    def provider_account_id(self):
        """Gets the provider_account_id of this Verification.  # noqa: E501

        Unique identifier for the provider account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>  # noqa: E501

        :return: The provider_account_id of this Verification.  # noqa: E501
        :rtype: int
        """
        return self._provider_account_id

    @provider_account_id.setter
    def provider_account_id(self, provider_account_id):
        """Sets the provider_account_id of this Verification.

        Unique identifier for the provider account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>  # noqa: E501

        :param provider_account_id: The provider_account_id of this Verification.  # noqa: E501
        :type: int
        """

        self._provider_account_id = provider_account_id

    @property
    def verification_type(self):
        """Gets the verification_type of this Verification.  # noqa: E501

        The account verification type.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>  # noqa: E501

        :return: The verification_type of this Verification.  # noqa: E501
        :rtype: str
        """
        return self._verification_type

    @verification_type.setter
    def verification_type(self, verification_type):
        """Sets the verification_type of this Verification.

        The account verification type.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>  # noqa: E501

        :param verification_type: The verification_type of this Verification.  # noqa: E501
        :type: str
        """
        allowed_values = ["MATCHING", "CHALLENGE_DEPOSIT"]  # noqa: E501
        if verification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_type, allowed_values)
            )

        self._verification_type = verification_type

    @property
    def account(self):
        """Gets the account of this Verification.  # noqa: E501


        :return: The account of this Verification.  # noqa: E501
        :rtype: VerificationAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Verification.


        :param account: The account of this Verification.  # noqa: E501
        :type: VerificationAccount
        """

        self._account = account

    @property
    def verification_date(self):
        """Gets the verification_date of this Verification.  # noqa: E501

        The date of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>  # noqa: E501

        :return: The verification_date of this Verification.  # noqa: E501
        :rtype: str
        """
        return self._verification_date

    @verification_date.setter
    def verification_date(self, verification_date):
        """Sets the verification_date of this Verification.

        The date of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>  # noqa: E501

        :param verification_date: The verification_date of this Verification.  # noqa: E501
        :type: str
        """

        self._verification_date = verification_date

    @property
    def verification_id(self):
        """Gets the verification_id of this Verification.  # noqa: E501

        Unique identifier for the verification request.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>  # noqa: E501

        :return: The verification_id of this Verification.  # noqa: E501
        :rtype: int
        """
        return self._verification_id

    @verification_id.setter
    def verification_id(self, verification_id):
        """Sets the verification_id of this Verification.

        Unique identifier for the verification request.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>  # noqa: E501

        :param verification_id: The verification_id of this Verification.  # noqa: E501
        :type: int
        """

        self._verification_id = verification_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Verification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Verification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
