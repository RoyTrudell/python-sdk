# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.row import Row  # noqa: F401,E501


class LoginForm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mfa_info_title': 'str',
        'help': 'str',
        'forget_password_url': 'str',
        'form_type': 'str',
        'mfa_info_text': 'str',
        'login_help': 'str',
        'mfa_timeout': 'int',
        'id': 'int',
        'row': 'list[Row]'
    }

    attribute_map = {
        'mfa_info_title': 'mfaInfoTitle',
        'help': 'help',
        'forget_password_url': 'forgetPasswordURL',
        'form_type': 'formType',
        'mfa_info_text': 'mfaInfoText',
        'login_help': 'loginHelp',
        'mfa_timeout': 'mfaTimeout',
        'id': 'id',
        'row': 'row'
    }

    def __init__(self, mfa_info_title=None, help=None, forget_password_url=None, form_type=None, mfa_info_text=None, login_help=None, mfa_timeout=None, id=None, row=None):  # noqa: E501
        """LoginForm - a model defined in Swagger"""  # noqa: E501

        self._mfa_info_title = None
        self._help = None
        self._forget_password_url = None
        self._form_type = None
        self._mfa_info_text = None
        self._login_help = None
        self._mfa_timeout = None
        self._id = None
        self._row = None
        self.discriminator = None

        if mfa_info_title is not None:
            self.mfa_info_title = mfa_info_title
        if help is not None:
            self.help = help
        if forget_password_url is not None:
            self.forget_password_url = forget_password_url
        if form_type is not None:
            self.form_type = form_type
        if mfa_info_text is not None:
            self.mfa_info_text = mfa_info_text
        if login_help is not None:
            self.login_help = login_help
        if mfa_timeout is not None:
            self.mfa_timeout = mfa_timeout
        if id is not None:
            self.id = id
        if row is not None:
            self.row = row

    @property
    def mfa_info_title(self):
        """Gets the mfa_info_title of this LoginForm.  # noqa: E501

        The title for the MFA information demanded from the user.This is the title displayed in the provider site.This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>  # noqa: E501

        :return: The mfa_info_title of this LoginForm.  # noqa: E501
        :rtype: str
        """
        return self._mfa_info_title

    @mfa_info_title.setter
    def mfa_info_title(self, mfa_info_title):
        """Sets the mfa_info_title of this LoginForm.

        The title for the MFA information demanded from the user.This is the title displayed in the provider site.This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>  # noqa: E501

        :param mfa_info_title: The mfa_info_title of this LoginForm.  # noqa: E501
        :type: str
        """

        self._mfa_info_title = mfa_info_title

    @property
    def help(self):
        """Gets the help of this LoginForm.  # noqa: E501

        The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The help of this LoginForm.  # noqa: E501
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this LoginForm.

        The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param help: The help of this LoginForm.  # noqa: E501
        :type: str
        """

        self._help = help

    @property
    def forget_password_url(self):
        """Gets the forget_password_url of this LoginForm.  # noqa: E501

        The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The forget_password_url of this LoginForm.  # noqa: E501
        :rtype: str
        """
        return self._forget_password_url

    @forget_password_url.setter
    def forget_password_url(self, forget_password_url):
        """Sets the forget_password_url of this LoginForm.

        The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param forget_password_url: The forget_password_url of this LoginForm.  # noqa: E501
        :type: str
        """

        self._forget_password_url = forget_password_url

    @property
    def form_type(self):
        """Gets the form_type of this LoginForm.  # noqa: E501

        The type of the forms for which the user information is required.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The form_type of this LoginForm.  # noqa: E501
        :rtype: str
        """
        return self._form_type

    @form_type.setter
    def form_type(self, form_type):
        """Sets the form_type of this LoginForm.

        The type of the forms for which the user information is required.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param form_type: The form_type of this LoginForm.  # noqa: E501
        :type: str
        """
        allowed_values = ["login", "questionAndAnswer", "token", "image"]  # noqa: E501
        if form_type not in allowed_values:
            raise ValueError(
                "Invalid value for `form_type` ({0}), must be one of {1}"  # noqa: E501
                .format(form_type, allowed_values)
            )

        self._form_type = form_type

    @property
    def mfa_info_text(self):
        """Gets the mfa_info_text of this LoginForm.  # noqa: E501

        The text displayed in the provider site while requesting the user's MFA information. This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>  # noqa: E501

        :return: The mfa_info_text of this LoginForm.  # noqa: E501
        :rtype: str
        """
        return self._mfa_info_text

    @mfa_info_text.setter
    def mfa_info_text(self, mfa_info_text):
        """Sets the mfa_info_text of this LoginForm.

        The text displayed in the provider site while requesting the user's MFA information. This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>  # noqa: E501

        :param mfa_info_text: The mfa_info_text of this LoginForm.  # noqa: E501
        :type: str
        """

        self._mfa_info_text = mfa_info_text

    @property
    def login_help(self):
        """Gets the login_help of this LoginForm.  # noqa: E501

        The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The login_help of this LoginForm.  # noqa: E501
        :rtype: str
        """
        return self._login_help

    @login_help.setter
    def login_help(self, login_help):
        """Sets the login_help of this LoginForm.

        The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param login_help: The login_help of this LoginForm.  # noqa: E501
        :type: str
        """

        self._login_help = login_help

    @property
    def mfa_timeout(self):
        """Gets the mfa_timeout of this LoginForm.  # noqa: E501

        The amount of time before which the user is expected to provide MFA information. This field is applicable for MFA form types only. This would be an useful information that could be displayed to the users. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The mfa_timeout of this LoginForm.  # noqa: E501
        :rtype: int
        """
        return self._mfa_timeout

    @mfa_timeout.setter
    def mfa_timeout(self, mfa_timeout):
        """Sets the mfa_timeout of this LoginForm.

        The amount of time before which the user is expected to provide MFA information. This field is applicable for MFA form types only. This would be an useful information that could be displayed to the users. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param mfa_timeout: The mfa_timeout of this LoginForm.  # noqa: E501
        :type: int
        """

        self._mfa_timeout = mfa_timeout

    @property
    def id(self):
        """Gets the id of this LoginForm.  # noqa: E501

        The identifier of the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The id of this LoginForm.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoginForm.

        The identifier of the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param id: The id of this LoginForm.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def row(self):
        """Gets the row of this LoginForm.  # noqa: E501

        This indicates one row in the form. The row will have one label. But it may have single or multiple fields.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The row of this LoginForm.  # noqa: E501
        :rtype: list[Row]
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this LoginForm.

        This indicates one row in the form. The row will have one label. But it may have single or multiple fields.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param row: The row of this LoginForm.  # noqa: E501
        :type: list[Row]
        """

        self._row = row

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginForm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginForm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
