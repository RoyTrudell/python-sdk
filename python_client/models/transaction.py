# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.description import Description  # noqa: F401,E501
from python_client.models.merchant import Merchant  # noqa: F401,E501
from python_client.models.money import Money  # noqa: F401,E501


class Transaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'source_id': 'int',
        'symbol': 'str',
        'cusip_number': 'str',
        'high_level_category_id': 'int',
        'detail_category_id': 'int',
        'description': 'Description',
        'memo': 'str',
        'settle_date': 'str',
        'type': 'str',
        'base_type': 'str',
        'category_source': 'str',
        'principal': 'Money',
        'last_updated': 'str',
        'interest': 'Money',
        'price': 'Money',
        'commission': 'Money',
        'id': 'int',
        'amount': 'Money',
        'check_number': 'str',
        'quantity': 'float',
        'is_manual': 'bool',
        'merchant': 'Merchant',
        'transaction_date': 'str',
        'category_type': 'str',
        'account_id': 'int',
        'created_date': 'str',
        'source_type': 'str',
        'container': 'str',
        'post_date': 'str',
        'parent_category_id': 'int',
        'sub_type': 'str',
        'category': 'str',
        'running_balance': 'Money',
        'category_id': 'int',
        'holding_description': 'str',
        'status': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'source_id': 'sourceId',
        'symbol': 'symbol',
        'cusip_number': 'cusipNumber',
        'high_level_category_id': 'highLevelCategoryId',
        'detail_category_id': 'detailCategoryId',
        'description': 'description',
        'memo': 'memo',
        'settle_date': 'settleDate',
        'type': 'type',
        'base_type': 'baseType',
        'category_source': 'categorySource',
        'principal': 'principal',
        'last_updated': 'lastUpdated',
        'interest': 'interest',
        'price': 'price',
        'commission': 'commission',
        'id': 'id',
        'amount': 'amount',
        'check_number': 'checkNumber',
        'quantity': 'quantity',
        'is_manual': 'isManual',
        'merchant': 'merchant',
        'transaction_date': 'transactionDate',
        'category_type': 'categoryType',
        'account_id': 'accountId',
        'created_date': 'createdDate',
        'source_type': 'sourceType',
        'container': 'CONTAINER',
        'post_date': 'postDate',
        'parent_category_id': 'parentCategoryId',
        'sub_type': 'subType',
        'category': 'category',
        'running_balance': 'runningBalance',
        'category_id': 'categoryId',
        'holding_description': 'holdingDescription',
        'status': 'status'
    }

    def __init__(self, _date=None, source_id=None, symbol=None, cusip_number=None, high_level_category_id=None, detail_category_id=None, description=None, memo=None, settle_date=None, type=None, base_type=None, category_source=None, principal=None, last_updated=None, interest=None, price=None, commission=None, id=None, amount=None, check_number=None, quantity=None, is_manual=None, merchant=None, transaction_date=None, category_type=None, account_id=None, created_date=None, source_type=None, container=None, post_date=None, parent_category_id=None, sub_type=None, category=None, running_balance=None, category_id=None, holding_description=None, status=None):  # noqa: E501
        """Transaction - a model defined in Swagger"""  # noqa: E501

        self.__date = None
        self._source_id = None
        self._symbol = None
        self._cusip_number = None
        self._high_level_category_id = None
        self._detail_category_id = None
        self._description = None
        self._memo = None
        self._settle_date = None
        self._type = None
        self._base_type = None
        self._category_source = None
        self._principal = None
        self._last_updated = None
        self._interest = None
        self._price = None
        self._commission = None
        self._id = None
        self._amount = None
        self._check_number = None
        self._quantity = None
        self._is_manual = None
        self._merchant = None
        self._transaction_date = None
        self._category_type = None
        self._account_id = None
        self._created_date = None
        self._source_type = None
        self._container = None
        self._post_date = None
        self._parent_category_id = None
        self._sub_type = None
        self._category = None
        self._running_balance = None
        self._category_id = None
        self._holding_description = None
        self._status = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if source_id is not None:
            self.source_id = source_id
        if symbol is not None:
            self.symbol = symbol
        if cusip_number is not None:
            self.cusip_number = cusip_number
        if high_level_category_id is not None:
            self.high_level_category_id = high_level_category_id
        if detail_category_id is not None:
            self.detail_category_id = detail_category_id
        if description is not None:
            self.description = description
        if memo is not None:
            self.memo = memo
        if settle_date is not None:
            self.settle_date = settle_date
        if type is not None:
            self.type = type
        if base_type is not None:
            self.base_type = base_type
        if category_source is not None:
            self.category_source = category_source
        if principal is not None:
            self.principal = principal
        if last_updated is not None:
            self.last_updated = last_updated
        if interest is not None:
            self.interest = interest
        if price is not None:
            self.price = price
        if commission is not None:
            self.commission = commission
        if id is not None:
            self.id = id
        if amount is not None:
            self.amount = amount
        if check_number is not None:
            self.check_number = check_number
        if quantity is not None:
            self.quantity = quantity
        if is_manual is not None:
            self.is_manual = is_manual
        if merchant is not None:
            self.merchant = merchant
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if category_type is not None:
            self.category_type = category_type
        if account_id is not None:
            self.account_id = account_id
        if created_date is not None:
            self.created_date = created_date
        if source_type is not None:
            self.source_type = source_type
        if container is not None:
            self.container = container
        if post_date is not None:
            self.post_date = post_date
        if parent_category_id is not None:
            self.parent_category_id = parent_category_id
        if sub_type is not None:
            self.sub_type = sub_type
        if category is not None:
            self.category = category
        if running_balance is not None:
            self.running_balance = running_balance
        if category_id is not None:
            self.category_id = category_id
        if holding_description is not None:
            self.holding_description = holding_description
        if status is not None:
            self.status = status

    @property
    def _date(self):
        """Gets the _date of this Transaction.  # noqa: E501

        The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The _date of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Transaction.

        The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param _date: The _date of this Transaction.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def source_id(self):
        """Gets the source_id of this Transaction.  # noqa: E501

        A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.<br>Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.  # noqa: E501

        :return: The source_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Transaction.

        A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.<br>Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.  # noqa: E501

        :param source_id: The source_id of this Transaction.  # noqa: E501
        :type: int
        """

        self._source_id = source_id

    @property
    def symbol(self):
        """Gets the symbol of this Transaction.  # noqa: E501

        The symbol of the security being traded.<br><b>Note</b>: The settle date field applies only to trade-related transactions. <br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The symbol of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Transaction.

        The symbol of the security being traded.<br><b>Note</b>: The settle date field applies only to trade-related transactions. <br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param symbol: The symbol of this Transaction.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def cusip_number(self):
        """Gets the cusip_number of this Transaction.  # noqa: E501

        The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.<br><b><br><b>Note</b></b>: The CUSIP number field applies only to trade related transactions.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The cusip_number of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._cusip_number

    @cusip_number.setter
    def cusip_number(self, cusip_number):
        """Sets the cusip_number of this Transaction.

        The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.<br><b><br><b>Note</b></b>: The CUSIP number field applies only to trade related transactions.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param cusip_number: The cusip_number of this Transaction.  # noqa: E501
        :type: str
        """

        self._cusip_number = cusip_number

    @property
    def high_level_category_id(self):
        """Gets the high_level_category_id of this Transaction.  # noqa: E501

        The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The high_level_category_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._high_level_category_id

    @high_level_category_id.setter
    def high_level_category_id(self, high_level_category_id):
        """Sets the high_level_category_id of this Transaction.

        The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param high_level_category_id: The high_level_category_id of this Transaction.  # noqa: E501
        :type: int
        """

        self._high_level_category_id = high_level_category_id

    @property
    def detail_category_id(self):
        """Gets the detail_category_id of this Transaction.  # noqa: E501

        The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>  # noqa: E501

        :return: The detail_category_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._detail_category_id

    @detail_category_id.setter
    def detail_category_id(self, detail_category_id):
        """Sets the detail_category_id of this Transaction.

        The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>  # noqa: E501

        :param detail_category_id: The detail_category_id of this Transaction.  # noqa: E501
        :type: int
        """

        self._detail_category_id = detail_category_id

    @property
    def description(self):
        """Gets the description of this Transaction.  # noqa: E501

        Description details<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The description of this Transaction.  # noqa: E501
        :rtype: Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.

        Description details<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param description: The description of this Transaction.  # noqa: E501
        :type: Description
        """

        self._description = description

    @property
    def memo(self):
        """Gets the memo of this Transaction.  # noqa: E501

        Additional notes provided by the user for a particular  transaction through application or API services. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The memo of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this Transaction.

        Additional notes provided by the user for a particular  transaction through application or API services. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param memo: The memo of this Transaction.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def settle_date(self):
        """Gets the settle_date of this Transaction.  # noqa: E501

        It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The settle_date of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._settle_date

    @settle_date.setter
    def settle_date(self, settle_date):
        """Sets the settle_date of this Transaction.

        It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param settle_date: The settle_date of this Transaction.  # noqa: E501
        :type: str
        """

        self._settle_date = settle_date

    @property
    def type(self):
        """Gets the type of this Transaction.  # noqa: E501

        The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>  # noqa: E501

        :return: The type of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.

        The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>  # noqa: E501

        :param type: The type of this Transaction.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def base_type(self):
        """Gets the base_type of this Transaction.  # noqa: E501

        Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The base_type of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type):
        """Sets the base_type of this Transaction.

        Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param base_type: The base_type of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREDIT", "DEBIT"]  # noqa: E501
        if base_type not in allowed_values:
            raise ValueError(
                "Invalid value for `base_type` ({0}), must be one of {1}"  # noqa: E501
                .format(base_type, allowed_values)
            )

        self._base_type = base_type

    @property
    def category_source(self):
        """Gets the category_source of this Transaction.  # noqa: E501

        Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The category_source of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._category_source

    @category_source.setter
    def category_source(self, category_source):
        """Sets the category_source of this Transaction.

        Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param category_source: The category_source of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if category_source not in allowed_values:
            raise ValueError(
                "Invalid value for `category_source` ({0}), must be one of {1}"  # noqa: E501
                .format(category_source, allowed_values)
            )

        self._category_source = category_source

    @property
    def principal(self):
        """Gets the principal of this Transaction.  # noqa: E501

        The portion of the principal in the transaction amount. The transaction amount can be the amount due, payment amount, minimum amount, repayment, etc.<br><br><b>Applicable containers</b>: loan<br>  # noqa: E501

        :return: The principal of this Transaction.  # noqa: E501
        :rtype: Money
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this Transaction.

        The portion of the principal in the transaction amount. The transaction amount can be the amount due, payment amount, minimum amount, repayment, etc.<br><br><b>Applicable containers</b>: loan<br>  # noqa: E501

        :param principal: The principal of this Transaction.  # noqa: E501
        :type: Money
        """

        self._principal = principal

    @property
    def last_updated(self):
        """Gets the last_updated of this Transaction.  # noqa: E501


        :return: The last_updated of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Transaction.


        :param last_updated: The last_updated of this Transaction.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def interest(self):
        """Gets the interest of this Transaction.  # noqa: E501

        The portion of interest in the transaction amount. The transaction amount can be the amount due, payment amount, minimum amount, repayment, etc.<br><br><b>Applicable containers</b>: loan<br>  # noqa: E501

        :return: The interest of this Transaction.  # noqa: E501
        :rtype: Money
        """
        return self._interest

    @interest.setter
    def interest(self, interest):
        """Sets the interest of this Transaction.

        The portion of interest in the transaction amount. The transaction amount can be the amount due, payment amount, minimum amount, repayment, etc.<br><br><b>Applicable containers</b>: loan<br>  # noqa: E501

        :param interest: The interest of this Transaction.  # noqa: E501
        :type: Money
        """

        self._interest = interest

    @property
    def price(self):
        """Gets the price of this Transaction.  # noqa: E501

        The price of the security for the transaction.<br><b>Note</b>: The price field applies only to the trade related transactions. <br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The price of this Transaction.  # noqa: E501
        :rtype: Money
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Transaction.

        The price of the security for the transaction.<br><b>Note</b>: The price field applies only to the trade related transactions. <br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param price: The price of this Transaction.  # noqa: E501
        :type: Money
        """

        self._price = price

    @property
    def commission(self):
        """Gets the commission of this Transaction.  # noqa: E501

        A commission or brokerage associated with a transaction.<br><br><br><b>Additional Details</b>:The commission only applies to trade-related transactions.<b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The commission of this Transaction.  # noqa: E501
        :rtype: Money
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this Transaction.

        A commission or brokerage associated with a transaction.<br><br><br><b>Additional Details</b>:The commission only applies to trade-related transactions.<b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param commission: The commission of this Transaction.  # noqa: E501
        :type: Money
        """

        self._commission = commission

    @property
    def id(self):
        """Gets the id of this Transaction.  # noqa: E501

        An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param id: The id of this Transaction.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this Transaction.  # noqa: E501

        The amount of the transaction as it appears at the FI site. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The amount of this Transaction.  # noqa: E501
        :rtype: Money
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.

        The amount of the transaction as it appears at the FI site. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param amount: The amount of this Transaction.  # noqa: E501
        :type: Money
        """

        self._amount = amount

    @property
    def check_number(self):
        """Gets the check_number of this Transaction.  # noqa: E501

        The checkNumber of the transaction.<br><br><b>Applicable containers</b>: bank<br>  # noqa: E501

        :return: The check_number of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """Sets the check_number of this Transaction.

        The checkNumber of the transaction.<br><br><b>Applicable containers</b>: bank<br>  # noqa: E501

        :param check_number: The check_number of this Transaction.  # noqa: E501
        :type: str
        """

        self._check_number = check_number

    @property
    def quantity(self):
        """Gets the quantity of this Transaction.  # noqa: E501

        The quantity associated with the transaction.<br><b>Note</b>: The quantity field applies only to trade-related transactions.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The quantity of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Transaction.

        The quantity associated with the transaction.<br><b>Note</b>: The quantity field applies only to trade-related transactions.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param quantity: The quantity of this Transaction.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def is_manual(self):
        """Gets the is_manual of this Transaction.  # noqa: E501

        Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The is_manual of this Transaction.  # noqa: E501
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this Transaction.

        Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param is_manual: The is_manual of this Transaction.  # noqa: E501
        :type: bool
        """

        self._is_manual = is_manual

    @property
    def merchant(self):
        """Gets the merchant of this Transaction.  # noqa: E501

        The name of the merchant associated with the transaction.<br><b>Note</b>: The merchant name field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The merchant of this Transaction.  # noqa: E501
        :rtype: Merchant
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this Transaction.

        The name of the merchant associated with the transaction.<br><b>Note</b>: The merchant name field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param merchant: The merchant of this Transaction.  # noqa: E501
        :type: Merchant
        """

        self._merchant = merchant

    @property
    def transaction_date(self):
        """Gets the transaction_date of this Transaction.  # noqa: E501

        The date the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The transaction_date of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this Transaction.

        The date the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param transaction_date: The transaction_date of this Transaction.  # noqa: E501
        :type: str
        """

        self._transaction_date = transaction_date

    @property
    def category_type(self):
        """Gets the category_type of this Transaction.  # noqa: E501

        The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The category_type of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this Transaction.

        The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param category_type: The category_type of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["TRANSFER", "DEFERRED_COMPENSATION", "UNCATEGORIZE", "INCOME", "EXPENSE"]  # noqa: E501
        if category_type not in allowed_values:
            raise ValueError(
                "Invalid value for `category_type` ({0}), must be one of {1}"  # noqa: E501
                .format(category_type, allowed_values)
            )

        self._category_type = category_type

    @property
    def account_id(self):
        """Gets the account_id of this Transaction.  # noqa: E501

        The account from which the transaction was made. This is basically the primary key of the account resource. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The account_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Transaction.

        The account from which the transaction was made. This is basically the primary key of the account resource. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param account_id: The account_id of this Transaction.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def created_date(self):
        """Gets the created_date of this Transaction.  # noqa: E501


        :return: The created_date of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Transaction.


        :param created_date: The created_date of this Transaction.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def source_type(self):
        """Gets the source_type of this Transaction.  # noqa: E501

        The source through which the transaction is added to the Yodlee system.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loann<br><b>Applicable Values:</b><br>  # noqa: E501

        :return: The source_type of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Transaction.

        The source through which the transaction is added to the Yodlee system.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loann<br><b>Applicable Values:</b><br>  # noqa: E501

        :param source_type: The source_type of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["AGGREGATED", "MANUAL"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def container(self):
        """Gets the container of this Transaction.  # noqa: E501

        The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The container of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this Transaction.

        The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param container: The container of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "bill", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if container not in allowed_values:
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"  # noqa: E501
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def post_date(self):
        """Gets the post_date of this Transaction.  # noqa: E501

        The date on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>  # noqa: E501

        :return: The post_date of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._post_date

    @post_date.setter
    def post_date(self, post_date):
        """Sets the post_date of this Transaction.

        The date on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>  # noqa: E501

        :param post_date: The post_date of this Transaction.  # noqa: E501
        :type: str
        """

        self._post_date = post_date

    @property
    def parent_category_id(self):
        """Gets the parent_category_id of this Transaction.  # noqa: E501

        The parentCategoryId of the category assigned to the transaction.<br><b>Note</b>: This field will be provided in the response if the transaction is assigned to a user-created category. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The parent_category_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._parent_category_id

    @parent_category_id.setter
    def parent_category_id(self, parent_category_id):
        """Sets the parent_category_id of this Transaction.

        The parentCategoryId of the category assigned to the transaction.<br><b>Note</b>: This field will be provided in the response if the transaction is assigned to a user-created category. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param parent_category_id: The parent_category_id of this Transaction.  # noqa: E501
        :type: int
        """

        self._parent_category_id = parent_category_id

    @property
    def sub_type(self):
        """Gets the sub_type of this Transaction.  # noqa: E501

        The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The sub_type of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this Transaction.

        The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param sub_type: The sub_type of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTH_HOLD", "AUTH_REQUEST", "OVERDRAFT_CHARGE", "CREDIT_ADJUSTMENT", "PIN_DEBIT", "BANK_DIRECT_DEPOSIT", "DIVIDEND_DEPOSIT", "INTEREST_SAVINGS", "INTEREST_ADJUSTMENT", "ONLINE_PURCHASE", "PURCHASED_WITH_CHECK", "RECURRING_BILLING", "TAX_PAYMENT", "PAYMENT_BY_CHECK", "PAYMENT_PLAN", "FEE_REFUND", "WIRE_TRANSFER_CHARGE", "ACCOUNT_TO_ACCOUNT_TRANSFER", "BANK_TO_BANK_TRANSACTION", "BANK_TO_NON_BANK_ACCOUNT_TRANSFER", "CASH_WITHDRAWAL_AT_FI", "ATM_CASH_WITHDRAWAL", "AUTH_PROCESSING", "AUTH_RELEASE", "PRE_AUTH", "AUTH_COMPLETE", "AUTH_VOID", "BALANCE_ENQUIRY", "ACCOUNT_VERIFICATION", "PRE_AUTH_COMPLETION", "SERVICE_CHARGE", "SERVICE_CHARGE_FEE_REFUND", "RETURNED_CHECK_CHARGE", "RETURNED_CHECK_REIMBURSEMENT", "CASH_ADVANCE", "BILL_PAY_CHARGE", "CHECK_IMAGE_SERVICE_CHARGE", "OVERDRAFT_PROTECTION_CHARGE", "STOP_PAYMENT_CHARGE", "CHECKS_ORDERING_CHARGE", "MONTHLY_MAINTENANCE_CHARGE", "DEBIT_CARD_FEE", "CONVENIENCE_FEE", "PERSONAL_LOAN_CREDIT", "CREDIT_CARD_CREDIT", "AUTO_LOAN", "HOME_LOAN_MORTGAGE", "SHORT_TERM_CREDIT", "SIGNATURE_DEBIT", "CONTACT_LESS_DEBIT", "DEFERRED_DEPOSIT", "DEFERRED_BILL_PAY", "INSTALLMENT_PAYMENT", "RECURRING_SUBSCRIPTION_PAYMENT", "HOLD_CHECK_PAYMENT", "CAPITAL_GAINS_DISTIBUTION", "CG_LONG_TERM_DEPOSIT", "OPEN_SALE_DEPOSIT", "INTEREST__CHECK", "PURCHASE_VOID", "PURCHASE_WITH_CREDIT_CARD", "PURCHASE_WITH_DEBIT_CARD", "CHARGE_A_REPEAT_CUSTOMER", "DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT", "FEE_PAYMENT", "FINANCE_CHARGE_REFUND", "TRANSACTION_VOID", "FEE_VOID", "DEBIT_CARD_WITHDRAWAL_AT_STORE", "ELECTRONIC_PAYMENT", "ACH_DEBIT", "ATM_TELLER_DEPOSIT", "POS_DEBIT", "BANK_ADJUSTMENT", "CHARGES_FEES", "INTEREST", "DEPOSITS_CREDITS", "PAYMENT", "PURCHASE", "REFUND", "TRANSFER", "WITHDRAWAL", "OTHER_DEPOSITS", "OTHER_WITHDRAWALS", "ADJUSTMENT", "FINANCE_CHARGE", "OTHER_CHARGES_FEES", "ANNUAL_FEE", "DEPOSIT", "DIRECT_DEPOSIT_SALARY", "INVESTMENT_INCOME_CASH", "SSA", "REWARDS", "CHECK_DEPOSIT", "MOBILE_REMOTE_DEPOSIT", "TELLER_DEPOSIT", "TAX_REFUND", "CREDIT_CARD_PAYMENT", "INSURANCE_PAYMENT", "UTILITIES_PAYMENT", "CHILD_SUPPORT", "LOAN", "PERSONAL_LOAN", "STUDENT_LOAN", "SALES_TAX", "REIMBURSEMENT", "BALANCE_TRANSFER", "WIRE_TRANSFER", "OVERDRAFT_PROTECTION", "DEBIT", "CREDIT", "NSF_FEES"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def category(self):
        """Gets the category of this Transaction.  # noqa: E501

        The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The category of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Transaction.

        The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param category: The category of this Transaction.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def running_balance(self):
        """Gets the running_balance of this Transaction.  # noqa: E501

        The running balance in an account indicates the balance of the account after every transaction.<br><br><b>Applicable containers</b>: bank,creditCard,investment<br>  # noqa: E501

        :return: The running_balance of this Transaction.  # noqa: E501
        :rtype: Money
        """
        return self._running_balance

    @running_balance.setter
    def running_balance(self, running_balance):
        """Sets the running_balance of this Transaction.

        The running balance in an account indicates the balance of the account after every transaction.<br><br><b>Applicable containers</b>: bank,creditCard,investment<br>  # noqa: E501

        :param running_balance: The running_balance of this Transaction.  # noqa: E501
        :type: Money
        """

        self._running_balance = running_balance

    @property
    def category_id(self):
        """Gets the category_id of this Transaction.  # noqa: E501

        The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The category_id of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Transaction.

        The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param category_id: The category_id of this Transaction.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def holding_description(self):
        """Gets the holding_description of this Transaction.  # noqa: E501

        For transactions involving securities, this captures the securities description.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The holding_description of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._holding_description

    @holding_description.setter
    def holding_description(self, holding_description):
        """Sets the holding_description of this Transaction.

        For transactions involving securities, this captures the securities description.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param holding_description: The holding_description of this Transaction.  # noqa: E501
        :type: str
        """

        self._holding_description = holding_description

    @property
    def status(self):
        """Gets the status of this Transaction.  # noqa: E501

        The status of the transaction: pending or posted.<br><b>Note</b>: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The status of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transaction.

        The status of the transaction: pending or posted.<br><b>Note</b>: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param status: The status of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["POSTED", "PENDING", "SCHEDULED", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
