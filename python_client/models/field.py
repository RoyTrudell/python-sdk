# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.option import Option  # noqa: F401,E501


class Field(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prefix': 'str',
        'min_length': 'int',
        'value_editable': 'str',
        'is_optional': 'bool',
        'suffix': 'str',
        'type': 'str',
        'is_value_provided': 'bool',
        'size': 'int',
        'name': 'str',
        'id': 'str',
        'value': 'str',
        'max_length': 'int',
        'option': 'list[Option]'
    }

    attribute_map = {
        'prefix': 'prefix',
        'min_length': 'minLength',
        'value_editable': 'valueEditable',
        'is_optional': 'isOptional',
        'suffix': 'suffix',
        'type': 'type',
        'is_value_provided': 'isValueProvided',
        'size': 'size',
        'name': 'name',
        'id': 'id',
        'value': 'value',
        'max_length': 'maxLength',
        'option': 'option'
    }

    def __init__(self, prefix=None, min_length=None, value_editable=None, is_optional=None, suffix=None, type=None, is_value_provided=None, size=None, name=None, id=None, value=None, max_length=None, option=None):  # noqa: E501
        """Field - a model defined in Swagger"""  # noqa: E501

        self._prefix = None
        self._min_length = None
        self._value_editable = None
        self._is_optional = None
        self._suffix = None
        self._type = None
        self._is_value_provided = None
        self._size = None
        self._name = None
        self._id = None
        self._value = None
        self._max_length = None
        self._option = None
        self.discriminator = None

        if prefix is not None:
            self.prefix = prefix
        if min_length is not None:
            self.min_length = min_length
        if value_editable is not None:
            self.value_editable = value_editable
        if is_optional is not None:
            self.is_optional = is_optional
        if suffix is not None:
            self.suffix = suffix
        if type is not None:
            self.type = type
        if is_value_provided is not None:
            self.is_value_provided = is_value_provided
        if size is not None:
            self.size = size
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if value is not None:
            self.value = value
        if max_length is not None:
            self.max_length = max_length
        if option is not None:
            self.option = option

    @property
    def prefix(self):
        """Gets the prefix of this Field.  # noqa: E501

        The prefix string that has to be displayed before the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The prefix of this Field.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this Field.

        The prefix string that has to be displayed before the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param prefix: The prefix of this Field.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def min_length(self):
        """Gets the min_length of this Field.  # noqa: E501

        The minimum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The min_length of this Field.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this Field.

        The minimum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param min_length: The min_length of this Field.  # noqa: E501
        :type: int
        """

        self._min_length = min_length

    @property
    def value_editable(self):
        """Gets the value_editable of this Field.  # noqa: E501

        Indicates whether the field is editable or not.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The value_editable of this Field.  # noqa: E501
        :rtype: str
        """
        return self._value_editable

    @value_editable.setter
    def value_editable(self, value_editable):
        """Sets the value_editable of this Field.

        Indicates whether the field is editable or not.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param value_editable: The value_editable of this Field.  # noqa: E501
        :type: str
        """

        self._value_editable = value_editable

    @property
    def is_optional(self):
        """Gets the is_optional of this Field.  # noqa: E501

        Indicates if a field is an optional field or a mandatory field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The is_optional of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_optional

    @is_optional.setter
    def is_optional(self, is_optional):
        """Sets the is_optional of this Field.

        Indicates if a field is an optional field or a mandatory field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param is_optional: The is_optional of this Field.  # noqa: E501
        :type: bool
        """

        self._is_optional = is_optional

    @property
    def suffix(self):
        """Gets the suffix of this Field.  # noqa: E501

        The suffix string that has to be displayed next to the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The suffix of this Field.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this Field.

        The suffix string that has to be displayed next to the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param suffix: The suffix of this Field.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def type(self):
        """Gets the type of this Field.  # noqa: E501

        This indicates the display type of the field. For example, text box, image, etc. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The type of this Field.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Field.

        This indicates the display type of the field. For example, text box, image, etc. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param type: The type of this Field.  # noqa: E501
        :type: str
        """
        allowed_values = ["text", "password", "option", "checkbox", "radio", "image"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def is_value_provided(self):
        """Gets the is_value_provided of this Field.  # noqa: E501

        Indicates that the answer to the security question already exists in the Yodlee system.Persuading the user to provide the answer to the security question again during the edit-credential flow can be avoided.<br><br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=questions</li><li>GET providerAccounts/{providerAccountId}? include=questions</li></ul>  # noqa: E501

        :return: The is_value_provided of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_value_provided

    @is_value_provided.setter
    def is_value_provided(self, is_value_provided):
        """Sets the is_value_provided of this Field.

        Indicates that the answer to the security question already exists in the Yodlee system.Persuading the user to provide the answer to the security question again during the edit-credential flow can be avoided.<br><br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=questions</li><li>GET providerAccounts/{providerAccountId}? include=questions</li></ul>  # noqa: E501

        :param is_value_provided: The is_value_provided of this Field.  # noqa: E501
        :type: bool
        """

        self._is_value_provided = is_value_provided

    @property
    def size(self):
        """Gets the size of this Field.  # noqa: E501


        :return: The size of this Field.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Field.


        :param size: The size of this Field.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def name(self):
        """Gets the name of this Field.  # noqa: E501

        Name of the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The name of this Field.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Field.

        Name of the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param name: The name of this Field.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this Field.  # noqa: E501

        Identifier for the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The id of this Field.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Field.

        Identifier for the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param id: The id of this Field.  # noqa: E501
        :type: str
        """
        if id is not None and len(id) > 2147483647:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `2147483647`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def value(self):
        """Gets the value of this Field.  # noqa: E501

        Value expected from the user for the field. This will be blank and is expected to be filled and sent back when submitting the login or MFA information.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The value of this Field.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Field.

        Value expected from the user for the field. This will be blank and is expected to be filled and sent back when submitting the login or MFA information.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param value: The value of this Field.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def max_length(self):
        """Gets the max_length of this Field.  # noqa: E501

        The maximum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The max_length of this Field.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this Field.

        The maximum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param max_length: The max_length of this Field.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def option(self):
        """Gets the option of this Field.  # noqa: E501

        Provides the different values that are available for the user to choose. This field is applicable for drop-down or radio field types.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The option of this Field.  # noqa: E501
        :rtype: list[Option]
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this Field.

        Provides the different values that are available for the user to choose. This field is applicable for drop-down or radio field types.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param option: The option of this Field.  # noqa: E501
        :type: list[Option]
        """

        self._option = option

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Field, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Field):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
