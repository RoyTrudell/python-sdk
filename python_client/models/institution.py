# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Institution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language_iso_code': 'str',
        'favicon': 'str',
        'country_iso_code': 'str',
        'is_added_by_user': 'str',
        'priority': 'str',
        'primary_language_iso_code': 'str',
        'base_url': 'str',
        'login_url': 'str',
        'provider_id': 'list[int]',
        'name': 'str',
        'logo': 'str',
        'id': 'int',
        'last_modified': 'str'
    }

    attribute_map = {
        'language_iso_code': 'languageISOCode',
        'favicon': 'favicon',
        'country_iso_code': 'countryISOCode',
        'is_added_by_user': 'isAddedByUser',
        'priority': 'PRIORITY',
        'primary_language_iso_code': 'primaryLanguageISOCode',
        'base_url': 'baseUrl',
        'login_url': 'loginUrl',
        'provider_id': 'providerId',
        'name': 'name',
        'logo': 'logo',
        'id': 'id',
        'last_modified': 'lastModified'
    }

    def __init__(self, language_iso_code=None, favicon=None, country_iso_code=None, is_added_by_user=None, priority=None, primary_language_iso_code=None, base_url=None, login_url=None, provider_id=None, name=None, logo=None, id=None, last_modified=None):  # noqa: E501
        """Institution - a model defined in Swagger"""  # noqa: E501

        self._language_iso_code = None
        self._favicon = None
        self._country_iso_code = None
        self._is_added_by_user = None
        self._priority = None
        self._primary_language_iso_code = None
        self._base_url = None
        self._login_url = None
        self._provider_id = None
        self._name = None
        self._logo = None
        self._id = None
        self._last_modified = None
        self.discriminator = None

        if language_iso_code is not None:
            self.language_iso_code = language_iso_code
        if favicon is not None:
            self.favicon = favicon
        if country_iso_code is not None:
            self.country_iso_code = country_iso_code
        if is_added_by_user is not None:
            self.is_added_by_user = is_added_by_user
        if priority is not None:
            self.priority = priority
        if primary_language_iso_code is not None:
            self.primary_language_iso_code = primary_language_iso_code
        if base_url is not None:
            self.base_url = base_url
        if login_url is not None:
            self.login_url = login_url
        if provider_id is not None:
            self.provider_id = provider_id
        if name is not None:
            self.name = name
        if logo is not None:
            self.logo = logo
        if id is not None:
            self.id = id
        if last_modified is not None:
            self.last_modified = last_modified

    @property
    def language_iso_code(self):
        """Gets the language_iso_code of this Institution.  # noqa: E501

        The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The language_iso_code of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._language_iso_code

    @language_iso_code.setter
    def language_iso_code(self, language_iso_code):
        """Sets the language_iso_code of this Institution.

        The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param language_iso_code: The language_iso_code of this Institution.  # noqa: E501
        :type: str
        """

        self._language_iso_code = language_iso_code

    @property
    def favicon(self):
        """Gets the favicon of this Institution.  # noqa: E501

        Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The favicon of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._favicon

    @favicon.setter
    def favicon(self, favicon):
        """Sets the favicon of this Institution.

        Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param favicon: The favicon of this Institution.  # noqa: E501
        :type: str
        """

        self._favicon = favicon

    @property
    def country_iso_code(self):
        """Gets the country_iso_code of this Institution.  # noqa: E501

        Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The country_iso_code of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._country_iso_code

    @country_iso_code.setter
    def country_iso_code(self, country_iso_code):
        """Sets the country_iso_code of this Institution.

        Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param country_iso_code: The country_iso_code of this Institution.  # noqa: E501
        :type: str
        """

        self._country_iso_code = country_iso_code

    @property
    def is_added_by_user(self):
        """Gets the is_added_by_user of this Institution.  # noqa: E501

        Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The is_added_by_user of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._is_added_by_user

    @is_added_by_user.setter
    def is_added_by_user(self, is_added_by_user):
        """Sets the is_added_by_user of this Institution.

        Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param is_added_by_user: The is_added_by_user of this Institution.  # noqa: E501
        :type: str
        """

        self._is_added_by_user = is_added_by_user

    @property
    def priority(self):
        """Gets the priority of this Institution.  # noqa: E501

        Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The priority of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Institution.

        Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param priority: The priority of this Institution.  # noqa: E501
        :type: str
        """
        allowed_values = ["POPULAR", "SUGGESTED", "COBRAND", "SEARCH", "ALL"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def primary_language_iso_code(self):
        """Gets the primary_language_iso_code of this Institution.  # noqa: E501

        The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The primary_language_iso_code of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._primary_language_iso_code

    @primary_language_iso_code.setter
    def primary_language_iso_code(self, primary_language_iso_code):
        """Sets the primary_language_iso_code of this Institution.

        The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param primary_language_iso_code: The primary_language_iso_code of this Institution.  # noqa: E501
        :type: str
        """

        self._primary_language_iso_code = primary_language_iso_code

    @property
    def base_url(self):
        """Gets the base_url of this Institution.  # noqa: E501

        The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The base_url of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this Institution.

        The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param base_url: The base_url of this Institution.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def login_url(self):
        """Gets the login_url of this Institution.  # noqa: E501

        The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The login_url of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this Institution.

        The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param login_url: The login_url of this Institution.  # noqa: E501
        :type: str
        """

        self._login_url = login_url

    @property
    def provider_id(self):
        """Gets the provider_id of this Institution.  # noqa: E501

        providerId<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The provider_id of this Institution.  # noqa: E501
        :rtype: list[int]
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this Institution.

        providerId<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param provider_id: The provider_id of this Institution.  # noqa: E501
        :type: list[int]
        """

        self._provider_id = provider_id

    @property
    def name(self):
        """Gets the name of this Institution.  # noqa: E501

        The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The name of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Institution.

        The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param name: The name of this Institution.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def logo(self):
        """Gets the logo of this Institution.  # noqa: E501

        The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The logo of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Institution.

        The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param logo: The logo of this Institution.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def id(self):
        """Gets the id of this Institution.  # noqa: E501

        Unique identifier for the provider site.(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The id of this Institution.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Institution.

        Unique identifier for the provider site.(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param id: The id of this Institution.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this Institution.  # noqa: E501

        Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :return: The last_modified of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this Institution.

        Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET institutions</li></ul>  # noqa: E501

        :param last_modified: The last_modified of this Institution.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Institution, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Institution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
