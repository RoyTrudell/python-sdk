# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.transaction import Transaction  # noqa: F401,E501


class VerifyTransactionCriteria(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'amount': 'float',
        'verified_transaction': 'list[Transaction]',
        'matched': 'str',
        'keyword': 'str',
        'date_variance': 'str',
        'base_type': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'amount': 'amount',
        'verified_transaction': 'verifiedTransaction',
        'matched': 'matched',
        'keyword': 'keyword',
        'date_variance': 'dateVariance',
        'base_type': 'baseType'
    }

    def __init__(self, _date=None, amount=None, verified_transaction=None, matched=None, keyword=None, date_variance=None, base_type=None):  # noqa: E501
        """VerifyTransactionCriteria - a model defined in Swagger"""  # noqa: E501

        self.__date = None
        self._amount = None
        self._verified_transaction = None
        self._matched = None
        self._keyword = None
        self._date_variance = None
        self._base_type = None
        self.discriminator = None

        self._date = _date
        self.amount = amount
        if verified_transaction is not None:
            self.verified_transaction = verified_transaction
        if matched is not None:
            self.matched = matched
        if keyword is not None:
            self.keyword = keyword
        if date_variance is not None:
            self.date_variance = date_variance
        if base_type is not None:
            self.base_type = base_type

    @property
    def _date(self):
        """Gets the _date of this VerifyTransactionCriteria.  # noqa: E501


        :return: The _date of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this VerifyTransactionCriteria.


        :param _date: The _date of this VerifyTransactionCriteria.  # noqa: E501
        :type: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def amount(self):
        """Gets the amount of this VerifyTransactionCriteria.  # noqa: E501


        :return: The amount of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this VerifyTransactionCriteria.


        :param amount: The amount of this VerifyTransactionCriteria.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def verified_transaction(self):
        """Gets the verified_transaction of this VerifyTransactionCriteria.  # noqa: E501


        :return: The verified_transaction of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._verified_transaction

    @verified_transaction.setter
    def verified_transaction(self, verified_transaction):
        """Sets the verified_transaction of this VerifyTransactionCriteria.


        :param verified_transaction: The verified_transaction of this VerifyTransactionCriteria.  # noqa: E501
        :type: list[Transaction]
        """

        self._verified_transaction = verified_transaction

    @property
    def matched(self):
        """Gets the matched of this VerifyTransactionCriteria.  # noqa: E501

        Indicates if the criteria is matched or not. <br><b>Applicable Values</b><br>  # noqa: E501

        :return: The matched of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: str
        """
        return self._matched

    @matched.setter
    def matched(self, matched):
        """Sets the matched of this VerifyTransactionCriteria.

        Indicates if the criteria is matched or not. <br><b>Applicable Values</b><br>  # noqa: E501

        :param matched: The matched of this VerifyTransactionCriteria.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPLETE", "NONE"]  # noqa: E501
        if matched not in allowed_values:
            raise ValueError(
                "Invalid value for `matched` ({0}), must be one of {1}"  # noqa: E501
                .format(matched, allowed_values)
            )

        self._matched = matched

    @property
    def keyword(self):
        """Gets the keyword of this VerifyTransactionCriteria.  # noqa: E501


        :return: The keyword of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this VerifyTransactionCriteria.


        :param keyword: The keyword of this VerifyTransactionCriteria.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    @property
    def date_variance(self):
        """Gets the date_variance of this VerifyTransactionCriteria.  # noqa: E501


        :return: The date_variance of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: str
        """
        return self._date_variance

    @date_variance.setter
    def date_variance(self, date_variance):
        """Sets the date_variance of this VerifyTransactionCriteria.


        :param date_variance: The date_variance of this VerifyTransactionCriteria.  # noqa: E501
        :type: str
        """

        self._date_variance = date_variance

    @property
    def base_type(self):
        """Gets the base_type of this VerifyTransactionCriteria.  # noqa: E501

        Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The base_type of this VerifyTransactionCriteria.  # noqa: E501
        :rtype: str
        """
        return self._base_type

    @base_type.setter
    def base_type(self, base_type):
        """Sets the base_type of this VerifyTransactionCriteria.

        Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param base_type: The base_type of this VerifyTransactionCriteria.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREDIT", "DEBIT"]  # noqa: E501
        if base_type not in allowed_values:
            raise ValueError(
                "Invalid value for `base_type` ({0}), must be one of {1}"  # noqa: E501
                .format(base_type, allowed_values)
            )

        self._base_type = base_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerifyTransactionCriteria, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerifyTransactionCriteria):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
