# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.account_address import AccountAddress  # noqa: F401,E501
from python_client.models.money import Money  # noqa: F401,E501


class CreateAccountInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_in_net_worth': 'str',
        'address': 'AccountAddress',
        'account_name': 'str',
        'account_type': 'str',
        'due_date': 'str',
        'memo': 'str',
        'home_value': 'Money',
        'account_number': 'str',
        'frequency': 'str',
        'amount_due': 'Money',
        'balance': 'Money',
        'nickname': 'str',
        'valuation_type': 'str'
    }

    attribute_map = {
        'include_in_net_worth': 'includeInNetWorth',
        'address': 'address',
        'account_name': 'accountName',
        'account_type': 'accountType',
        'due_date': 'dueDate',
        'memo': 'memo',
        'home_value': 'homeValue',
        'account_number': 'accountNumber',
        'frequency': 'frequency',
        'amount_due': 'amountDue',
        'balance': 'balance',
        'nickname': 'nickname',
        'valuation_type': 'valuationType'
    }

    def __init__(self, include_in_net_worth=None, address=None, account_name=None, account_type=None, due_date=None, memo=None, home_value=None, account_number=None, frequency=None, amount_due=None, balance=None, nickname=None, valuation_type=None):  # noqa: E501
        """CreateAccountInfo - a model defined in Swagger"""  # noqa: E501

        self._include_in_net_worth = None
        self._address = None
        self._account_name = None
        self._account_type = None
        self._due_date = None
        self._memo = None
        self._home_value = None
        self._account_number = None
        self._frequency = None
        self._amount_due = None
        self._balance = None
        self._nickname = None
        self._valuation_type = None
        self.discriminator = None

        if include_in_net_worth is not None:
            self.include_in_net_worth = include_in_net_worth
        if address is not None:
            self.address = address
        self.account_name = account_name
        self.account_type = account_type
        if due_date is not None:
            self.due_date = due_date
        if memo is not None:
            self.memo = memo
        if home_value is not None:
            self.home_value = home_value
        if account_number is not None:
            self.account_number = account_number
        if frequency is not None:
            self.frequency = frequency
        if amount_due is not None:
            self.amount_due = amount_due
        if balance is not None:
            self.balance = balance
        if nickname is not None:
            self.nickname = nickname
        if valuation_type is not None:
            self.valuation_type = valuation_type

    @property
    def include_in_net_worth(self):
        """Gets the include_in_net_worth of this CreateAccountInfo.  # noqa: E501


        :return: The include_in_net_worth of this CreateAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._include_in_net_worth

    @include_in_net_worth.setter
    def include_in_net_worth(self, include_in_net_worth):
        """Sets the include_in_net_worth of this CreateAccountInfo.


        :param include_in_net_worth: The include_in_net_worth of this CreateAccountInfo.  # noqa: E501
        :type: str
        """

        self._include_in_net_worth = include_in_net_worth

    @property
    def address(self):
        """Gets the address of this CreateAccountInfo.  # noqa: E501


        :return: The address of this CreateAccountInfo.  # noqa: E501
        :rtype: AccountAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateAccountInfo.


        :param address: The address of this CreateAccountInfo.  # noqa: E501
        :type: AccountAddress
        """

        self._address = address

    @property
    def account_name(self):
        """Gets the account_name of this CreateAccountInfo.  # noqa: E501


        :return: The account_name of this CreateAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this CreateAccountInfo.


        :param account_name: The account_name of this CreateAccountInfo.  # noqa: E501
        :type: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")  # noqa: E501
        if account_name is not None and len(account_name) > 100:
            raise ValueError("Invalid value for `account_name`, length must be less than or equal to `100`")  # noqa: E501
        if account_name is not None and len(account_name) < 1:
            raise ValueError("Invalid value for `account_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._account_name = account_name

    @property
    def account_type(self):
        """Gets the account_type of this CreateAccountInfo.  # noqa: E501


        :return: The account_type of this CreateAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this CreateAccountInfo.


        :param account_type: The account_type of this CreateAccountInfo.  # noqa: E501
        :type: str
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")  # noqa: E501
        if account_type is not None and len(account_type) > 2147483647:
            raise ValueError("Invalid value for `account_type`, length must be less than or equal to `2147483647`")  # noqa: E501
        if account_type is not None and len(account_type) < 1:
            raise ValueError("Invalid value for `account_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._account_type = account_type

    @property
    def due_date(self):
        """Gets the due_date of this CreateAccountInfo.  # noqa: E501


        :return: The due_date of this CreateAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this CreateAccountInfo.


        :param due_date: The due_date of this CreateAccountInfo.  # noqa: E501
        :type: str
        """

        self._due_date = due_date

    @property
    def memo(self):
        """Gets the memo of this CreateAccountInfo.  # noqa: E501


        :return: The memo of this CreateAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this CreateAccountInfo.


        :param memo: The memo of this CreateAccountInfo.  # noqa: E501
        :type: str
        """
        if memo is not None and len(memo) > 250:
            raise ValueError("Invalid value for `memo`, length must be less than or equal to `250`")  # noqa: E501
        if memo is not None and len(memo) < 0:
            raise ValueError("Invalid value for `memo`, length must be greater than or equal to `0`")  # noqa: E501

        self._memo = memo

    @property
    def home_value(self):
        """Gets the home_value of this CreateAccountInfo.  # noqa: E501


        :return: The home_value of this CreateAccountInfo.  # noqa: E501
        :rtype: Money
        """
        return self._home_value

    @home_value.setter
    def home_value(self, home_value):
        """Sets the home_value of this CreateAccountInfo.


        :param home_value: The home_value of this CreateAccountInfo.  # noqa: E501
        :type: Money
        """

        self._home_value = home_value

    @property
    def account_number(self):
        """Gets the account_number of this CreateAccountInfo.  # noqa: E501


        :return: The account_number of this CreateAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateAccountInfo.


        :param account_number: The account_number of this CreateAccountInfo.  # noqa: E501
        :type: str
        """
        if account_number is not None and len(account_number) > 100:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `100`")  # noqa: E501
        if account_number is not None and len(account_number) < 0:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `0`")  # noqa: E501
        if account_number is not None and not re.search(r'^[a-zA-Z0-9]+$', account_number):  # noqa: E501
            raise ValueError(r"Invalid value for `account_number`, must be a follow pattern or equal to `/^[a-zA-Z0-9]+$/`")  # noqa: E501

        self._account_number = account_number

    @property
    def frequency(self):
        """Gets the frequency of this CreateAccountInfo.  # noqa: E501


        :return: The frequency of this CreateAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this CreateAccountInfo.


        :param frequency: The frequency of this CreateAccountInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAILY", "ONE_TIME", "WEEKLY", "EVERY_2_WEEKS", "SEMI_MONTHLY", "MONTHLY", "QUARTERLY", "SEMI_ANNUALLY", "ANNUALLY", "EVERY_2_MONTHS", "EBILL", "FIRST_DAY_MONTHLY", "LAST_DAY_MONTHLY", "EVERY_4_WEEKS", "UNKNOWN", "OTHER"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def amount_due(self):
        """Gets the amount_due of this CreateAccountInfo.  # noqa: E501


        :return: The amount_due of this CreateAccountInfo.  # noqa: E501
        :rtype: Money
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this CreateAccountInfo.


        :param amount_due: The amount_due of this CreateAccountInfo.  # noqa: E501
        :type: Money
        """

        self._amount_due = amount_due

    @property
    def balance(self):
        """Gets the balance of this CreateAccountInfo.  # noqa: E501


        :return: The balance of this CreateAccountInfo.  # noqa: E501
        :rtype: Money
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this CreateAccountInfo.


        :param balance: The balance of this CreateAccountInfo.  # noqa: E501
        :type: Money
        """

        self._balance = balance

    @property
    def nickname(self):
        """Gets the nickname of this CreateAccountInfo.  # noqa: E501


        :return: The nickname of this CreateAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this CreateAccountInfo.


        :param nickname: The nickname of this CreateAccountInfo.  # noqa: E501
        :type: str
        """
        if nickname is not None and len(nickname) > 50:
            raise ValueError("Invalid value for `nickname`, length must be less than or equal to `50`")  # noqa: E501
        if nickname is not None and len(nickname) < 0:
            raise ValueError("Invalid value for `nickname`, length must be greater than or equal to `0`")  # noqa: E501

        self._nickname = nickname

    @property
    def valuation_type(self):
        """Gets the valuation_type of this CreateAccountInfo.  # noqa: E501


        :return: The valuation_type of this CreateAccountInfo.  # noqa: E501
        :rtype: str
        """
        return self._valuation_type

    @valuation_type.setter
    def valuation_type(self, valuation_type):
        """Sets the valuation_type of this CreateAccountInfo.


        :param valuation_type: The valuation_type of this CreateAccountInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["SYSTEM", "MANUAL"]  # noqa: E501
        if valuation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `valuation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(valuation_type, allowed_values)
            )

        self._valuation_type = valuation_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAccountInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAccountInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
