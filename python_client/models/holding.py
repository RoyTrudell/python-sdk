# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.asset_classification import AssetClassification  # noqa: F401,E501
from python_client.models.money import Money  # noqa: F401,E501


class Holding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'exercised_quantity': 'float',
        'cusip_number': 'str',
        'asset_classification': 'list[AssetClassification]',
        'vested_quantity': 'float',
        'description': 'str',
        'unvested_value': 'Money',
        'security_style': 'str',
        'vested_value': 'Money',
        'option_type': 'str',
        'last_updated': 'str',
        'match_status': 'str',
        'holding_type': 'str',
        'maturity_date': 'str',
        'price': 'Money',
        'term': 'str',
        'contract_quantity': 'float',
        'id': 'int',
        'is_short': 'bool',
        'value': 'Money',
        'expiration_date': 'str',
        'interest_rate': 'float',
        'quantity': 'float',
        'accrued_interest': 'Money',
        'grant_date': 'str',
        'sedol': 'str',
        'vested_shares_exercisable': 'float',
        'spread': 'Money',
        'account_id': 'int',
        'enriched_description': 'str',
        'coupon_rate': 'float',
        'created_date': 'str',
        'accrued_income': 'Money',
        'security_type': 'str',
        'provider_account_id': 'int',
        'unvested_quantity': 'float',
        'cost_basis': 'Money',
        'vesting_date': 'str',
        'isin': 'str',
        'strike_price': 'Money'
    }

    attribute_map = {
        'symbol': 'symbol',
        'exercised_quantity': 'exercisedQuantity',
        'cusip_number': 'cusipNumber',
        'asset_classification': 'assetClassification',
        'vested_quantity': 'vestedQuantity',
        'description': 'description',
        'unvested_value': 'unvestedValue',
        'security_style': 'securityStyle',
        'vested_value': 'vestedValue',
        'option_type': 'optionType',
        'last_updated': 'lastUpdated',
        'match_status': 'matchStatus',
        'holding_type': 'holdingType',
        'maturity_date': 'maturityDate',
        'price': 'price',
        'term': 'term',
        'contract_quantity': 'contractQuantity',
        'id': 'id',
        'is_short': 'isShort',
        'value': 'value',
        'expiration_date': 'expirationDate',
        'interest_rate': 'interestRate',
        'quantity': 'quantity',
        'accrued_interest': 'accruedInterest',
        'grant_date': 'grantDate',
        'sedol': 'sedol',
        'vested_shares_exercisable': 'vestedSharesExercisable',
        'spread': 'spread',
        'account_id': 'accountId',
        'enriched_description': 'enrichedDescription',
        'coupon_rate': 'couponRate',
        'created_date': 'createdDate',
        'accrued_income': 'accruedIncome',
        'security_type': 'securityType',
        'provider_account_id': 'providerAccountId',
        'unvested_quantity': 'unvestedQuantity',
        'cost_basis': 'costBasis',
        'vesting_date': 'vestingDate',
        'isin': 'isin',
        'strike_price': 'strikePrice'
    }

    def __init__(self, symbol=None, exercised_quantity=None, cusip_number=None, asset_classification=None, vested_quantity=None, description=None, unvested_value=None, security_style=None, vested_value=None, option_type=None, last_updated=None, match_status=None, holding_type=None, maturity_date=None, price=None, term=None, contract_quantity=None, id=None, is_short=None, value=None, expiration_date=None, interest_rate=None, quantity=None, accrued_interest=None, grant_date=None, sedol=None, vested_shares_exercisable=None, spread=None, account_id=None, enriched_description=None, coupon_rate=None, created_date=None, accrued_income=None, security_type=None, provider_account_id=None, unvested_quantity=None, cost_basis=None, vesting_date=None, isin=None, strike_price=None):  # noqa: E501
        """Holding - a model defined in Swagger"""  # noqa: E501

        self._symbol = None
        self._exercised_quantity = None
        self._cusip_number = None
        self._asset_classification = None
        self._vested_quantity = None
        self._description = None
        self._unvested_value = None
        self._security_style = None
        self._vested_value = None
        self._option_type = None
        self._last_updated = None
        self._match_status = None
        self._holding_type = None
        self._maturity_date = None
        self._price = None
        self._term = None
        self._contract_quantity = None
        self._id = None
        self._is_short = None
        self._value = None
        self._expiration_date = None
        self._interest_rate = None
        self._quantity = None
        self._accrued_interest = None
        self._grant_date = None
        self._sedol = None
        self._vested_shares_exercisable = None
        self._spread = None
        self._account_id = None
        self._enriched_description = None
        self._coupon_rate = None
        self._created_date = None
        self._accrued_income = None
        self._security_type = None
        self._provider_account_id = None
        self._unvested_quantity = None
        self._cost_basis = None
        self._vesting_date = None
        self._isin = None
        self._strike_price = None
        self.discriminator = None

        if symbol is not None:
            self.symbol = symbol
        if exercised_quantity is not None:
            self.exercised_quantity = exercised_quantity
        if cusip_number is not None:
            self.cusip_number = cusip_number
        if asset_classification is not None:
            self.asset_classification = asset_classification
        if vested_quantity is not None:
            self.vested_quantity = vested_quantity
        if description is not None:
            self.description = description
        if unvested_value is not None:
            self.unvested_value = unvested_value
        if security_style is not None:
            self.security_style = security_style
        if vested_value is not None:
            self.vested_value = vested_value
        if option_type is not None:
            self.option_type = option_type
        if last_updated is not None:
            self.last_updated = last_updated
        if match_status is not None:
            self.match_status = match_status
        if holding_type is not None:
            self.holding_type = holding_type
        if maturity_date is not None:
            self.maturity_date = maturity_date
        if price is not None:
            self.price = price
        if term is not None:
            self.term = term
        if contract_quantity is not None:
            self.contract_quantity = contract_quantity
        if id is not None:
            self.id = id
        if is_short is not None:
            self.is_short = is_short
        if value is not None:
            self.value = value
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if quantity is not None:
            self.quantity = quantity
        if accrued_interest is not None:
            self.accrued_interest = accrued_interest
        if grant_date is not None:
            self.grant_date = grant_date
        if sedol is not None:
            self.sedol = sedol
        if vested_shares_exercisable is not None:
            self.vested_shares_exercisable = vested_shares_exercisable
        if spread is not None:
            self.spread = spread
        if account_id is not None:
            self.account_id = account_id
        if enriched_description is not None:
            self.enriched_description = enriched_description
        if coupon_rate is not None:
            self.coupon_rate = coupon_rate
        if created_date is not None:
            self.created_date = created_date
        if accrued_income is not None:
            self.accrued_income = accrued_income
        if security_type is not None:
            self.security_type = security_type
        if provider_account_id is not None:
            self.provider_account_id = provider_account_id
        if unvested_quantity is not None:
            self.unvested_quantity = unvested_quantity
        if cost_basis is not None:
            self.cost_basis = cost_basis
        if vesting_date is not None:
            self.vesting_date = vesting_date
        if isin is not None:
            self.isin = isin
        if strike_price is not None:
            self.strike_price = strike_price

    @property
    def symbol(self):
        """Gets the symbol of this Holding.  # noqa: E501

        The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The symbol of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Holding.

        The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param symbol: The symbol of this Holding.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def exercised_quantity(self):
        """Gets the exercised_quantity of this Holding.  # noqa: E501

        The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The exercised_quantity of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._exercised_quantity

    @exercised_quantity.setter
    def exercised_quantity(self, exercised_quantity):
        """Sets the exercised_quantity of this Holding.

        The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param exercised_quantity: The exercised_quantity of this Holding.  # noqa: E501
        :type: float
        """

        self._exercised_quantity = exercised_quantity

    @property
    def cusip_number(self):
        """Gets the cusip_number of this Holding.  # noqa: E501

        The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The cusip_number of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._cusip_number

    @cusip_number.setter
    def cusip_number(self, cusip_number):
        """Sets the cusip_number of this Holding.

        The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param cusip_number: The cusip_number of this Holding.  # noqa: E501
        :type: str
        """

        self._cusip_number = cusip_number

    @property
    def asset_classification(self):
        """Gets the asset_classification of this Holding.  # noqa: E501

        Asset classification applied to the holding. <br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The asset_classification of this Holding.  # noqa: E501
        :rtype: list[AssetClassification]
        """
        return self._asset_classification

    @asset_classification.setter
    def asset_classification(self, asset_classification):
        """Sets the asset_classification of this Holding.

        Asset classification applied to the holding. <br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param asset_classification: The asset_classification of this Holding.  # noqa: E501
        :type: list[AssetClassification]
        """

        self._asset_classification = asset_classification

    @property
    def vested_quantity(self):
        """Gets the vested_quantity of this Holding.  # noqa: E501

        The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The vested_quantity of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._vested_quantity

    @vested_quantity.setter
    def vested_quantity(self, vested_quantity):
        """Sets the vested_quantity of this Holding.

        The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param vested_quantity: The vested_quantity of this Holding.  # noqa: E501
        :type: float
        """

        self._vested_quantity = vested_quantity

    @property
    def description(self):
        """Gets the description of this Holding.  # noqa: E501

        The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The description of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Holding.

        The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param description: The description of this Holding.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def unvested_value(self):
        """Gets the unvested_value of this Holding.  # noqa: E501

        Indicates the estimated market value of the unvested units.<br><b>Note</b>: FIs usually calculates the unvested value as the market price unvested quantity. The unvested value field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The unvested_value of this Holding.  # noqa: E501
        :rtype: Money
        """
        return self._unvested_value

    @unvested_value.setter
    def unvested_value(self, unvested_value):
        """Sets the unvested_value of this Holding.

        Indicates the estimated market value of the unvested units.<br><b>Note</b>: FIs usually calculates the unvested value as the market price unvested quantity. The unvested value field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param unvested_value: The unvested_value of this Holding.  # noqa: E501
        :type: Money
        """

        self._unvested_value = unvested_value

    @property
    def security_style(self):
        """Gets the security_style of this Holding.  # noqa: E501

        Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The security_style of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._security_style

    @security_style.setter
    def security_style(self, security_style):
        """Sets the security_style of this Holding.

        Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param security_style: The security_style of this Holding.  # noqa: E501
        :type: str
        """

        self._security_style = security_style

    @property
    def vested_value(self):
        """Gets the vested_value of this Holding.  # noqa: E501

        Indicates the estimated market value of the vested units.<br><b>Note</b>: FIs usually calculates the vested value as the market price vested quantity. The vested value field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The vested_value of this Holding.  # noqa: E501
        :rtype: Money
        """
        return self._vested_value

    @vested_value.setter
    def vested_value(self, vested_value):
        """Sets the vested_value of this Holding.

        Indicates the estimated market value of the vested units.<br><b>Note</b>: FIs usually calculates the vested value as the market price vested quantity. The vested value field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param vested_value: The vested_value of this Holding.  # noqa: E501
        :type: Money
        """

        self._vested_value = vested_value

    @property
    def option_type(self):
        """Gets the option_type of this Holding.  # noqa: E501

        The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The option_type of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._option_type

    @option_type.setter
    def option_type(self, option_type):
        """Sets the option_type of this Holding.

        The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>  # noqa: E501

        :param option_type: The option_type of this Holding.  # noqa: E501
        :type: str
        """
        allowed_values = ["put", "call", "unknown", "other"]  # noqa: E501
        if option_type not in allowed_values:
            raise ValueError(
                "Invalid value for `option_type` ({0}), must be one of {1}"  # noqa: E501
                .format(option_type, allowed_values)
            )

        self._option_type = option_type

    @property
    def last_updated(self):
        """Gets the last_updated of this Holding.  # noqa: E501

        The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The last_updated of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Holding.

        The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param last_updated: The last_updated of this Holding.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def match_status(self):
        """Gets the match_status of this Holding.  # noqa: E501

        Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The match_status of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._match_status

    @match_status.setter
    def match_status(self, match_status):
        """Sets the match_status of this Holding.

        Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param match_status: The match_status of this Holding.  # noqa: E501
        :type: str
        """

        self._match_status = match_status

    @property
    def holding_type(self):
        """Gets the holding_type of this Holding.  # noqa: E501

        Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The holding_type of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._holding_type

    @holding_type.setter
    def holding_type(self, holding_type):
        """Sets the holding_type of this Holding.

        Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param holding_type: The holding_type of this Holding.  # noqa: E501
        :type: str
        """
        allowed_values = ["stock", "mutualFund", "bond", "CD", "option", "moneyMarketFund", "other", "remic", "future", "commodity", "currency", "unitInvestmentTrust", "employeeStockOption", "insuranceAnnuity", "unknown", "preferredStock", "ETF", "warrants", "ETN"]  # noqa: E501
        if holding_type not in allowed_values:
            raise ValueError(
                "Invalid value for `holding_type` ({0}), must be one of {1}"  # noqa: E501
                .format(holding_type, allowed_values)
            )

        self._holding_type = holding_type

    @property
    def maturity_date(self):
        """Gets the maturity_date of this Holding.  # noqa: E501

        The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The maturity_date of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this Holding.

        The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param maturity_date: The maturity_date of this Holding.  # noqa: E501
        :type: str
        """

        self._maturity_date = maturity_date

    @property
    def price(self):
        """Gets the price of this Holding.  # noqa: E501

        The current price of the security.<br><b>Note</b>: Only for bonds the price field indicates the normalized price and not the price aggregated from the site. For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The price of this Holding.  # noqa: E501
        :rtype: Money
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Holding.

        The current price of the security.<br><b>Note</b>: Only for bonds the price field indicates the normalized price and not the price aggregated from the site. For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param price: The price of this Holding.  # noqa: E501
        :type: Money
        """

        self._price = price

    @property
    def term(self):
        """Gets the term of this Holding.  # noqa: E501

        The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The term of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Holding.

        The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param term: The term of this Holding.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def contract_quantity(self):
        """Gets the contract_quantity of this Holding.  # noqa: E501

        The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The contract_quantity of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._contract_quantity

    @contract_quantity.setter
    def contract_quantity(self, contract_quantity):
        """Sets the contract_quantity of this Holding.

        The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param contract_quantity: The contract_quantity of this Holding.  # noqa: E501
        :type: float
        """

        self._contract_quantity = contract_quantity

    @property
    def id(self):
        """Gets the id of this Holding.  # noqa: E501

        Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The id of this Holding.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Holding.

        Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param id: The id of this Holding.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_short(self):
        """Gets the is_short of this Holding.  # noqa: E501

        Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The is_short of this Holding.  # noqa: E501
        :rtype: bool
        """
        return self._is_short

    @is_short.setter
    def is_short(self, is_short):
        """Sets the is_short of this Holding.

        Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param is_short: The is_short of this Holding.  # noqa: E501
        :type: bool
        """

        self._is_short = is_short

    @property
    def value(self):
        """Gets the value of this Holding.  # noqa: E501

        The total market value of the security. For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The value of this Holding.  # noqa: E501
        :rtype: Money
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Holding.

        The total market value of the security. For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param value: The value of this Holding.  # noqa: E501
        :type: Money
        """

        self._value = value

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Holding.  # noqa: E501

        The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The expiration_date of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Holding.

        The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param expiration_date: The expiration_date of this Holding.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def interest_rate(self):
        """Gets the interest_rate of this Holding.  # noqa: E501

        The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The interest_rate of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this Holding.

        The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param interest_rate: The interest_rate of this Holding.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def quantity(self):
        """Gets the quantity of this Holding.  # noqa: E501

        The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The quantity of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Holding.

        The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param quantity: The quantity of this Holding.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def accrued_interest(self):
        """Gets the accrued_interest of this Holding.  # noqa: E501

        The accruedInterest of the  holding.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The accrued_interest of this Holding.  # noqa: E501
        :rtype: Money
        """
        return self._accrued_interest

    @accrued_interest.setter
    def accrued_interest(self, accrued_interest):
        """Sets the accrued_interest of this Holding.

        The accruedInterest of the  holding.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param accrued_interest: The accrued_interest of this Holding.  # noqa: E501
        :type: Money
        """

        self._accrued_interest = accrued_interest

    @property
    def grant_date(self):
        """Gets the grant_date of this Holding.  # noqa: E501

        The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The grant_date of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._grant_date

    @grant_date.setter
    def grant_date(self, grant_date):
        """Sets the grant_date of this Holding.

        The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param grant_date: The grant_date of this Holding.  # noqa: E501
        :type: str
        """

        self._grant_date = grant_date

    @property
    def sedol(self):
        """Gets the sedol of this Holding.  # noqa: E501

        The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The sedol of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._sedol

    @sedol.setter
    def sedol(self, sedol):
        """Sets the sedol of this Holding.

        The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param sedol: The sedol of this Holding.  # noqa: E501
        :type: str
        """

        self._sedol = sedol

    @property
    def vested_shares_exercisable(self):
        """Gets the vested_shares_exercisable of this Holding.  # noqa: E501

        The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The vested_shares_exercisable of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._vested_shares_exercisable

    @vested_shares_exercisable.setter
    def vested_shares_exercisable(self, vested_shares_exercisable):
        """Sets the vested_shares_exercisable of this Holding.

        The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param vested_shares_exercisable: The vested_shares_exercisable of this Holding.  # noqa: E501
        :type: float
        """

        self._vested_shares_exercisable = vested_shares_exercisable

    @property
    def spread(self):
        """Gets the spread of this Holding.  # noqa: E501

        The difference between the current market value of a stock and the strike price of the employee stock option, when the market value of the shares are greater than the stock price.<br><b>Note</b>: The spread field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The spread of this Holding.  # noqa: E501
        :rtype: Money
        """
        return self._spread

    @spread.setter
    def spread(self, spread):
        """Sets the spread of this Holding.

        The difference between the current market value of a stock and the strike price of the employee stock option, when the market value of the shares are greater than the stock price.<br><b>Note</b>: The spread field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param spread: The spread of this Holding.  # noqa: E501
        :type: Money
        """

        self._spread = spread

    @property
    def account_id(self):
        """Gets the account_id of this Holding.  # noqa: E501

        Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The account_id of this Holding.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Holding.

        Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param account_id: The account_id of this Holding.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def enriched_description(self):
        """Gets the enriched_description of this Holding.  # noqa: E501

        The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The enriched_description of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._enriched_description

    @enriched_description.setter
    def enriched_description(self, enriched_description):
        """Sets the enriched_description of this Holding.

        The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param enriched_description: The enriched_description of this Holding.  # noqa: E501
        :type: str
        """

        self._enriched_description = enriched_description

    @property
    def coupon_rate(self):
        """Gets the coupon_rate of this Holding.  # noqa: E501

        The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The coupon_rate of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._coupon_rate

    @coupon_rate.setter
    def coupon_rate(self, coupon_rate):
        """Sets the coupon_rate of this Holding.

        The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param coupon_rate: The coupon_rate of this Holding.  # noqa: E501
        :type: float
        """

        self._coupon_rate = coupon_rate

    @property
    def created_date(self):
        """Gets the created_date of this Holding.  # noqa: E501

        The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The created_date of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Holding.

        The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param created_date: The created_date of this Holding.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def accrued_income(self):
        """Gets the accrued_income of this Holding.  # noqa: E501

        The accruedIncome of the  holding.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The accrued_income of this Holding.  # noqa: E501
        :rtype: Money
        """
        return self._accrued_income

    @accrued_income.setter
    def accrued_income(self, accrued_income):
        """Sets the accrued_income of this Holding.

        The accruedIncome of the  holding.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param accrued_income: The accrued_income of this Holding.  # noqa: E501
        :type: Money
        """

        self._accrued_income = accrued_income

    @property
    def security_type(self):
        """Gets the security_type of this Holding.  # noqa: E501

        Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The security_type of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this Holding.

        Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param security_type: The security_type of this Holding.  # noqa: E501
        :type: str
        """

        self._security_type = security_type

    @property
    def provider_account_id(self):
        """Gets the provider_account_id of this Holding.  # noqa: E501

        Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The provider_account_id of this Holding.  # noqa: E501
        :rtype: int
        """
        return self._provider_account_id

    @provider_account_id.setter
    def provider_account_id(self, provider_account_id):
        """Sets the provider_account_id of this Holding.

        Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param provider_account_id: The provider_account_id of this Holding.  # noqa: E501
        :type: int
        """

        self._provider_account_id = provider_account_id

    @property
    def unvested_quantity(self):
        """Gets the unvested_quantity of this Holding.  # noqa: E501

        Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The unvested_quantity of this Holding.  # noqa: E501
        :rtype: float
        """
        return self._unvested_quantity

    @unvested_quantity.setter
    def unvested_quantity(self, unvested_quantity):
        """Sets the unvested_quantity of this Holding.

        Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param unvested_quantity: The unvested_quantity of this Holding.  # noqa: E501
        :type: float
        """

        self._unvested_quantity = unvested_quantity

    @property
    def cost_basis(self):
        """Gets the cost_basis of this Holding.  # noqa: E501

        In a one-off security purchase, the cost basis is the quantity acquired multiplied by the price per unit paid plus any commission paid. In case, the same position is acquired in different lots on different days at different prices, the sum total of the cost incurred is divided by the total units acquired to arrive at the average cost basis.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The cost_basis of this Holding.  # noqa: E501
        :rtype: Money
        """
        return self._cost_basis

    @cost_basis.setter
    def cost_basis(self, cost_basis):
        """Sets the cost_basis of this Holding.

        In a one-off security purchase, the cost basis is the quantity acquired multiplied by the price per unit paid plus any commission paid. In case, the same position is acquired in different lots on different days at different prices, the sum total of the cost incurred is divided by the total units acquired to arrive at the average cost basis.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param cost_basis: The cost_basis of this Holding.  # noqa: E501
        :type: Money
        """

        self._cost_basis = cost_basis

    @property
    def vesting_date(self):
        """Gets the vesting_date of this Holding.  # noqa: E501

        The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The vesting_date of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._vesting_date

    @vesting_date.setter
    def vesting_date(self, vesting_date):
        """Sets the vesting_date of this Holding.

        The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param vesting_date: The vesting_date of this Holding.  # noqa: E501
        :type: str
        """

        self._vesting_date = vesting_date

    @property
    def isin(self):
        """Gets the isin of this Holding.  # noqa: E501

        The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The isin of this Holding.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this Holding.

        The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param isin: The isin of this Holding.  # noqa: E501
        :type: str
        """

        self._isin = isin

    @property
    def strike_price(self):
        """Gets the strike_price of this Holding.  # noqa: E501

        The strike (exercise) price for the option position.<br><b>Note</b>: The strike price field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :return: The strike_price of this Holding.  # noqa: E501
        :rtype: Money
        """
        return self._strike_price

    @strike_price.setter
    def strike_price(self, strike_price):
        """Sets the strike_price of this Holding.

        The strike (exercise) price for the option position.<br><b>Note</b>: The strike price field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>  # noqa: E501

        :param strike_price: The strike_price of this Holding.  # noqa: E501
        :type: Money
        """

        self._strike_price = strike_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Holding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Holding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
