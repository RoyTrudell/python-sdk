# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.stock_exchange_detail import StockExchangeDetail  # noqa: F401,E501


class Security(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stock_exchange_details': 'list[StockExchangeDetail]',
        'issue_type_multiplier': 'float',
        'state_taxable': 'bool',
        'call_date': 'str',
        'cdsc_fund_flag': 'bool',
        'cusip': 'str',
        'federal_taxable': 'bool',
        's_and_p_rating': 'str',
        'share_class': 'str',
        'is_envestnet_dummy_security': 'bool',
        'description': 'str',
        'minimum_purchase': 'int',
        'type': 'str',
        'first_coupon_date': 'str',
        'frequency': 'int',
        'accrual_method': 'str',
        'income_currency': 'str',
        'maturity_date': 'str',
        'call_price': 'float',
        'id': 'int',
        'issue_date': 'str',
        'sector': 'str',
        'agency_factor': 'float',
        'interest_rate': 'float',
        'last_modified_date': 'str',
        'gics_sector': 'str',
        'closed_flag': 'bool',
        'sedol': 'str',
        'sub_sector': 'str',
        'last_coupon_date': 'str',
        'is_synthetic_security': 'bool',
        'trade_currency_code': 'str',
        'is_dummy_security': 'bool',
        'moody_rating': 'str',
        'style': 'str',
        'firm_eligible': 'str',
        'fund_family': 'str',
        'isin': 'str'
    }

    attribute_map = {
        'stock_exchange_details': 'stockExchangeDetails',
        'issue_type_multiplier': 'issueTypeMultiplier',
        'state_taxable': 'stateTaxable',
        'call_date': 'callDate',
        'cdsc_fund_flag': 'cdscFundFlag',
        'cusip': 'cusip',
        'federal_taxable': 'federalTaxable',
        's_and_p_rating': 'sAndPRating',
        'share_class': 'shareClass',
        'is_envestnet_dummy_security': 'isEnvestnetDummySecurity',
        'description': 'description',
        'minimum_purchase': 'minimumPurchase',
        'type': 'type',
        'first_coupon_date': 'firstCouponDate',
        'frequency': 'frequency',
        'accrual_method': 'accrualMethod',
        'income_currency': 'incomeCurrency',
        'maturity_date': 'maturityDate',
        'call_price': 'callPrice',
        'id': 'id',
        'issue_date': 'issueDate',
        'sector': 'sector',
        'agency_factor': 'agencyFactor',
        'interest_rate': 'interestRate',
        'last_modified_date': 'lastModifiedDate',
        'gics_sector': 'gicsSector',
        'closed_flag': 'closedFlag',
        'sedol': 'sedol',
        'sub_sector': 'subSector',
        'last_coupon_date': 'lastCouponDate',
        'is_synthetic_security': 'isSyntheticSecurity',
        'trade_currency_code': 'tradeCurrencyCode',
        'is_dummy_security': 'isDummySecurity',
        'moody_rating': 'moodyRating',
        'style': 'style',
        'firm_eligible': 'firmEligible',
        'fund_family': 'fundFamily',
        'isin': 'isin'
    }

    def __init__(self, stock_exchange_details=None, issue_type_multiplier=None, state_taxable=None, call_date=None, cdsc_fund_flag=None, cusip=None, federal_taxable=None, s_and_p_rating=None, share_class=None, is_envestnet_dummy_security=None, description=None, minimum_purchase=None, type=None, first_coupon_date=None, frequency=None, accrual_method=None, income_currency=None, maturity_date=None, call_price=None, id=None, issue_date=None, sector=None, agency_factor=None, interest_rate=None, last_modified_date=None, gics_sector=None, closed_flag=None, sedol=None, sub_sector=None, last_coupon_date=None, is_synthetic_security=None, trade_currency_code=None, is_dummy_security=None, moody_rating=None, style=None, firm_eligible=None, fund_family=None, isin=None):  # noqa: E501
        """Security - a model defined in Swagger"""  # noqa: E501

        self._stock_exchange_details = None
        self._issue_type_multiplier = None
        self._state_taxable = None
        self._call_date = None
        self._cdsc_fund_flag = None
        self._cusip = None
        self._federal_taxable = None
        self._s_and_p_rating = None
        self._share_class = None
        self._is_envestnet_dummy_security = None
        self._description = None
        self._minimum_purchase = None
        self._type = None
        self._first_coupon_date = None
        self._frequency = None
        self._accrual_method = None
        self._income_currency = None
        self._maturity_date = None
        self._call_price = None
        self._id = None
        self._issue_date = None
        self._sector = None
        self._agency_factor = None
        self._interest_rate = None
        self._last_modified_date = None
        self._gics_sector = None
        self._closed_flag = None
        self._sedol = None
        self._sub_sector = None
        self._last_coupon_date = None
        self._is_synthetic_security = None
        self._trade_currency_code = None
        self._is_dummy_security = None
        self._moody_rating = None
        self._style = None
        self._firm_eligible = None
        self._fund_family = None
        self._isin = None
        self.discriminator = None

        if stock_exchange_details is not None:
            self.stock_exchange_details = stock_exchange_details
        if issue_type_multiplier is not None:
            self.issue_type_multiplier = issue_type_multiplier
        if state_taxable is not None:
            self.state_taxable = state_taxable
        if call_date is not None:
            self.call_date = call_date
        if cdsc_fund_flag is not None:
            self.cdsc_fund_flag = cdsc_fund_flag
        if cusip is not None:
            self.cusip = cusip
        if federal_taxable is not None:
            self.federal_taxable = federal_taxable
        if s_and_p_rating is not None:
            self.s_and_p_rating = s_and_p_rating
        if share_class is not None:
            self.share_class = share_class
        if is_envestnet_dummy_security is not None:
            self.is_envestnet_dummy_security = is_envestnet_dummy_security
        if description is not None:
            self.description = description
        if minimum_purchase is not None:
            self.minimum_purchase = minimum_purchase
        if type is not None:
            self.type = type
        if first_coupon_date is not None:
            self.first_coupon_date = first_coupon_date
        if frequency is not None:
            self.frequency = frequency
        if accrual_method is not None:
            self.accrual_method = accrual_method
        if income_currency is not None:
            self.income_currency = income_currency
        if maturity_date is not None:
            self.maturity_date = maturity_date
        if call_price is not None:
            self.call_price = call_price
        if id is not None:
            self.id = id
        if issue_date is not None:
            self.issue_date = issue_date
        if sector is not None:
            self.sector = sector
        if agency_factor is not None:
            self.agency_factor = agency_factor
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if gics_sector is not None:
            self.gics_sector = gics_sector
        if closed_flag is not None:
            self.closed_flag = closed_flag
        if sedol is not None:
            self.sedol = sedol
        if sub_sector is not None:
            self.sub_sector = sub_sector
        if last_coupon_date is not None:
            self.last_coupon_date = last_coupon_date
        if is_synthetic_security is not None:
            self.is_synthetic_security = is_synthetic_security
        if trade_currency_code is not None:
            self.trade_currency_code = trade_currency_code
        if is_dummy_security is not None:
            self.is_dummy_security = is_dummy_security
        if moody_rating is not None:
            self.moody_rating = moody_rating
        if style is not None:
            self.style = style
        if firm_eligible is not None:
            self.firm_eligible = firm_eligible
        if fund_family is not None:
            self.fund_family = fund_family
        if isin is not None:
            self.isin = isin

    @property
    def stock_exchange_details(self):
        """Gets the stock_exchange_details of this Security.  # noqa: E501

        Securities exchange provide the securities information at the corresponding exchanges. <br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The stock_exchange_details of this Security.  # noqa: E501
        :rtype: list[StockExchangeDetail]
        """
        return self._stock_exchange_details

    @stock_exchange_details.setter
    def stock_exchange_details(self, stock_exchange_details):
        """Sets the stock_exchange_details of this Security.

        Securities exchange provide the securities information at the corresponding exchanges. <br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param stock_exchange_details: The stock_exchange_details of this Security.  # noqa: E501
        :type: list[StockExchangeDetail]
        """

        self._stock_exchange_details = stock_exchange_details

    @property
    def issue_type_multiplier(self):
        """Gets the issue_type_multiplier of this Security.  # noqa: E501

        Price units corresponding to the security style. This is used to derive actual price of the security from market value.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The issue_type_multiplier of this Security.  # noqa: E501
        :rtype: float
        """
        return self._issue_type_multiplier

    @issue_type_multiplier.setter
    def issue_type_multiplier(self, issue_type_multiplier):
        """Sets the issue_type_multiplier of this Security.

        Price units corresponding to the security style. This is used to derive actual price of the security from market value.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param issue_type_multiplier: The issue_type_multiplier of this Security.  # noqa: E501
        :type: float
        """

        self._issue_type_multiplier = issue_type_multiplier

    @property
    def state_taxable(self):
        """Gets the state_taxable of this Security.  # noqa: E501

        The state in which the security is taxed.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The state_taxable of this Security.  # noqa: E501
        :rtype: bool
        """
        return self._state_taxable

    @state_taxable.setter
    def state_taxable(self, state_taxable):
        """Sets the state_taxable of this Security.

        The state in which the security is taxed.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param state_taxable: The state_taxable of this Security.  # noqa: E501
        :type: bool
        """

        self._state_taxable = state_taxable

    @property
    def call_date(self):
        """Gets the call_date of this Security.  # noqa: E501

        Next call date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The call_date of this Security.  # noqa: E501
        :rtype: str
        """
        return self._call_date

    @call_date.setter
    def call_date(self, call_date):
        """Sets the call_date of this Security.

        Next call date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param call_date: The call_date of this Security.  # noqa: E501
        :type: str
        """

        self._call_date = call_date

    @property
    def cdsc_fund_flag(self):
        """Gets the cdsc_fund_flag of this Security.  # noqa: E501

        cdsc fund flag of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The cdsc_fund_flag of this Security.  # noqa: E501
        :rtype: bool
        """
        return self._cdsc_fund_flag

    @cdsc_fund_flag.setter
    def cdsc_fund_flag(self, cdsc_fund_flag):
        """Sets the cdsc_fund_flag of this Security.

        cdsc fund flag of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param cdsc_fund_flag: The cdsc_fund_flag of this Security.  # noqa: E501
        :type: bool
        """

        self._cdsc_fund_flag = cdsc_fund_flag

    @property
    def cusip(self):
        """Gets the cusip of this Security.  # noqa: E501

        A CUSIP is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The cusip of this Security.  # noqa: E501
        :rtype: str
        """
        return self._cusip

    @cusip.setter
    def cusip(self, cusip):
        """Sets the cusip of this Security.

        A CUSIP is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param cusip: The cusip of this Security.  # noqa: E501
        :type: str
        """

        self._cusip = cusip

    @property
    def federal_taxable(self):
        """Gets the federal_taxable of this Security.  # noqa: E501

        Flag indicating federal taxable.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The federal_taxable of this Security.  # noqa: E501
        :rtype: bool
        """
        return self._federal_taxable

    @federal_taxable.setter
    def federal_taxable(self, federal_taxable):
        """Sets the federal_taxable of this Security.

        Flag indicating federal taxable.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param federal_taxable: The federal_taxable of this Security.  # noqa: E501
        :type: bool
        """

        self._federal_taxable = federal_taxable

    @property
    def s_and_p_rating(self):
        """Gets the s_and_p_rating of this Security.  # noqa: E501

        Unique identifier for S&P rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The s_and_p_rating of this Security.  # noqa: E501
        :rtype: str
        """
        return self._s_and_p_rating

    @s_and_p_rating.setter
    def s_and_p_rating(self, s_and_p_rating):
        """Sets the s_and_p_rating of this Security.

        Unique identifier for S&P rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param s_and_p_rating: The s_and_p_rating of this Security.  # noqa: E501
        :type: str
        """

        self._s_and_p_rating = s_and_p_rating

    @property
    def share_class(self):
        """Gets the share_class of this Security.  # noqa: E501

        Share class of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The share_class of this Security.  # noqa: E501
        :rtype: str
        """
        return self._share_class

    @share_class.setter
    def share_class(self, share_class):
        """Sets the share_class of this Security.

        Share class of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param share_class: The share_class of this Security.  # noqa: E501
        :type: str
        """

        self._share_class = share_class

    @property
    def is_envestnet_dummy_security(self):
        """Gets the is_envestnet_dummy_security of this Security.  # noqa: E501

        Flag indicating a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The is_envestnet_dummy_security of this Security.  # noqa: E501
        :rtype: bool
        """
        return self._is_envestnet_dummy_security

    @is_envestnet_dummy_security.setter
    def is_envestnet_dummy_security(self, is_envestnet_dummy_security):
        """Sets the is_envestnet_dummy_security of this Security.

        Flag indicating a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param is_envestnet_dummy_security: The is_envestnet_dummy_security of this Security.  # noqa: E501
        :type: bool
        """

        self._is_envestnet_dummy_security = is_envestnet_dummy_security

    @property
    def description(self):
        """Gets the description of this Security.  # noqa: E501

        The description (name) of the security. For example, Cisco Systems.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The description of this Security.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Security.

        The description (name) of the security. For example, Cisco Systems.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param description: The description of this Security.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def minimum_purchase(self):
        """Gets the minimum_purchase of this Security.  # noqa: E501

        Minimum purchase of security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The minimum_purchase of this Security.  # noqa: E501
        :rtype: int
        """
        return self._minimum_purchase

    @minimum_purchase.setter
    def minimum_purchase(self, minimum_purchase):
        """Sets the minimum_purchase of this Security.

        Minimum purchase of security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param minimum_purchase: The minimum_purchase of this Security.  # noqa: E501
        :type: int
        """

        self._minimum_purchase = minimum_purchase

    @property
    def type(self):
        """Gets the type of this Security.  # noqa: E501

        Indicates the type of security like stocks, mutual fund, etc. <br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The type of this Security.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Security.

        Indicates the type of security like stocks, mutual fund, etc. <br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param type: The type of this Security.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def first_coupon_date(self):
        """Gets the first_coupon_date of this Security.  # noqa: E501

        First coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The first_coupon_date of this Security.  # noqa: E501
        :rtype: str
        """
        return self._first_coupon_date

    @first_coupon_date.setter
    def first_coupon_date(self, first_coupon_date):
        """Sets the first_coupon_date of this Security.

        First coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param first_coupon_date: The first_coupon_date of this Security.  # noqa: E501
        :type: str
        """

        self._first_coupon_date = first_coupon_date

    @property
    def frequency(self):
        """Gets the frequency of this Security.  # noqa: E501

        Coupon Frequency.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The frequency of this Security.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Security.

        Coupon Frequency.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param frequency: The frequency of this Security.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def accrual_method(self):
        """Gets the accrual_method of this Security.  # noqa: E501

        The method in which interest is accrued or earned.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The accrual_method of this Security.  # noqa: E501
        :rtype: str
        """
        return self._accrual_method

    @accrual_method.setter
    def accrual_method(self, accrual_method):
        """Sets the accrual_method of this Security.

        The method in which interest is accrued or earned.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param accrual_method: The accrual_method of this Security.  # noqa: E501
        :type: str
        """

        self._accrual_method = accrual_method

    @property
    def income_currency(self):
        """Gets the income_currency of this Security.  # noqa: E501

        ISO 4217 currency code indicating income currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The income_currency of this Security.  # noqa: E501
        :rtype: str
        """
        return self._income_currency

    @income_currency.setter
    def income_currency(self, income_currency):
        """Sets the income_currency of this Security.

        ISO 4217 currency code indicating income currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param income_currency: The income_currency of this Security.  # noqa: E501
        :type: str
        """

        self._income_currency = income_currency

    @property
    def maturity_date(self):
        """Gets the maturity_date of this Security.  # noqa: E501

        Maturity date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The maturity_date of this Security.  # noqa: E501
        :rtype: str
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this Security.

        Maturity date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param maturity_date: The maturity_date of this Security.  # noqa: E501
        :type: str
        """

        self._maturity_date = maturity_date

    @property
    def call_price(self):
        """Gets the call_price of this Security.  # noqa: E501

        Next call price of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The call_price of this Security.  # noqa: E501
        :rtype: float
        """
        return self._call_price

    @call_price.setter
    def call_price(self, call_price):
        """Sets the call_price of this Security.

        Next call price of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param call_price: The call_price of this Security.  # noqa: E501
        :type: float
        """

        self._call_price = call_price

    @property
    def id(self):
        """Gets the id of this Security.  # noqa: E501

        The unique identifier of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The id of this Security.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Security.

        The unique identifier of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param id: The id of this Security.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def issue_date(self):
        """Gets the issue_date of this Security.  # noqa: E501

        Issue date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The issue_date of this Security.  # noqa: E501
        :rtype: str
        """
        return self._issue_date

    @issue_date.setter
    def issue_date(self, issue_date):
        """Sets the issue_date of this Security.

        Issue date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param issue_date: The issue_date of this Security.  # noqa: E501
        :type: str
        """

        self._issue_date = issue_date

    @property
    def sector(self):
        """Gets the sector of this Security.  # noqa: E501

        Identifier of the sector to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The sector of this Security.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this Security.

        Identifier of the sector to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param sector: The sector of this Security.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def agency_factor(self):
        """Gets the agency_factor of this Security.  # noqa: E501

        Agency factor of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The agency_factor of this Security.  # noqa: E501
        :rtype: float
        """
        return self._agency_factor

    @agency_factor.setter
    def agency_factor(self, agency_factor):
        """Sets the agency_factor of this Security.

        Agency factor of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param agency_factor: The agency_factor of this Security.  # noqa: E501
        :type: float
        """

        self._agency_factor = agency_factor

    @property
    def interest_rate(self):
        """Gets the interest_rate of this Security.  # noqa: E501

        The rate of interest paid annually, expressed as a percentage of the bond's par or face value.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The interest_rate of this Security.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this Security.

        The rate of interest paid annually, expressed as a percentage of the bond's par or face value.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param interest_rate: The interest_rate of this Security.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Security.  # noqa: E501

        The last updated date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The last_modified_date of this Security.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Security.

        The last updated date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param last_modified_date: The last_modified_date of this Security.  # noqa: E501
        :type: str
        """

        self._last_modified_date = last_modified_date

    @property
    def gics_sector(self):
        """Gets the gics_sector of this Security.  # noqa: E501

        GICS Sector is a categorization the S&P assigns to all publically traded companies. <br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The gics_sector of this Security.  # noqa: E501
        :rtype: str
        """
        return self._gics_sector

    @gics_sector.setter
    def gics_sector(self, gics_sector):
        """Sets the gics_sector of this Security.

        GICS Sector is a categorization the S&P assigns to all publically traded companies. <br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param gics_sector: The gics_sector of this Security.  # noqa: E501
        :type: str
        """

        self._gics_sector = gics_sector

    @property
    def closed_flag(self):
        """Gets the closed_flag of this Security.  # noqa: E501

        <b>true</b>:Closed for all investors , <b>false</b>: Open to all investors.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The closed_flag of this Security.  # noqa: E501
        :rtype: bool
        """
        return self._closed_flag

    @closed_flag.setter
    def closed_flag(self, closed_flag):
        """Sets the closed_flag of this Security.

        <b>true</b>:Closed for all investors , <b>false</b>: Open to all investors.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param closed_flag: The closed_flag of this Security.  # noqa: E501
        :type: bool
        """

        self._closed_flag = closed_flag

    @property
    def sedol(self):
        """Gets the sedol of this Security.  # noqa: E501

        The Stock Exchange Daily Official List (SEDOL) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The sedol of this Security.  # noqa: E501
        :rtype: str
        """
        return self._sedol

    @sedol.setter
    def sedol(self, sedol):
        """Sets the sedol of this Security.

        The Stock Exchange Daily Official List (SEDOL) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param sedol: The sedol of this Security.  # noqa: E501
        :type: str
        """

        self._sedol = sedol

    @property
    def sub_sector(self):
        """Gets the sub_sector of this Security.  # noqa: E501

        GICS sector ID to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The sub_sector of this Security.  # noqa: E501
        :rtype: str
        """
        return self._sub_sector

    @sub_sector.setter
    def sub_sector(self, sub_sector):
        """Sets the sub_sector of this Security.

        GICS sector ID to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param sub_sector: The sub_sector of this Security.  # noqa: E501
        :type: str
        """

        self._sub_sector = sub_sector

    @property
    def last_coupon_date(self):
        """Gets the last_coupon_date of this Security.  # noqa: E501

        Last coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The last_coupon_date of this Security.  # noqa: E501
        :rtype: str
        """
        return self._last_coupon_date

    @last_coupon_date.setter
    def last_coupon_date(self, last_coupon_date):
        """Sets the last_coupon_date of this Security.

        Last coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param last_coupon_date: The last_coupon_date of this Security.  # noqa: E501
        :type: str
        """

        self._last_coupon_date = last_coupon_date

    @property
    def is_synthetic_security(self):
        """Gets the is_synthetic_security of this Security.  # noqa: E501

        Indicates whether the security is a simulated security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The is_synthetic_security of this Security.  # noqa: E501
        :rtype: bool
        """
        return self._is_synthetic_security

    @is_synthetic_security.setter
    def is_synthetic_security(self, is_synthetic_security):
        """Sets the is_synthetic_security of this Security.

        Indicates whether the security is a simulated security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param is_synthetic_security: The is_synthetic_security of this Security.  # noqa: E501
        :type: bool
        """

        self._is_synthetic_security = is_synthetic_security

    @property
    def trade_currency_code(self):
        """Gets the trade_currency_code of this Security.  # noqa: E501

        ISO 4217 currency code indicating trading currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The trade_currency_code of this Security.  # noqa: E501
        :rtype: str
        """
        return self._trade_currency_code

    @trade_currency_code.setter
    def trade_currency_code(self, trade_currency_code):
        """Sets the trade_currency_code of this Security.

        ISO 4217 currency code indicating trading currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param trade_currency_code: The trade_currency_code of this Security.  # noqa: E501
        :type: str
        """

        self._trade_currency_code = trade_currency_code

    @property
    def is_dummy_security(self):
        """Gets the is_dummy_security of this Security.  # noqa: E501

        Indicates whether the security is a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The is_dummy_security of this Security.  # noqa: E501
        :rtype: bool
        """
        return self._is_dummy_security

    @is_dummy_security.setter
    def is_dummy_security(self, is_dummy_security):
        """Sets the is_dummy_security of this Security.

        Indicates whether the security is a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param is_dummy_security: The is_dummy_security of this Security.  # noqa: E501
        :type: bool
        """

        self._is_dummy_security = is_dummy_security

    @property
    def moody_rating(self):
        """Gets the moody_rating of this Security.  # noqa: E501

        Unique identifier for Moody rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The moody_rating of this Security.  # noqa: E501
        :rtype: str
        """
        return self._moody_rating

    @moody_rating.setter
    def moody_rating(self, moody_rating):
        """Sets the moody_rating of this Security.

        Unique identifier for Moody rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param moody_rating: The moody_rating of this Security.  # noqa: E501
        :type: str
        """

        self._moody_rating = moody_rating

    @property
    def style(self):
        """Gets the style of this Security.  # noqa: E501

        Classification of the style for the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The style of this Security.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this Security.

        Classification of the style for the security.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param style: The style of this Security.  # noqa: E501
        :type: str
        """

        self._style = style

    @property
    def firm_eligible(self):
        """Gets the firm_eligible of this Security.  # noqa: E501

        <b>1</b>- indicates Eligible,<b>0</b>- indicates firm is not eligible.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The firm_eligible of this Security.  # noqa: E501
        :rtype: str
        """
        return self._firm_eligible

    @firm_eligible.setter
    def firm_eligible(self, firm_eligible):
        """Sets the firm_eligible of this Security.

        <b>1</b>- indicates Eligible,<b>0</b>- indicates firm is not eligible.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param firm_eligible: The firm_eligible of this Security.  # noqa: E501
        :type: str
        """

        self._firm_eligible = firm_eligible

    @property
    def fund_family(self):
        """Gets the fund_family of this Security.  # noqa: E501

        Mutual Fund Family Name.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The fund_family of this Security.  # noqa: E501
        :rtype: str
        """
        return self._fund_family

    @fund_family.setter
    def fund_family(self, fund_family):
        """Sets the fund_family of this Security.

        Mutual Fund Family Name.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param fund_family: The fund_family of this Security.  # noqa: E501
        :type: str
        """

        self._fund_family = fund_family

    @property
    def isin(self):
        """Gets the isin of this Security.  # noqa: E501

        The International Securities Identification Number (ISIN) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The isin of this Security.  # noqa: E501
        :rtype: str
        """
        return self._isin

    @isin.setter
    def isin(self, isin):
        """Sets the isin of this Security.

        The International Securities Identification Number (ISIN) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param isin: The isin of this Security.  # noqa: E501
        :type: str
        """

        self._isin = isin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Security, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Security):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
