# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Name(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'middle': 'str',
        'last': 'str',
        'full_name': 'str',
        'first': 'str'
    }

    attribute_map = {
        'middle': 'middle',
        'last': 'last',
        'full_name': 'fullName',
        'first': 'first'
    }

    def __init__(self, middle=None, last=None, full_name=None, first=None):  # noqa: E501
        """Name - a model defined in Swagger"""  # noqa: E501

        self._middle = None
        self._last = None
        self._full_name = None
        self._first = None
        self.discriminator = None

        if middle is not None:
            self.middle = middle
        if last is not None:
            self.last = last
        if full_name is not None:
            self.full_name = full_name
        if first is not None:
            self.first = first

    @property
    def middle(self):
        """Gets the middle of this Name.  # noqa: E501


        :return: The middle of this Name.  # noqa: E501
        :rtype: str
        """
        return self._middle

    @middle.setter
    def middle(self, middle):
        """Sets the middle of this Name.


        :param middle: The middle of this Name.  # noqa: E501
        :type: str
        """

        self._middle = middle

    @property
    def last(self):
        """Gets the last of this Name.  # noqa: E501


        :return: The last of this Name.  # noqa: E501
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this Name.


        :param last: The last of this Name.  # noqa: E501
        :type: str
        """

        self._last = last

    @property
    def full_name(self):
        """Gets the full_name of this Name.  # noqa: E501


        :return: The full_name of this Name.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Name.


        :param full_name: The full_name of this Name.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def first(self):
        """Gets the first of this Name.  # noqa: E501


        :return: The first of this Name.  # noqa: E501
        :rtype: str
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this Name.


        :param first: The first of this Name.  # noqa: E501
        :type: str
        """

        self._first = first

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Name, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Name):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
