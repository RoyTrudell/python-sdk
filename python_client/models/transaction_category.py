# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.detail_category import DetailCategory  # noqa: F401,E501


class TransactionCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'high_level_category_name': 'str',
        'high_level_category_id': 'int',
        'detail_category': 'list[DetailCategory]',
        'id': 'int',
        'source': 'str',
        'category': 'str',
        'classification': 'str',
        'type': 'str'
    }

    attribute_map = {
        'high_level_category_name': 'highLevelCategoryName',
        'high_level_category_id': 'highLevelCategoryId',
        'detail_category': 'detailCategory',
        'id': 'id',
        'source': 'source',
        'category': 'category',
        'classification': 'classification',
        'type': 'type'
    }

    def __init__(self, high_level_category_name=None, high_level_category_id=None, detail_category=None, id=None, source=None, category=None, classification=None, type=None):  # noqa: E501
        """TransactionCategory - a model defined in Swagger"""  # noqa: E501

        self._high_level_category_name = None
        self._high_level_category_id = None
        self._detail_category = None
        self._id = None
        self._source = None
        self._category = None
        self._classification = None
        self._type = None
        self.discriminator = None

        if high_level_category_name is not None:
            self.high_level_category_name = high_level_category_name
        if high_level_category_id is not None:
            self.high_level_category_id = high_level_category_id
        if detail_category is not None:
            self.detail_category = detail_category
        if id is not None:
            self.id = id
        if source is not None:
            self.source = source
        if category is not None:
            self.category = category
        if classification is not None:
            self.classification = classification
        if type is not None:
            self.type = type

    @property
    def high_level_category_name(self):
        """Gets the high_level_category_name of this TransactionCategory.  # noqa: E501

        The name of the high level category. A group of similar transaction categories are clubbed together to form a high-level category.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The high_level_category_name of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._high_level_category_name

    @high_level_category_name.setter
    def high_level_category_name(self, high_level_category_name):
        """Sets the high_level_category_name of this TransactionCategory.

        The name of the high level category. A group of similar transaction categories are clubbed together to form a high-level category.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :param high_level_category_name: The high_level_category_name of this TransactionCategory.  # noqa: E501
        :type: str
        """

        self._high_level_category_name = high_level_category_name

    @property
    def high_level_category_id(self):
        """Gets the high_level_category_id of this TransactionCategory.  # noqa: E501

        The unique identifier of the high level category.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The high_level_category_id of this TransactionCategory.  # noqa: E501
        :rtype: int
        """
        return self._high_level_category_id

    @high_level_category_id.setter
    def high_level_category_id(self, high_level_category_id):
        """Sets the high_level_category_id of this TransactionCategory.

        The unique identifier of the high level category.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :param high_level_category_id: The high_level_category_id of this TransactionCategory.  # noqa: E501
        :type: int
        """

        self._high_level_category_id = high_level_category_id

    @property
    def detail_category(self):
        """Gets the detail_category of this TransactionCategory.  # noqa: E501

        Entity that provides detail category attributes<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The detail_category of this TransactionCategory.  # noqa: E501
        :rtype: list[DetailCategory]
        """
        return self._detail_category

    @detail_category.setter
    def detail_category(self, detail_category):
        """Sets the detail_category of this TransactionCategory.

        Entity that provides detail category attributes<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :param detail_category: The detail_category of this TransactionCategory.  # noqa: E501
        :type: list[DetailCategory]
        """

        self._detail_category = detail_category

    @property
    def id(self):
        """Gets the id of this TransactionCategory.  # noqa: E501

        Unique identifier of the category.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The id of this TransactionCategory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionCategory.

        Unique identifier of the category.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :param id: The id of this TransactionCategory.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def source(self):
        """Gets the source of this TransactionCategory.  # noqa: E501

        Source used to identify whether the transaction category is user defined category or system created category.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The source of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TransactionCategory.

        Source used to identify whether the transaction category is user defined category or system created category.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param source: The source of this TransactionCategory.  # noqa: E501
        :type: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def category(self):
        """Gets the category of this TransactionCategory.  # noqa: E501

        The name of the category.<br><b>Note</b>: Transaction categorization is one of the core features offered by Yodlee and the categories are assigned to the transactions by the system. Transactions can be clubbed together by the category that is assigned to them.  <br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The category of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TransactionCategory.

        The name of the category.<br><b>Note</b>: Transaction categorization is one of the core features offered by Yodlee and the categories are assigned to the transactions by the system. Transactions can be clubbed together by the category that is assigned to them.  <br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :param category: The category of this TransactionCategory.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def classification(self):
        """Gets the classification of this TransactionCategory.  # noqa: E501

        Category Classification.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The classification of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this TransactionCategory.

        Category Classification.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param classification: The classification of this TransactionCategory.  # noqa: E501
        :type: str
        """
        allowed_values = ["PERSONAL", "BUSINESS"]  # noqa: E501
        if classification not in allowed_values:
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"  # noqa: E501
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def type(self):
        """Gets the type of this TransactionCategory.  # noqa: E501

        Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. <br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The type of this TransactionCategory.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionCategory.

        Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. <br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param type: The type of this TransactionCategory.  # noqa: E501
        :type: str
        """
        allowed_values = ["TRANSFER", "DEFERRED_COMPENSATION", "UNCATEGORIZE", "INCOME", "EXPENSE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
