# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CobrandPublicKeyResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_alias': 'str',
        'key_as_pem_string': 'str'
    }

    attribute_map = {
        'key_alias': 'keyAlias',
        'key_as_pem_string': 'keyAsPemString'
    }

    def __init__(self, key_alias=None, key_as_pem_string=None):  # noqa: E501
        """CobrandPublicKeyResponse - a model defined in Swagger"""  # noqa: E501

        self._key_alias = None
        self._key_as_pem_string = None
        self.discriminator = None

        if key_alias is not None:
            self.key_alias = key_alias
        if key_as_pem_string is not None:
            self.key_as_pem_string = key_as_pem_string

    @property
    def key_alias(self):
        """Gets the key_alias of this CobrandPublicKeyResponse.  # noqa: E501

        The key name used for encryption.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/publicKey</li></ul>  # noqa: E501

        :return: The key_alias of this CobrandPublicKeyResponse.  # noqa: E501
        :rtype: str
        """
        return self._key_alias

    @key_alias.setter
    def key_alias(self, key_alias):
        """Sets the key_alias of this CobrandPublicKeyResponse.

        The key name used for encryption.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/publicKey</li></ul>  # noqa: E501

        :param key_alias: The key_alias of this CobrandPublicKeyResponse.  # noqa: E501
        :type: str
        """

        self._key_alias = key_alias

    @property
    def key_as_pem_string(self):
        """Gets the key_as_pem_string of this CobrandPublicKeyResponse.  # noqa: E501

        Public key that the customer should be using to encrypt the credentials and answers before sending to the add & update providerAccounts APIs.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/publicKey</li></ul>  # noqa: E501

        :return: The key_as_pem_string of this CobrandPublicKeyResponse.  # noqa: E501
        :rtype: str
        """
        return self._key_as_pem_string

    @key_as_pem_string.setter
    def key_as_pem_string(self, key_as_pem_string):
        """Sets the key_as_pem_string of this CobrandPublicKeyResponse.

        Public key that the customer should be using to encrypt the credentials and answers before sending to the add & update providerAccounts APIs.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/publicKey</li></ul>  # noqa: E501

        :param key_as_pem_string: The key_as_pem_string of this CobrandPublicKeyResponse.  # noqa: E501
        :type: str
        """

        self._key_as_pem_string = key_as_pem_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CobrandPublicKeyResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CobrandPublicKeyResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
