# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.data_extracts_account import DataExtractsAccount  # noqa: F401,E501
from python_client.models.data_extracts_holding import DataExtractsHolding  # noqa: F401,E501
from python_client.models.data_extracts_provider_account import DataExtractsProviderAccount  # noqa: F401,E501
from python_client.models.data_extracts_transaction import DataExtractsTransaction  # noqa: F401,E501
from python_client.models.data_extracts_user import DataExtractsUser  # noqa: F401,E501


class DataExtractsUserData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'holding': 'list[DataExtractsHolding]',
        'user': 'DataExtractsUser',
        'account': 'list[DataExtractsAccount]',
        'transaction': 'list[DataExtractsTransaction]',
        'provider_account': 'list[DataExtractsProviderAccount]'
    }

    attribute_map = {
        'holding': 'holding',
        'user': 'user',
        'account': 'account',
        'transaction': 'transaction',
        'provider_account': 'providerAccount'
    }

    def __init__(self, holding=None, user=None, account=None, transaction=None, provider_account=None):  # noqa: E501
        """DataExtractsUserData - a model defined in Swagger"""  # noqa: E501

        self._holding = None
        self._user = None
        self._account = None
        self._transaction = None
        self._provider_account = None
        self.discriminator = None

        if holding is not None:
            self.holding = holding
        if user is not None:
            self.user = user
        if account is not None:
            self.account = account
        if transaction is not None:
            self.transaction = transaction
        if provider_account is not None:
            self.provider_account = provider_account

    @property
    def holding(self):
        """Gets the holding of this DataExtractsUserData.  # noqa: E501


        :return: The holding of this DataExtractsUserData.  # noqa: E501
        :rtype: list[DataExtractsHolding]
        """
        return self._holding

    @holding.setter
    def holding(self, holding):
        """Sets the holding of this DataExtractsUserData.


        :param holding: The holding of this DataExtractsUserData.  # noqa: E501
        :type: list[DataExtractsHolding]
        """

        self._holding = holding

    @property
    def user(self):
        """Gets the user of this DataExtractsUserData.  # noqa: E501


        :return: The user of this DataExtractsUserData.  # noqa: E501
        :rtype: DataExtractsUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DataExtractsUserData.


        :param user: The user of this DataExtractsUserData.  # noqa: E501
        :type: DataExtractsUser
        """

        self._user = user

    @property
    def account(self):
        """Gets the account of this DataExtractsUserData.  # noqa: E501


        :return: The account of this DataExtractsUserData.  # noqa: E501
        :rtype: list[DataExtractsAccount]
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this DataExtractsUserData.


        :param account: The account of this DataExtractsUserData.  # noqa: E501
        :type: list[DataExtractsAccount]
        """

        self._account = account

    @property
    def transaction(self):
        """Gets the transaction of this DataExtractsUserData.  # noqa: E501


        :return: The transaction of this DataExtractsUserData.  # noqa: E501
        :rtype: list[DataExtractsTransaction]
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this DataExtractsUserData.


        :param transaction: The transaction of this DataExtractsUserData.  # noqa: E501
        :type: list[DataExtractsTransaction]
        """

        self._transaction = transaction

    @property
    def provider_account(self):
        """Gets the provider_account of this DataExtractsUserData.  # noqa: E501


        :return: The provider_account of this DataExtractsUserData.  # noqa: E501
        :rtype: list[DataExtractsProviderAccount]
        """
        return self._provider_account

    @provider_account.setter
    def provider_account(self, provider_account):
        """Sets the provider_account of this DataExtractsUserData.


        :param provider_account: The provider_account of this DataExtractsUserData.  # noqa: E501
        :type: list[DataExtractsProviderAccount]
        """

        self._provider_account = provider_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataExtractsUserData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataExtractsUserData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
