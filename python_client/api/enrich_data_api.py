# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_client.api_client import ApiClient


class EnrichDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def push_user_data(self, **kwargs):  # noqa: E501
        """Push UserData  # noqa: E501

        <b>Push User Data </b><br>The data enrich API v1.1 allows customers to get the transactions enriched in real-time by feeding the data into the Yodlee Platform. To get the transactions enriched, it is necessary that users, accounts, and transactions are updated to the Yodlee Platform.<br>The following features are supported through the data enrich API:<ul><li>Add user</li><li>Add account</li><li>Update account</li><li>Add transactions</li><li>Update transactions</li></ul>Yodlee will enrich the transactions with the following information:<ul><li>Category</li><li>High Level Category</li><li>Detail Category</li><li>Simple description</li><li>Merchant details<ul><li>Name</li><li>Address</li></ul></li><li>Transaction type</li><li>Transaction subtype</li></ul>The data feed through the enrich APIs will be updated to the Yodlee Platform in real time. The updated accounts and transactions information can then be retrieved from the system using the respective Yodlee 1.1 APIs.<br><b> Implementation Notes </b><ul><li>Supported only through credential-based authentication mechanisms.</li><li>Customer must be TLS 1.2 compliant to integrate with the data enrich API.</li><li>Supported account types are savings, checking, and credit.</li><li>A maximum of 128 transactions can be passed to the API.</li><li>As the data enrich API is a premium offering and is priced per API call, Yodlee recommends not to call the API to update accounts and transactions.</li><li>The minimum required parameters to create account and transaction is accepted. The Yodlee data model supports more parameters than what is accepted in this API. Customers can make the rest of the parameters available during the auto-refresh process of the accounts.</li><li>Though few input parameters are optional, Yodlee recommends passing them as the account information will make complete sense to the consumers when it is displayed in the Yodlee applications or widgets.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.push_user_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnrichDataRequest user_data: Input for User Data
        :return: EnrichedTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.push_user_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.push_user_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def push_user_data_with_http_info(self, **kwargs):  # noqa: E501
        """Push UserData  # noqa: E501

        <b>Push User Data </b><br>The data enrich API v1.1 allows customers to get the transactions enriched in real-time by feeding the data into the Yodlee Platform. To get the transactions enriched, it is necessary that users, accounts, and transactions are updated to the Yodlee Platform.<br>The following features are supported through the data enrich API:<ul><li>Add user</li><li>Add account</li><li>Update account</li><li>Add transactions</li><li>Update transactions</li></ul>Yodlee will enrich the transactions with the following information:<ul><li>Category</li><li>High Level Category</li><li>Detail Category</li><li>Simple description</li><li>Merchant details<ul><li>Name</li><li>Address</li></ul></li><li>Transaction type</li><li>Transaction subtype</li></ul>The data feed through the enrich APIs will be updated to the Yodlee Platform in real time. The updated accounts and transactions information can then be retrieved from the system using the respective Yodlee 1.1 APIs.<br><b> Implementation Notes </b><ul><li>Supported only through credential-based authentication mechanisms.</li><li>Customer must be TLS 1.2 compliant to integrate with the data enrich API.</li><li>Supported account types are savings, checking, and credit.</li><li>A maximum of 128 transactions can be passed to the API.</li><li>As the data enrich API is a premium offering and is priced per API call, Yodlee recommends not to call the API to update accounts and transactions.</li><li>The minimum required parameters to create account and transaction is accepted. The Yodlee data model supports more parameters than what is accepted in this API. Customers can make the rest of the parameters available during the auto-refresh process of the accounts.</li><li>Though few input parameters are optional, Yodlee recommends passing them as the account information will make complete sense to the consumers when it is displayed in the Yodlee applications or widgets.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.push_user_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EnrichDataRequest user_data: Input for User Data
        :return: EnrichedTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method push_user_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_data' in params:
            body_params = params['user_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/enrichData/userData', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrichedTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
