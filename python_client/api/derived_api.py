# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_client.api_client import ApiClient


class DerivedApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_holding_summary(self, **kwargs):  # noqa: E501
        """Get Holding Summary  # noqa: E501

        The get holding summary service is used to get the summary of asset classifications for the user.<br>By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.<br>If the include parameter value is passed as details then a summary with holdings and account information is returned.<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_holding_summary(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_ids: Comma separated accountIds
        :param str classification_type: e.g. Country, Sector, etc.
        :param str include: details
        :return: DerivedHoldingSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_holding_summary_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_holding_summary_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_holding_summary_with_http_info(self, **kwargs):  # noqa: E501
        """Get Holding Summary  # noqa: E501

        The get holding summary service is used to get the summary of asset classifications for the user.<br>By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.<br>If the include parameter value is passed as details then a summary with holdings and account information is returned.<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_holding_summary_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_ids: Comma separated accountIds
        :param str classification_type: e.g. Country, Sector, etc.
        :param str include: details
        :return: DerivedHoldingSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_ids', 'classification_type', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_holding_summary" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_ids' in params:
            query_params.append(('accountIds', params['account_ids']))  # noqa: E501
        if 'classification_type' in params:
            query_params.append(('classificationType', params['classification_type']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/derived/holdingSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DerivedHoldingSummaryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_networth(self, **kwargs):  # noqa: E501
        """Get Networth Summary  # noqa: E501

        The get networth service is used to get the networth for the user.<br>If the include parameter value is passed as details then networth with historical balances is returned. <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_networth(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_ids: comma separated accountIds
        :param str container: bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities
        :param str from_date: from date for balance retrieval (YYYY-MM-DD)
        :param str include: details
        :param str interval: D-daily, W-weekly or M-monthly
        :param int skip: skip (Min 0)
        :param str to_date: toDate for balance retrieval (YYYY-MM-DD)
        :param int top: top (Max 500)
        :return: DerivedNetworthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_networth_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_networth_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_networth_with_http_info(self, **kwargs):  # noqa: E501
        """Get Networth Summary  # noqa: E501

        The get networth service is used to get the networth for the user.<br>If the include parameter value is passed as details then networth with historical balances is returned. <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_networth_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_ids: comma separated accountIds
        :param str container: bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities
        :param str from_date: from date for balance retrieval (YYYY-MM-DD)
        :param str include: details
        :param str interval: D-daily, W-weekly or M-monthly
        :param int skip: skip (Min 0)
        :param str to_date: toDate for balance retrieval (YYYY-MM-DD)
        :param int top: top (Max 500)
        :return: DerivedNetworthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_ids', 'container', 'from_date', 'include', 'interval', 'skip', 'to_date', 'top']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_networth" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_ids' in params:
            query_params.append(('accountIds', params['account_ids']))  # noqa: E501
        if 'container' in params:
            query_params.append(('container', params['container']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'top' in params:
            query_params.append(('top', params['top']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/derived/networth', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DerivedNetworthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_summary(self, group_by, **kwargs):  # noqa: E501
        """Get Transaction Summary  # noqa: E501

        The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.<br><br>Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user's data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.<br><br><b>Notes:</b><br>1.Details can be requested for only one system-defined category<br>2.Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE<br>3.Dates will not be respected for monthly, yearly, and weekly details<br>4.When monthly details are requested, only the fromDate and toDate month will be respected<br>5.When yearly details are requested, only the fromDate and toDate year will be respected<br>6.For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate<br>7.This service supports the localization feature and accepts locale as a header parameter<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_summary(group_by, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_by: CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY (required)
        :param str account_id: comma separated account Ids
        :param str category_id: comma separated categoryIds
        :param str category_type: INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION
        :param str from_date: YYYY-MM-DD format
        :param str include: details
        :param bool include_user_category: TRUE/FALSE
        :param str interval: D-daily, W-weekly, M-mothly or Y-yearly
        :param str to_date: YYYY-MM-DD format
        :return: DerivedTransactionSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transaction_summary_with_http_info(group_by, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_summary_with_http_info(group_by, **kwargs)  # noqa: E501
            return data

    def get_transaction_summary_with_http_info(self, group_by, **kwargs):  # noqa: E501
        """Get Transaction Summary  # noqa: E501

        The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.<br><br>Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user's data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.<br><br><b>Notes:</b><br>1.Details can be requested for only one system-defined category<br>2.Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE<br>3.Dates will not be respected for monthly, yearly, and weekly details<br>4.When monthly details are requested, only the fromDate and toDate month will be respected<br>5.When yearly details are requested, only the fromDate and toDate year will be respected<br>6.For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate<br>7.This service supports the localization feature and accepts locale as a header parameter<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transaction_summary_with_http_info(group_by, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_by: CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY (required)
        :param str account_id: comma separated account Ids
        :param str category_id: comma separated categoryIds
        :param str category_type: INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION
        :param str from_date: YYYY-MM-DD format
        :param str include: details
        :param bool include_user_category: TRUE/FALSE
        :param str interval: D-daily, W-weekly, M-mothly or Y-yearly
        :param str to_date: YYYY-MM-DD format
        :return: DerivedTransactionSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_by', 'account_id', 'category_id', 'category_type', 'from_date', 'include', 'include_user_category', 'interval', 'to_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_by' is set
        if ('group_by' not in params or
                params['group_by'] is None):
            raise ValueError("Missing the required parameter `group_by` when calling `get_transaction_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'category_id' in params:
            query_params.append(('categoryId', params['category_id']))  # noqa: E501
        if 'category_type' in params:
            query_params.append(('categoryType', params['category_type']))  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'group_by' in params:
            query_params.append(('groupBy', params['group_by']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
        if 'include_user_category' in params:
            query_params.append(('includeUserCategory', params['include_user_category']))  # noqa: E501
        if 'interval' in params:
            query_params.append(('interval', params['interval']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/derived/transactionSummary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DerivedTransactionSummaryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
