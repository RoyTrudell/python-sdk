# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_client.api_client import ApiClient


class ConfigsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_subscription_notification_event(self, event_name, event_request, **kwargs):  # noqa: E501
        """Subscribe For Notification Event  # noqa: E501

        The subscribe events service is used to subscribe to an event for receiving notifications.<br>The callback URL, where the notification will be posted should be provided to this service.<br>If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.<br>Customers can subscribe to REFRESH,DATA_UPDATES and AUTO_REFRESH_UPDATES event.<br><br><b>Notes</b>:<br>This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.<br>The content type has to be passed as application/json for the body parameter.<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subscription_notification_event(event_name, event_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_name: eventName (required)
        :param CreateConfigsNotificationEventRequest event_request: eventRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_subscription_notification_event_with_http_info(event_name, event_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subscription_notification_event_with_http_info(event_name, event_request, **kwargs)  # noqa: E501
            return data

    def create_subscription_notification_event_with_http_info(self, event_name, event_request, **kwargs):  # noqa: E501
        """Subscribe For Notification Event  # noqa: E501

        The subscribe events service is used to subscribe to an event for receiving notifications.<br>The callback URL, where the notification will be posted should be provided to this service.<br>If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.<br>Customers can subscribe to REFRESH,DATA_UPDATES and AUTO_REFRESH_UPDATES event.<br><br><b>Notes</b>:<br>This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.<br>The content type has to be passed as application/json for the body parameter.<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subscription_notification_event_with_http_info(event_name, event_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_name: eventName (required)
        :param CreateConfigsNotificationEventRequest event_request: eventRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name', 'event_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subscription_notification_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `create_subscription_notification_event`")  # noqa: E501
        # verify the required parameter 'event_request' is set
        if ('event_request' not in params or
                params['event_request'] is None):
            raise ValueError("Missing the required parameter `event_request` when calling `create_subscription_notification_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['eventName'] = params['event_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event_request' in params:
            body_params = params['event_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/configs/notifications/events/{eventName}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_subscribed_notification_event(self, event_name, **kwargs):  # noqa: E501
        """Delete Notification Subscription  # noqa: E501

        The delete events service is used to unsubscribe from an events service.<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subscribed_notification_event(event_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_name: eventName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_subscribed_notification_event_with_http_info(event_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_subscribed_notification_event_with_http_info(event_name, **kwargs)  # noqa: E501
            return data

    def delete_subscribed_notification_event_with_http_info(self, event_name, **kwargs):  # noqa: E501
        """Delete Notification Subscription  # noqa: E501

        The delete events service is used to unsubscribe from an events service.<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_subscribed_notification_event_with_http_info(event_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_name: eventName (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_subscribed_notification_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `delete_subscribed_notification_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['eventName'] = params['event_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/configs/notifications/events/{eventName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_encryption_key(self, **kwargs):  # noqa: E501
        """Get Public Key  # noqa: E501

        The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.<br>This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.<br><b>Note:</b> The key in the response is a string in PEM format. <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_encryption_key(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConfigsPublicKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_encryption_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_public_encryption_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_public_encryption_key_with_http_info(self, **kwargs):  # noqa: E501
        """Get Public Key  # noqa: E501

        The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.<br>This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.<br><b>Note:</b> The key in the response is a string in PEM format. <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_encryption_key_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ConfigsPublicKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_encryption_key" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/configs/publicKey', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigsPublicKeyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subscribed_notification_events(self, **kwargs):  # noqa: E501
        """Get Subscribed Notification Events  # noqa: E501

        The get events service provides the list of events for which consumers subscribed <br>to receive notifications. <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscribed_notification_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_name: eventName
        :return: ConfigsNotificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_subscribed_notification_events_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_subscribed_notification_events_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_subscribed_notification_events_with_http_info(self, **kwargs):  # noqa: E501
        """Get Subscribed Notification Events  # noqa: E501

        The get events service provides the list of events for which consumers subscribed <br>to receive notifications. <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subscribed_notification_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_name: eventName
        :return: ConfigsNotificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subscribed_notification_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'event_name' in params:
            query_params.append(('eventName', params['event_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/configs/notifications/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConfigsNotificationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_subscribed_notification_event(self, event_name, event_request, **kwargs):  # noqa: E501
        """Update Notification Subscription  # noqa: E501

        The update events service is used to update the callback URL.<br>If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.<br><b>Note:</b> The content type has to be passed as application/json for the body parameter. <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_subscribed_notification_event(event_name, event_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_name: eventName (required)
        :param UpdateConfigsNotificationEventRequest event_request: eventRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_subscribed_notification_event_with_http_info(event_name, event_request, **kwargs)  # noqa: E501
        else:
            (data) = self.update_subscribed_notification_event_with_http_info(event_name, event_request, **kwargs)  # noqa: E501
            return data

    def update_subscribed_notification_event_with_http_info(self, event_name, event_request, **kwargs):  # noqa: E501
        """Update Notification Subscription  # noqa: E501

        The update events service is used to update the callback URL.<br>If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.<br><b>Note:</b> The content type has to be passed as application/json for the body parameter. <br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_subscribed_notification_event_with_http_info(event_name, event_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_name: eventName (required)
        :param UpdateConfigsNotificationEventRequest event_request: eventRequest (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_name', 'event_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_subscribed_notification_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_name' is set
        if ('event_name' not in params or
                params['event_name'] is None):
            raise ValueError("Missing the required parameter `event_name` when calling `update_subscribed_notification_event`")  # noqa: E501
        # verify the required parameter 'event_request' is set
        if ('event_request' not in params or
                params['event_request'] is None):
            raise ValueError("Missing the required parameter `event_request` when calling `update_subscribed_notification_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_name' in params:
            path_params['eventName'] = params['event_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'event_request' in params:
            body_params = params['event_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/configs/notifications/events/{eventName}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
