# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_client.api_client import ApiClient


class AuthApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_api_key(self, key, **kwargs):  # noqa: E501
        """Delete API Key  # noqa: E501

        This endpoint allows an existing API key to be deleted.<br>You can use one of the following authorization methods to access this API:<br><ol><li>cobsession</li><li>JWT token</li></ol><b>Notes:</b><br>This service is not available in developer sandbox environment and will be made available<br>for testing in your dedicated environment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_api_key(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_api_key_with_http_info(key, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_api_key_with_http_info(key, **kwargs)  # noqa: E501
            return data

    def delete_api_key_with_http_info(self, key, **kwargs):  # noqa: E501
        """Delete API Key  # noqa: E501

        This endpoint allows an existing API key to be deleted.<br>You can use one of the following authorization methods to access this API:<br><ol><li>cobsession</li><li>JWT token</li></ol><b>Notes:</b><br>This service is not available in developer sandbox environment and will be made available<br>for testing in your dedicated environment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_api_key_with_http_info(key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key: key (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_api_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'key' in params:
            path_params['key'] = params['key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/apiKey/{key}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_token(self, **kwargs):  # noqa: E501
        """Delete Token  # noqa: E501

        This endpoint revokes the token passed in the Authorization header. This service is applicable for <br/>JWT-based (and all API key-based) authentication and also client credential (clientId and secret) <br/>based authentication. This service does not return a response body. The HTTP response code is 204 <br/>(success with no content). Tokens generally have limited lifetime of up to 30 minutes. You will <br/>call this service when you finish working with one user, and you want to delete the valid token <br/>rather than simply letting it expire.<br/><br/>Note: Revoking an access token (either type, admin or a user token) can take up to 2 minutes, <br/>as the tokens are stored on a distributed system.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_token_with_http_info(self, **kwargs):  # noqa: E501
        """Delete Token  # noqa: E501

        This endpoint revokes the token passed in the Authorization header. This service is applicable for <br/>JWT-based (and all API key-based) authentication and also client credential (clientId and secret) <br/>based authentication. This service does not return a response body. The HTTP response code is 204 <br/>(success with no content). Tokens generally have limited lifetime of up to 30 minutes. You will <br/>call this service when you finish working with one user, and you want to delete the valid token <br/>rather than simply letting it expire.<br/><br/>Note: Revoking an access token (either type, admin or a user token) can take up to 2 minutes, <br/>as the tokens are stored on a distributed system.<br/>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/token', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_access_token(self, **kwargs):  # noqa: E501
        """Generate Access Token  # noqa: E501

        <b>Generate Access Token using client credential authentication.</b><br/><br><br>This service returns access tokens required to access Yodlee 1.1 APIs. These tokens are the <br/>simplest and easiest of several alternatives for authenticating with Yodlee servers.<br/><br><br>The most commonly used services obtain data specific to an end user (your customer). <br/>For these services, you need a <b>user access token</b>. These are simply tokens created with <br/>the user name parameter (<b>loginName</b>) set to the id of your end user.  Note: you determine <br/>this id and you must ensure it's unique among all your customers.<br/><br><br>Each token issued has an associated user. The token passed in the http headers explicitly <br/>names the user referenced in that API call.<br/><br><br>Some of the APIs do administrative work, and don't reference an end user. <br/>One example of administrative work is key management. Another example is <br/>registering a new user explicitly, with <b>POST /user/register</b> call <br/>or subscribe to webhook, with <b>POST /config/notifications/events/{eventName}</b>. <br/>To invoke these, you need an <b>admin access token</b>. Create this by passing in <br/>your admin user login name in place of a regular user name.<br/><br><br>This service also allows for simplified registration of new users. Any time you pass in a user <br/>name not already in use, the system will automatically implicitly create a new user for you. <br/>This user will have naturally have very few associated details. You can later provide additional <br/>user information by calling the <b>PUT user/register service</b>.<br/><br><br><b>Notes:</b><br/>The content type has to be passed as application/x-www-form-urlencoded.<br/>//Upgrading to client credential authentication requires infrastructure reconfiguration. <br/>Customers wishing to switch from another authentication scheme to client credential authentication, <br/>please contact Yodlee Client Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_access_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ClientCredentialTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_access_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.generate_access_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def generate_access_token_with_http_info(self, **kwargs):  # noqa: E501
        """Generate Access Token  # noqa: E501

        <b>Generate Access Token using client credential authentication.</b><br/><br><br>This service returns access tokens required to access Yodlee 1.1 APIs. These tokens are the <br/>simplest and easiest of several alternatives for authenticating with Yodlee servers.<br/><br><br>The most commonly used services obtain data specific to an end user (your customer). <br/>For these services, you need a <b>user access token</b>. These are simply tokens created with <br/>the user name parameter (<b>loginName</b>) set to the id of your end user.  Note: you determine <br/>this id and you must ensure it's unique among all your customers.<br/><br><br>Each token issued has an associated user. The token passed in the http headers explicitly <br/>names the user referenced in that API call.<br/><br><br>Some of the APIs do administrative work, and don't reference an end user. <br/>One example of administrative work is key management. Another example is <br/>registering a new user explicitly, with <b>POST /user/register</b> call <br/>or subscribe to webhook, with <b>POST /config/notifications/events/{eventName}</b>. <br/>To invoke these, you need an <b>admin access token</b>. Create this by passing in <br/>your admin user login name in place of a regular user name.<br/><br><br>This service also allows for simplified registration of new users. Any time you pass in a user <br/>name not already in use, the system will automatically implicitly create a new user for you. <br/>This user will have naturally have very few associated details. You can later provide additional <br/>user information by calling the <b>PUT user/register service</b>.<br/><br><br><b>Notes:</b><br/>The content type has to be passed as application/x-www-form-urlencoded.<br/>//Upgrading to client credential authentication requires infrastructure reconfiguration. <br/>Customers wishing to switch from another authentication scheme to client credential authentication, <br/>please contact Yodlee Client Services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_access_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ClientCredentialTokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_access_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientCredentialTokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_api_key(self, api_key_request, **kwargs):  # noqa: E501
        """Generate API Key  # noqa: E501

        This endpoint is used to generate an API key. The RSA public key you provide should be in<br/>2048 bit PKCS#8 encoded format. A public key is a mandatory input for generating the API key.<br/>The public key should be a unique key. The apiKeyId you get in the response is what you should<br/>use to generate the JWT token.<br> You can use one of the following authorization methods to access<br/>this API:<br/><ol><li>cobsession</li><li>JWT token</li></ol>Alternatively, you can use base 64 encoded cobrandLogin and cobrandPassword in the Authorization header (Format: Authorization: Basic <encoded value of cobrandLogin: cobrandPassword>)<br><b>Note:</b><br>This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. The content type has to be passed as application/json for the body parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_api_key(api_key_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiKeyRequest api_key_request: apiKeyRequest (required)
        :return: ApiKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_api_key_with_http_info(api_key_request, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_api_key_with_http_info(api_key_request, **kwargs)  # noqa: E501
            return data

    def generate_api_key_with_http_info(self, api_key_request, **kwargs):  # noqa: E501
        """Generate API Key  # noqa: E501

        This endpoint is used to generate an API key. The RSA public key you provide should be in<br/>2048 bit PKCS#8 encoded format. A public key is a mandatory input for generating the API key.<br/>The public key should be a unique key. The apiKeyId you get in the response is what you should<br/>use to generate the JWT token.<br> You can use one of the following authorization methods to access<br/>this API:<br/><ol><li>cobsession</li><li>JWT token</li></ol>Alternatively, you can use base 64 encoded cobrandLogin and cobrandPassword in the Authorization header (Format: Authorization: Basic <encoded value of cobrandLogin: cobrandPassword>)<br><b>Note:</b><br>This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. The content type has to be passed as application/json for the body parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_api_key_with_http_info(api_key_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiKeyRequest api_key_request: apiKeyRequest (required)
        :return: ApiKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_api_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_key_request' is set
        if ('api_key_request' not in params or
                params['api_key_request'] is None):
            raise ValueError("Missing the required parameter `api_key_request` when calling `generate_api_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'api_key_request' in params:
            body_params = params['api_key_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/apiKey', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiKeyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_keys(self, **kwargs):  # noqa: E501
        """Get API Keys  # noqa: E501

        This endpoint provides the list of API keys that exist for a customer.<br>You can use one of the following authorization methods to access this API:<br><ol><li>cobsession</li><li>JWT token</li></ol><b>Notes:</b><br>This service is not available in developer sandbox environment and will be made available<br>for testing in your dedicated environment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_keys(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_keys_with_http_info(self, **kwargs):  # noqa: E501
        """Get API Keys  # noqa: E501

        This endpoint provides the list of API keys that exist for a customer.<br>You can use one of the following authorization methods to access this API:<br><ol><li>cobsession</li><li>JWT token</li></ol><b>Notes:</b><br>This service is not available in developer sandbox environment and will be made available<br>for testing in your dedicated environment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_keys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ApiKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/auth/apiKey', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiKeyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
