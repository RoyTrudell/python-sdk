# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_client.api_client import ApiClient


class VerifyAccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def initiate_account_verification(self, provider_account_id, verification_param, **kwargs):  # noqa: E501
        """Verify Accounts Using Transactions  # noqa: E501

        The verify account service is used to verify the account's ownership by  matching the transaction details with the accounts aggregated for the user.<br>&bull; If a match is identified, the service returns details of all the accounts along with the matched transaction's details.<br>&bull; If no transaction match is found, an empty response will be returned.<br>&bull; A maximum of 5 transactionCriteria can be passed in a request.<br>&bull; The baseType, date, and amount parameters should mandatorily be passed.<br>&bull; The optional dateVariance parameter cannot be more than 7 days. For example, +7, -4, or +/-2.<br>&bull; Pass the container or accountId parameters for better performance.<br>&bull; This service supports the localization feature and accepts locale as a header parameter.<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_account_verification(provider_account_id, verification_param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_account_id: providerAccountId (required)
        :param VerifyAccountRequest verification_param: verificationParam (required)
        :return: VerifyAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.initiate_account_verification_with_http_info(provider_account_id, verification_param, **kwargs)  # noqa: E501
        else:
            (data) = self.initiate_account_verification_with_http_info(provider_account_id, verification_param, **kwargs)  # noqa: E501
            return data

    def initiate_account_verification_with_http_info(self, provider_account_id, verification_param, **kwargs):  # noqa: E501
        """Verify Accounts Using Transactions  # noqa: E501

        The verify account service is used to verify the account's ownership by  matching the transaction details with the accounts aggregated for the user.<br>&bull; If a match is identified, the service returns details of all the accounts along with the matched transaction's details.<br>&bull; If no transaction match is found, an empty response will be returned.<br>&bull; A maximum of 5 transactionCriteria can be passed in a request.<br>&bull; The baseType, date, and amount parameters should mandatorily be passed.<br>&bull; The optional dateVariance parameter cannot be more than 7 days. For example, +7, -4, or +/-2.<br>&bull; Pass the container or accountId parameters for better performance.<br>&bull; This service supports the localization feature and accepts locale as a header parameter.<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initiate_account_verification_with_http_info(provider_account_id, verification_param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str provider_account_id: providerAccountId (required)
        :param VerifyAccountRequest verification_param: verificationParam (required)
        :return: VerifyAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider_account_id', 'verification_param']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initiate_account_verification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider_account_id' is set
        if ('provider_account_id' not in params or
                params['provider_account_id'] is None):
            raise ValueError("Missing the required parameter `provider_account_id` when calling `initiate_account_verification`")  # noqa: E501
        # verify the required parameter 'verification_param' is set
        if ('verification_param' not in params or
                params['verification_param'] is None):
            raise ValueError("Missing the required parameter `verification_param` when calling `initiate_account_verification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider_account_id' in params:
            path_params['providerAccountId'] = params['provider_account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'verification_param' in params:
            body_params = params['verification_param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/verifyAccount/{providerAccountId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VerifyAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
