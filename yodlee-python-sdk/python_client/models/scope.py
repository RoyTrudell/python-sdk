# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Scope(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title_body': 'list[str]',
        'scope_id': 'str',
        'dataset_attributes': 'list[str]',
        'title': 'str'
    }

    attribute_map = {
        'title_body': 'titleBody',
        'scope_id': 'scopeId',
        'dataset_attributes': 'datasetAttributes',
        'title': 'title'
    }

    def __init__(self, title_body=None, scope_id=None, dataset_attributes=None, title=None):  # noqa: E501
        """Scope - a model defined in Swagger"""  # noqa: E501

        self._title_body = None
        self._scope_id = None
        self._dataset_attributes = None
        self._title = None
        self.discriminator = None

        self.title_body = title_body
        self.scope_id = scope_id
        if dataset_attributes is not None:
            self.dataset_attributes = dataset_attributes
        self.title = title

    @property
    def title_body(self):
        """Gets the title_body of this Scope.  # noqa: E501

        Title body that explains the purpose of the scope.  # noqa: E501

        :return: The title_body of this Scope.  # noqa: E501
        :rtype: list[str]
        """
        return self._title_body

    @title_body.setter
    def title_body(self, title_body):
        """Sets the title_body of this Scope.

        Title body that explains the purpose of the scope.  # noqa: E501

        :param title_body: The title_body of this Scope.  # noqa: E501
        :type: list[str]
        """
        if title_body is None:
            raise ValueError("Invalid value for `title_body`, must not be `None`")  # noqa: E501

        self._title_body = title_body

    @property
    def scope_id(self):
        """Gets the scope_id of this Scope.  # noqa: E501

        Unique Dataset Cluster name for the consent group like <br/> ACCOUNT_DETAILS<br/> STATEMENT_DETAILS<br/> CONTACT_DETAILS<br/> TRANSACTION_DETAILS  # noqa: E501

        :return: The scope_id of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this Scope.

        Unique Dataset Cluster name for the consent group like <br/> ACCOUNT_DETAILS<br/> STATEMENT_DETAILS<br/> CONTACT_DETAILS<br/> TRANSACTION_DETAILS  # noqa: E501

        :param scope_id: The scope_id of this Scope.  # noqa: E501
        :type: str
        """
        if scope_id is None:
            raise ValueError("Invalid value for `scope_id`, must not be `None`")  # noqa: E501
        allowed_values = ["ACCOUNT_DETAILS", "TRANSACTION_DETAILS", "STATEMENT_DETAILS", "CONTACT_DETAILS"]  # noqa: E501
        if scope_id not in allowed_values:
            raise ValueError(
                "Invalid value for `scope_id` ({0}), must be one of {1}"  # noqa: E501
                .format(scope_id, allowed_values)
            )

        self._scope_id = scope_id

    @property
    def dataset_attributes(self):
        """Gets the dataset_attributes of this Scope.  # noqa: E501

        Permissions that are associated with the Consent group like<br/> BASIC_AGG_DATA.BASIC_ACCOUNT_INFO<br/> BASIC_AGG_DATA.ACCOUNT_DETAILS<br/> BASIC_AGG_DATA.STATEMENTS<br/> BASIC_AGG_DATA.TRANSACTIONS<br/> ACCT_PROFILE.HOLDER_NAME<br/> ACCT_PROFILE.FULL_ACCT_NUMBER<br/> ACCT_PROFILE.BANK_TRANSFER_CODE<br/> ACCT_PROFILE.HOLDER_DETAILS  # noqa: E501

        :return: The dataset_attributes of this Scope.  # noqa: E501
        :rtype: list[str]
        """
        return self._dataset_attributes

    @dataset_attributes.setter
    def dataset_attributes(self, dataset_attributes):
        """Sets the dataset_attributes of this Scope.

        Permissions that are associated with the Consent group like<br/> BASIC_AGG_DATA.BASIC_ACCOUNT_INFO<br/> BASIC_AGG_DATA.ACCOUNT_DETAILS<br/> BASIC_AGG_DATA.STATEMENTS<br/> BASIC_AGG_DATA.TRANSACTIONS<br/> ACCT_PROFILE.HOLDER_NAME<br/> ACCT_PROFILE.FULL_ACCT_NUMBER<br/> ACCT_PROFILE.BANK_TRANSFER_CODE<br/> ACCT_PROFILE.HOLDER_DETAILS  # noqa: E501

        :param dataset_attributes: The dataset_attributes of this Scope.  # noqa: E501
        :type: list[str]
        """

        self._dataset_attributes = dataset_attributes

    @property
    def title(self):
        """Gets the title of this Scope.  # noqa: E501

        Title for the Data Cluster.  # noqa: E501

        :return: The title of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Scope.

        Title for the Data Cluster.  # noqa: E501

        :param title: The title of this Scope.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Scope, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scope):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
