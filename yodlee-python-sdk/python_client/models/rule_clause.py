# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RuleClause(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'user_defined_rule_id': 'int',
        'field_value': 'str',
        'operation': 'str',
        'rule_clause_id': 'int'
    }

    attribute_map = {
        'field': 'field',
        'user_defined_rule_id': 'userDefinedRuleId',
        'field_value': 'fieldValue',
        'operation': 'operation',
        'rule_clause_id': 'ruleClauseId'
    }

    def __init__(self, field=None, user_defined_rule_id=None, field_value=None, operation=None, rule_clause_id=None):  # noqa: E501
        """RuleClause - a model defined in Swagger"""  # noqa: E501

        self._field = None
        self._user_defined_rule_id = None
        self._field_value = None
        self._operation = None
        self._rule_clause_id = None
        self.discriminator = None

        if field is not None:
            self.field = field
        if user_defined_rule_id is not None:
            self.user_defined_rule_id = user_defined_rule_id
        if field_value is not None:
            self.field_value = field_value
        if operation is not None:
            self.operation = operation
        if rule_clause_id is not None:
            self.rule_clause_id = rule_clause_id

    @property
    def field(self):
        """Gets the field of this RuleClause.  # noqa: E501

        Field for which the clause is created.<br><br><br><b>Valid Values</b>:amount,description<b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The field of this RuleClause.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this RuleClause.

        Field for which the clause is created.<br><br><br><b>Valid Values</b>:amount,description<b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :param field: The field of this RuleClause.  # noqa: E501
        :type: str
        """
        allowed_values = ["amount", "description"]  # noqa: E501
        if field not in allowed_values:
            raise ValueError(
                "Invalid value for `field` ({0}), must be one of {1}"  # noqa: E501
                .format(field, allowed_values)
            )

        self._field = field

    @property
    def user_defined_rule_id(self):
        """Gets the user_defined_rule_id of this RuleClause.  # noqa: E501

        Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The user_defined_rule_id of this RuleClause.  # noqa: E501
        :rtype: int
        """
        return self._user_defined_rule_id

    @user_defined_rule_id.setter
    def user_defined_rule_id(self, user_defined_rule_id):
        """Sets the user_defined_rule_id of this RuleClause.

        Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :param user_defined_rule_id: The user_defined_rule_id of this RuleClause.  # noqa: E501
        :type: int
        """

        self._user_defined_rule_id = user_defined_rule_id

    @property
    def field_value(self):
        """Gets the field_value of this RuleClause.  # noqa: E501

        The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The field_value of this RuleClause.  # noqa: E501
        :rtype: str
        """
        return self._field_value

    @field_value.setter
    def field_value(self, field_value):
        """Sets the field_value of this RuleClause.

        The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :param field_value: The field_value of this RuleClause.  # noqa: E501
        :type: str
        """

        self._field_value = field_value

    @property
    def operation(self):
        """Gets the operation of this RuleClause.  # noqa: E501

        Operation for which the clause is created.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The operation of this RuleClause.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this RuleClause.

        Operation for which the clause is created.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :param operation: The operation of this RuleClause.  # noqa: E501
        :type: str
        """
        allowed_values = ["numberEquals", "numberLessThan", "numberLessThanEquals", "numberGreaterThan", "numberGreaterThanEquals", "stringEquals", "stringContains"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def rule_clause_id(self):
        """Gets the rule_clause_id of this RuleClause.  # noqa: E501

        Unique identifier generated for the rule clause.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :return: The rule_clause_id of this RuleClause.  # noqa: E501
        :rtype: int
        """
        return self._rule_clause_id

    @rule_clause_id.setter
    def rule_clause_id(self, rule_clause_id):
        """Sets the rule_clause_id of this RuleClause.

        Unique identifier generated for the rule clause.<br><br><b>Applicable containers</b>: bill, creditCard, investment, insurance, loan<br>  # noqa: E501

        :param rule_clause_id: The rule_clause_id of this RuleClause.  # noqa: E501
        :type: int
        """

        self._rule_clause_id = rule_clause_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleClause, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleClause):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
