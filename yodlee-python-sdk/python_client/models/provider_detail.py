# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.capability import Capability  # noqa: F401,E501
from python_client.models.login_form import LoginForm  # noqa: F401,E501
from python_client.models.providers_dataset import ProvidersDataset  # noqa: F401,E501


class ProviderDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'language_iso_code': 'str',
        'favicon': 'str',
        'account_type': 'list[str]',
        'country_iso_code': 'str',
        'is_added_by_user': 'str',
        'priority': 'str',
        'primary_language_iso_code': 'str',
        'help': 'str',
        'base_url': 'str',
        'capability': 'list[Capability]',
        'login_form': 'list[LoginForm]',
        'is_consent_required': 'bool',
        'login_url': 'str',
        'is_auto_refresh_enabled': 'bool',
        'name': 'str',
        'logo': 'str',
        'id': 'int',
        'last_modified': 'str',
        'auth_parameter': 'list[str]',
        'auth_type': 'str',
        'dataset': 'list[ProvidersDataset]',
        'status': 'str'
    }

    attribute_map = {
        'language_iso_code': 'languageISOCode',
        'favicon': 'favicon',
        'account_type': 'accountType',
        'country_iso_code': 'countryISOCode',
        'is_added_by_user': 'isAddedByUser',
        'priority': 'PRIORITY',
        'primary_language_iso_code': 'primaryLanguageISOCode',
        'help': 'help',
        'base_url': 'baseUrl',
        'capability': 'capability',
        'login_form': 'loginForm',
        'is_consent_required': 'isConsentRequired',
        'login_url': 'loginUrl',
        'is_auto_refresh_enabled': 'isAutoRefreshEnabled',
        'name': 'name',
        'logo': 'logo',
        'id': 'id',
        'last_modified': 'lastModified',
        'auth_parameter': 'authParameter',
        'auth_type': 'authType',
        'dataset': 'dataset',
        'status': 'status'
    }

    def __init__(self, language_iso_code=None, favicon=None, account_type=None, country_iso_code=None, is_added_by_user=None, priority=None, primary_language_iso_code=None, help=None, base_url=None, capability=None, login_form=None, is_consent_required=None, login_url=None, is_auto_refresh_enabled=None, name=None, logo=None, id=None, last_modified=None, auth_parameter=None, auth_type=None, dataset=None, status=None):  # noqa: E501
        """ProviderDetail - a model defined in Swagger"""  # noqa: E501

        self._language_iso_code = None
        self._favicon = None
        self._account_type = None
        self._country_iso_code = None
        self._is_added_by_user = None
        self._priority = None
        self._primary_language_iso_code = None
        self._help = None
        self._base_url = None
        self._capability = None
        self._login_form = None
        self._is_consent_required = None
        self._login_url = None
        self._is_auto_refresh_enabled = None
        self._name = None
        self._logo = None
        self._id = None
        self._last_modified = None
        self._auth_parameter = None
        self._auth_type = None
        self._dataset = None
        self._status = None
        self.discriminator = None

        if language_iso_code is not None:
            self.language_iso_code = language_iso_code
        if favicon is not None:
            self.favicon = favicon
        if account_type is not None:
            self.account_type = account_type
        if country_iso_code is not None:
            self.country_iso_code = country_iso_code
        if is_added_by_user is not None:
            self.is_added_by_user = is_added_by_user
        if priority is not None:
            self.priority = priority
        if primary_language_iso_code is not None:
            self.primary_language_iso_code = primary_language_iso_code
        if help is not None:
            self.help = help
        if base_url is not None:
            self.base_url = base_url
        if capability is not None:
            self.capability = capability
        if login_form is not None:
            self.login_form = login_form
        if is_consent_required is not None:
            self.is_consent_required = is_consent_required
        if login_url is not None:
            self.login_url = login_url
        if is_auto_refresh_enabled is not None:
            self.is_auto_refresh_enabled = is_auto_refresh_enabled
        if name is not None:
            self.name = name
        if logo is not None:
            self.logo = logo
        if id is not None:
            self.id = id
        if last_modified is not None:
            self.last_modified = last_modified
        if auth_parameter is not None:
            self.auth_parameter = auth_parameter
        if auth_type is not None:
            self.auth_type = auth_type
        if dataset is not None:
            self.dataset = dataset
        if status is not None:
            self.status = status

    @property
    def language_iso_code(self):
        """Gets the language_iso_code of this ProviderDetail.  # noqa: E501

        The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The language_iso_code of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._language_iso_code

    @language_iso_code.setter
    def language_iso_code(self, language_iso_code):
        """Sets the language_iso_code of this ProviderDetail.

        The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param language_iso_code: The language_iso_code of this ProviderDetail.  # noqa: E501
        :type: str
        """

        self._language_iso_code = language_iso_code

    @property
    def favicon(self):
        """Gets the favicon of this ProviderDetail.  # noqa: E501

        Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The favicon of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._favicon

    @favicon.setter
    def favicon(self, favicon):
        """Sets the favicon of this ProviderDetail.

        Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param favicon: The favicon of this ProviderDetail.  # noqa: E501
        :type: str
        """

        self._favicon = favicon

    @property
    def account_type(self):
        """Gets the account_type of this ProviderDetail.  # noqa: E501

        AccountType supported by the provider, eg: Brokerage Cash, Current<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The account_type of this ProviderDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this ProviderDetail.

        AccountType supported by the provider, eg: Brokerage Cash, Current<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param account_type: The account_type of this ProviderDetail.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CURRENT", "BROKERAGE_CASH"]  # noqa: E501
        if not set(account_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `account_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(account_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._account_type = account_type

    @property
    def country_iso_code(self):
        """Gets the country_iso_code of this ProviderDetail.  # noqa: E501

        Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The country_iso_code of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._country_iso_code

    @country_iso_code.setter
    def country_iso_code(self, country_iso_code):
        """Sets the country_iso_code of this ProviderDetail.

        Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param country_iso_code: The country_iso_code of this ProviderDetail.  # noqa: E501
        :type: str
        """

        self._country_iso_code = country_iso_code

    @property
    def is_added_by_user(self):
        """Gets the is_added_by_user of this ProviderDetail.  # noqa: E501

        Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The is_added_by_user of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._is_added_by_user

    @is_added_by_user.setter
    def is_added_by_user(self, is_added_by_user):
        """Sets the is_added_by_user of this ProviderDetail.

        Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param is_added_by_user: The is_added_by_user of this ProviderDetail.  # noqa: E501
        :type: str
        """

        self._is_added_by_user = is_added_by_user

    @property
    def priority(self):
        """Gets the priority of this ProviderDetail.  # noqa: E501

        Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The priority of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ProviderDetail.

        Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param priority: The priority of this ProviderDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["POPULAR", "SUGGESTED", "COBRAND", "SEARCH", "ALL"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def primary_language_iso_code(self):
        """Gets the primary_language_iso_code of this ProviderDetail.  # noqa: E501

        The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The primary_language_iso_code of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._primary_language_iso_code

    @primary_language_iso_code.setter
    def primary_language_iso_code(self, primary_language_iso_code):
        """Sets the primary_language_iso_code of this ProviderDetail.

        The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param primary_language_iso_code: The primary_language_iso_code of this ProviderDetail.  # noqa: E501
        :type: str
        """

        self._primary_language_iso_code = primary_language_iso_code

    @property
    def help(self):
        """Gets the help of this ProviderDetail.  # noqa: E501

        Text to guide user through linking an account that belongs to the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The help of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this ProviderDetail.

        Text to guide user through linking an account that belongs to the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param help: The help of this ProviderDetail.  # noqa: E501
        :type: str
        """

        self._help = help

    @property
    def base_url(self):
        """Gets the base_url of this ProviderDetail.  # noqa: E501

        The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The base_url of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this ProviderDetail.

        The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param base_url: The base_url of this ProviderDetail.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def capability(self):
        """Gets the capability of this ProviderDetail.  # noqa: E501

        Capability of the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The capability of this ProviderDetail.  # noqa: E501
        :rtype: list[Capability]
        """
        return self._capability

    @capability.setter
    def capability(self, capability):
        """Sets the capability of this ProviderDetail.

        Capability of the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param capability: The capability of this ProviderDetail.  # noqa: E501
        :type: list[Capability]
        """

        self._capability = capability

    @property
    def login_form(self):
        """Gets the login_form of this ProviderDetail.  # noqa: E501

        This entity represents the structure of the login or MFA form that is displayed to the user at the provider site. For performance reasons, this field is returned only when a single provider is requested in the request.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :return: The login_form of this ProviderDetail.  # noqa: E501
        :rtype: list[LoginForm]
        """
        return self._login_form

    @login_form.setter
    def login_form(self, login_form):
        """Sets the login_form of this ProviderDetail.

        This entity represents the structure of the login or MFA form that is displayed to the user at the provider site. For performance reasons, this field is returned only when a single provider is requested in the request.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li></ul>  # noqa: E501

        :param login_form: The login_form of this ProviderDetail.  # noqa: E501
        :type: list[LoginForm]
        """

        self._login_form = login_form

    @property
    def is_consent_required(self):
        """Gets the is_consent_required of this ProviderDetail.  # noqa: E501

        Indicates if a provider site requires consent.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The is_consent_required of this ProviderDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_consent_required

    @is_consent_required.setter
    def is_consent_required(self, is_consent_required):
        """Sets the is_consent_required of this ProviderDetail.

        Indicates if a provider site requires consent.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param is_consent_required: The is_consent_required of this ProviderDetail.  # noqa: E501
        :type: bool
        """

        self._is_consent_required = is_consent_required

    @property
    def login_url(self):
        """Gets the login_url of this ProviderDetail.  # noqa: E501

        The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The login_url of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this ProviderDetail.

        The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param login_url: The login_url of this ProviderDetail.  # noqa: E501
        :type: str
        """

        self._login_url = login_url

    @property
    def is_auto_refresh_enabled(self):
        """Gets the is_auto_refresh_enabled of this ProviderDetail.  # noqa: E501

        Indicates if a provider site is auto-refreshed.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The is_auto_refresh_enabled of this ProviderDetail.  # noqa: E501
        :rtype: bool
        """
        return self._is_auto_refresh_enabled

    @is_auto_refresh_enabled.setter
    def is_auto_refresh_enabled(self, is_auto_refresh_enabled):
        """Sets the is_auto_refresh_enabled of this ProviderDetail.

        Indicates if a provider site is auto-refreshed.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param is_auto_refresh_enabled: The is_auto_refresh_enabled of this ProviderDetail.  # noqa: E501
        :type: bool
        """

        self._is_auto_refresh_enabled = is_auto_refresh_enabled

    @property
    def name(self):
        """Gets the name of this ProviderDetail.  # noqa: E501

        The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The name of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProviderDetail.

        The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param name: The name of this ProviderDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def logo(self):
        """Gets the logo of this ProviderDetail.  # noqa: E501

        The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The logo of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this ProviderDetail.

        The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param logo: The logo of this ProviderDetail.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def id(self):
        """Gets the id of this ProviderDetail.  # noqa: E501

        Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The id of this ProviderDetail.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProviderDetail.

        Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param id: The id of this ProviderDetail.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this ProviderDetail.  # noqa: E501

        Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The last_modified of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this ProviderDetail.

        Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param last_modified: The last_modified of this ProviderDetail.  # noqa: E501
        :type: str
        """

        self._last_modified = last_modified

    @property
    def auth_parameter(self):
        """Gets the auth_parameter of this ProviderDetail.  # noqa: E501

        AuthParameter appears in the response only in case of token-based aggregation sites.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The auth_parameter of this ProviderDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._auth_parameter

    @auth_parameter.setter
    def auth_parameter(self, auth_parameter):
        """Sets the auth_parameter of this ProviderDetail.

        AuthParameter appears in the response only in case of token-based aggregation sites.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param auth_parameter: The auth_parameter of this ProviderDetail.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["authorizationCode", "idToken"]  # noqa: E501
        if not set(auth_parameter).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `auth_parameter` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(auth_parameter) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._auth_parameter = auth_parameter

    @property
    def auth_type(self):
        """Gets the auth_type of this ProviderDetail.  # noqa: E501

        The authentication type enabled at the provider site. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The auth_type of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this ProviderDetail.

        The authentication type enabled at the provider site. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param auth_type: The auth_type of this ProviderDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["OAUTH", "CREDENTIALS", "MFA_CREDENTIALS"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def dataset(self):
        """Gets the dataset of this ProviderDetail.  # noqa: E501

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The dataset of this ProviderDetail.  # noqa: E501
        :rtype: list[ProvidersDataset]
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this ProviderDetail.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param dataset: The dataset of this ProviderDetail.  # noqa: E501
        :type: list[ProvidersDataset]
        """

        self._dataset = dataset

    @property
    def status(self):
        """Gets the status of this ProviderDetail.  # noqa: E501

        Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :return: The status of this ProviderDetail.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProviderDetail.

        Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>  # noqa: E501

        :param status: The status of this ProviderDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["Supported", "Beta", "Unsupported"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProviderDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
