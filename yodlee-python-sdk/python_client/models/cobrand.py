# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Cobrand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cobrand_login': 'str',
        'cobrand_password': 'str',
        'locale': 'str'
    }

    attribute_map = {
        'cobrand_login': 'cobrandLogin',
        'cobrand_password': 'cobrandPassword',
        'locale': 'locale'
    }

    def __init__(self, cobrand_login=None, cobrand_password=None, locale=None):  # noqa: E501
        """Cobrand - a model defined in Swagger"""  # noqa: E501

        self._cobrand_login = None
        self._cobrand_password = None
        self._locale = None
        self.discriminator = None

        self.cobrand_login = cobrand_login
        self.cobrand_password = cobrand_password
        if locale is not None:
            self.locale = locale

    @property
    def cobrand_login(self):
        """Gets the cobrand_login of this Cobrand.  # noqa: E501


        :return: The cobrand_login of this Cobrand.  # noqa: E501
        :rtype: str
        """
        return self._cobrand_login

    @cobrand_login.setter
    def cobrand_login(self, cobrand_login):
        """Sets the cobrand_login of this Cobrand.


        :param cobrand_login: The cobrand_login of this Cobrand.  # noqa: E501
        :type: str
        """
        if cobrand_login is None:
            raise ValueError("Invalid value for `cobrand_login`, must not be `None`")  # noqa: E501
        if cobrand_login is not None and len(cobrand_login) > 2147483647:
            raise ValueError("Invalid value for `cobrand_login`, length must be less than or equal to `2147483647`")  # noqa: E501
        if cobrand_login is not None and len(cobrand_login) < 1:
            raise ValueError("Invalid value for `cobrand_login`, length must be greater than or equal to `1`")  # noqa: E501

        self._cobrand_login = cobrand_login

    @property
    def cobrand_password(self):
        """Gets the cobrand_password of this Cobrand.  # noqa: E501


        :return: The cobrand_password of this Cobrand.  # noqa: E501
        :rtype: str
        """
        return self._cobrand_password

    @cobrand_password.setter
    def cobrand_password(self, cobrand_password):
        """Sets the cobrand_password of this Cobrand.


        :param cobrand_password: The cobrand_password of this Cobrand.  # noqa: E501
        :type: str
        """
        if cobrand_password is None:
            raise ValueError("Invalid value for `cobrand_password`, must not be `None`")  # noqa: E501
        if cobrand_password is not None and len(cobrand_password) > 2147483647:
            raise ValueError("Invalid value for `cobrand_password`, length must be less than or equal to `2147483647`")  # noqa: E501
        if cobrand_password is not None and len(cobrand_password) < 1:
            raise ValueError("Invalid value for `cobrand_password`, length must be greater than or equal to `1`")  # noqa: E501

        self._cobrand_password = cobrand_password

    @property
    def locale(self):
        """Gets the locale of this Cobrand.  # noqa: E501

        The customer's locale that will be considered for the localization functionality.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>  # noqa: E501

        :return: The locale of this Cobrand.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Cobrand.

        The customer's locale that will be considered for the localization functionality.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>  # noqa: E501

        :param locale: The locale of this Cobrand.  # noqa: E501
        :type: str
        """
        if locale is not None and not re.search(r'[a-z]{2}_[A-Z]{2}', locale):  # noqa: E501
            raise ValueError(r"Invalid value for `locale`, must be a follow pattern or equal to `/[a-z]{2}_[A-Z]{2}/`")  # noqa: E501

        self._locale = locale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cobrand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cobrand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
