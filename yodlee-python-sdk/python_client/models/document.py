# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Document(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'int',
        'last_updated': 'str',
        'form_type': 'str',
        'doc_type': 'str',
        'name': 'str',
        'id': 'str',
        'source': 'str',
        'status': 'str'
    }

    attribute_map = {
        'account_id': 'accountID',
        'last_updated': 'lastUpdated',
        'form_type': 'formType',
        'doc_type': 'docType',
        'name': 'name',
        'id': 'id',
        'source': 'source',
        'status': 'status'
    }

    def __init__(self, account_id=None, last_updated=None, form_type=None, doc_type=None, name=None, id=None, source=None, status=None):  # noqa: E501
        """Document - a model defined in Swagger"""  # noqa: E501

        self._account_id = None
        self._last_updated = None
        self._form_type = None
        self._doc_type = None
        self._name = None
        self._id = None
        self._source = None
        self._status = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if last_updated is not None:
            self.last_updated = last_updated
        if form_type is not None:
            self.form_type = form_type
        if doc_type is not None:
            self.doc_type = doc_type
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if source is not None:
            self.source = source
        if status is not None:
            self.status = status

    @property
    def account_id(self):
        """Gets the account_id of this Document.  # noqa: E501

        The unique identifier for the account. The account ID to which the document is linked.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :return: The account_id of this Document.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Document.

        The unique identifier for the account. The account ID to which the document is linked.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :param account_id: The account_id of this Document.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def last_updated(self):
        """Gets the last_updated of this Document.  # noqa: E501

        Indicates the date and time the document was last updated.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :return: The last_updated of this Document.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Document.

        Indicates the date and time the document was last updated.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :param last_updated: The last_updated of this Document.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def form_type(self):
        """Gets the form_type of this Document.  # noqa: E501

        Indicates the type of the tax form.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :return: The form_type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._form_type

    @form_type.setter
    def form_type(self, form_type):
        """Sets the form_type of this Document.

        Indicates the type of the tax form.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :param form_type: The form_type of this Document.  # noqa: E501
        :type: str
        """

        self._form_type = form_type

    @property
    def doc_type(self):
        """Gets the doc_type of this Document.  # noqa: E501

        Indicates the type of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :return: The doc_type of this Document.  # noqa: E501
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this Document.

        Indicates the type of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :param doc_type: The doc_type of this Document.  # noqa: E501
        :type: str
        """
        allowed_values = ["STMT", "TAX", "EBILL"]  # noqa: E501
        if doc_type not in allowed_values:
            raise ValueError(
                "Invalid value for `doc_type` ({0}), must be one of {1}"  # noqa: E501
                .format(doc_type, allowed_values)
            )

        self._doc_type = doc_type

    @property
    def name(self):
        """Gets the name of this Document.  # noqa: E501

        Indicates the name of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :return: The name of this Document.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Document.

        Indicates the name of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :param name: The name of this Document.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this Document.  # noqa: E501

        The document's primary key and unique identifier.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :return: The id of this Document.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.

        The document's primary key and unique identifier.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :param id: The id of this Document.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def source(self):
        """Gets the source of this Document.  # noqa: E501

        Indicates the source of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :return: The source of this Document.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Document.

        Indicates the source of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :param source: The source of this Document.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this Document.  # noqa: E501

        Indicates the status of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :return: The status of this Document.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Document.

        Indicates the status of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, bills, insurance<br>  # noqa: E501

        :param status: The status of this Document.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Document, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Document):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
