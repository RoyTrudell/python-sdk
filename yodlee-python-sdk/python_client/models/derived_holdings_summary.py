# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.derived_holding import DerivedHolding  # noqa: F401,E501
from python_client.models.derived_holdings_account import DerivedHoldingsAccount  # noqa: F401,E501
from python_client.models.money import Money  # noqa: F401,E501


class DerivedHoldingsSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'holding': 'list[DerivedHolding]',
        'classification_type': 'str',
        'classification_value': 'str',
        'value': 'Money',
        'account': 'list[DerivedHoldingsAccount]'
    }

    attribute_map = {
        'holding': 'holding',
        'classification_type': 'classificationType',
        'classification_value': 'classificationValue',
        'value': 'value',
        'account': 'account'
    }

    def __init__(self, holding=None, classification_type=None, classification_value=None, value=None, account=None):  # noqa: E501
        """DerivedHoldingsSummary - a model defined in Swagger"""  # noqa: E501

        self._holding = None
        self._classification_type = None
        self._classification_value = None
        self._value = None
        self._account = None
        self.discriminator = None

        if holding is not None:
            self.holding = holding
        if classification_type is not None:
            self.classification_type = classification_type
        if classification_value is not None:
            self.classification_value = classification_value
        if value is not None:
            self.value = value
        if account is not None:
            self.account = account

    @property
    def holding(self):
        """Gets the holding of this DerivedHoldingsSummary.  # noqa: E501

        Securities that belong to the asset classification type and contributed to the summary value.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The holding of this DerivedHoldingsSummary.  # noqa: E501
        :rtype: list[DerivedHolding]
        """
        return self._holding

    @holding.setter
    def holding(self, holding):
        """Sets the holding of this DerivedHoldingsSummary.

        Securities that belong to the asset classification type and contributed to the summary value.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param holding: The holding of this DerivedHoldingsSummary.  # noqa: E501
        :type: list[DerivedHolding]
        """

        self._holding = holding

    @property
    def classification_type(self):
        """Gets the classification_type of this DerivedHoldingsSummary.  # noqa: E501

        The classification type of the security. The supported asset classification type and the values are provided in the /holdings/assetClassificationList.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The classification_type of this DerivedHoldingsSummary.  # noqa: E501
        :rtype: str
        """
        return self._classification_type

    @classification_type.setter
    def classification_type(self, classification_type):
        """Sets the classification_type of this DerivedHoldingsSummary.

        The classification type of the security. The supported asset classification type and the values are provided in the /holdings/assetClassificationList.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param classification_type: The classification_type of this DerivedHoldingsSummary.  # noqa: E501
        :type: str
        """

        self._classification_type = classification_type

    @property
    def classification_value(self):
        """Gets the classification_value of this DerivedHoldingsSummary.  # noqa: E501

        The classification value that corresponds to the classification type of the holding. The supported asset classification type and the values are provided in the /holdings/assetClassificationList.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The classification_value of this DerivedHoldingsSummary.  # noqa: E501
        :rtype: str
        """
        return self._classification_value

    @classification_value.setter
    def classification_value(self, classification_value):
        """Sets the classification_value of this DerivedHoldingsSummary.

        The classification value that corresponds to the classification type of the holding. The supported asset classification type and the values are provided in the /holdings/assetClassificationList.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param classification_value: The classification_value of this DerivedHoldingsSummary.  # noqa: E501
        :type: str
        """

        self._classification_value = classification_value

    @property
    def value(self):
        """Gets the value of this DerivedHoldingsSummary.  # noqa: E501

        Summary value of the securities.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The value of this DerivedHoldingsSummary.  # noqa: E501
        :rtype: Money
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DerivedHoldingsSummary.

        Summary value of the securities.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param value: The value of this DerivedHoldingsSummary.  # noqa: E501
        :type: Money
        """

        self._value = value

    @property
    def account(self):
        """Gets the account of this DerivedHoldingsSummary.  # noqa: E501

        Accounts that contribute to the classification. <br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :return: The account of this DerivedHoldingsSummary.  # noqa: E501
        :rtype: list[DerivedHoldingsAccount]
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this DerivedHoldingsSummary.

        Accounts that contribute to the classification. <br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>  # noqa: E501

        :param account: The account of this DerivedHoldingsSummary.  # noqa: E501
        :type: list[DerivedHoldingsAccount]
        """

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DerivedHoldingsSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DerivedHoldingsSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
