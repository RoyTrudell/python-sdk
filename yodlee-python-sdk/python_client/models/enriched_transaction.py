# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EnrichedTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container': 'str',
        'source_id': 'int',
        'merchant_city': 'str',
        'high_level_category_id': 'int',
        'detail_category_id': 'int',
        'type': 'str',
        'merchant_state': 'str',
        'transaction_id': 'int',
        'merchant_name': 'str',
        'merchant_id': 'str',
        'simple_description': 'str',
        'sub_type': 'str',
        'merchant_country': 'str',
        'category_id': 'int'
    }

    attribute_map = {
        'container': 'container',
        'source_id': 'sourceId',
        'merchant_city': 'merchantCity',
        'high_level_category_id': 'highLevelCategoryId',
        'detail_category_id': 'detailCategoryId',
        'type': 'type',
        'merchant_state': 'merchantState',
        'transaction_id': 'transactionId',
        'merchant_name': 'merchantName',
        'merchant_id': 'merchantId',
        'simple_description': 'simpleDescription',
        'sub_type': 'subType',
        'merchant_country': 'merchantCountry',
        'category_id': 'categoryId'
    }

    def __init__(self, container=None, source_id=None, merchant_city=None, high_level_category_id=None, detail_category_id=None, type=None, merchant_state=None, transaction_id=None, merchant_name=None, merchant_id=None, simple_description=None, sub_type=None, merchant_country=None, category_id=None):  # noqa: E501
        """EnrichedTransaction - a model defined in Swagger"""  # noqa: E501

        self._container = None
        self._source_id = None
        self._merchant_city = None
        self._high_level_category_id = None
        self._detail_category_id = None
        self._type = None
        self._merchant_state = None
        self._transaction_id = None
        self._merchant_name = None
        self._merchant_id = None
        self._simple_description = None
        self._sub_type = None
        self._merchant_country = None
        self._category_id = None
        self.discriminator = None

        if container is not None:
            self.container = container
        if source_id is not None:
            self.source_id = source_id
        if merchant_city is not None:
            self.merchant_city = merchant_city
        if high_level_category_id is not None:
            self.high_level_category_id = high_level_category_id
        if detail_category_id is not None:
            self.detail_category_id = detail_category_id
        if type is not None:
            self.type = type
        if merchant_state is not None:
            self.merchant_state = merchant_state
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if merchant_name is not None:
            self.merchant_name = merchant_name
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if simple_description is not None:
            self.simple_description = simple_description
        if sub_type is not None:
            self.sub_type = sub_type
        if merchant_country is not None:
            self.merchant_country = merchant_country
        if category_id is not None:
            self.category_id = category_id

    @property
    def container(self):
        """Gets the container of this EnrichedTransaction.  # noqa: E501

        The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The container of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this EnrichedTransaction.

        The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>  # noqa: E501

        :param container: The container of this EnrichedTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "bill", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if container not in allowed_values:
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"  # noqa: E501
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def source_id(self):
        """Gets the source_id of this EnrichedTransaction.  # noqa: E501

        A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.<br>Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.  # noqa: E501

        :return: The source_id of this EnrichedTransaction.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this EnrichedTransaction.

        A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.<br>Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.  # noqa: E501

        :param source_id: The source_id of this EnrichedTransaction.  # noqa: E501
        :type: int
        """

        self._source_id = source_id

    @property
    def merchant_city(self):
        """Gets the merchant_city of this EnrichedTransaction.  # noqa: E501

        City of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The merchant_city of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._merchant_city

    @merchant_city.setter
    def merchant_city(self, merchant_city):
        """Sets the merchant_city of this EnrichedTransaction.

        City of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param merchant_city: The merchant_city of this EnrichedTransaction.  # noqa: E501
        :type: str
        """

        self._merchant_city = merchant_city

    @property
    def high_level_category_id(self):
        """Gets the high_level_category_id of this EnrichedTransaction.  # noqa: E501

        The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The high_level_category_id of this EnrichedTransaction.  # noqa: E501
        :rtype: int
        """
        return self._high_level_category_id

    @high_level_category_id.setter
    def high_level_category_id(self, high_level_category_id):
        """Sets the high_level_category_id of this EnrichedTransaction.

        The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param high_level_category_id: The high_level_category_id of this EnrichedTransaction.  # noqa: E501
        :type: int
        """

        self._high_level_category_id = high_level_category_id

    @property
    def detail_category_id(self):
        """Gets the detail_category_id of this EnrichedTransaction.  # noqa: E501

        The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>  # noqa: E501

        :return: The detail_category_id of this EnrichedTransaction.  # noqa: E501
        :rtype: int
        """
        return self._detail_category_id

    @detail_category_id.setter
    def detail_category_id(self, detail_category_id):
        """Sets the detail_category_id of this EnrichedTransaction.

        The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>  # noqa: E501

        :param detail_category_id: The detail_category_id of this EnrichedTransaction.  # noqa: E501
        :type: int
        """

        self._detail_category_id = detail_category_id

    @property
    def type(self):
        """Gets the type of this EnrichedTransaction.  # noqa: E501

        The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>  # noqa: E501

        :return: The type of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EnrichedTransaction.

        The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>  # noqa: E501

        :param type: The type of this EnrichedTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREDIT", "DEBIT", "BUY", "SELL", "DIVIDEND_PAYMENT", "DIVIDEND_REINVESTMENT", "MISCELLANEOUS_INCOME", "INTEREST_INCOME", "INTEREST_REINVESTMENT", "LONG_TERM_CAPITAL_GAINS_DISTRIBUTION", "REINVEST_LONG_TERM_CAPITAL_GAINS", "SHORT_TERM_CAPITAL_GAINS_DISTRIBUTION", "REINVEST_SHORT_TERM_CAPITAL_GAINS", "SHARES_IN", "SHARES_OUT", "TRANSFER_CASH_IN", "TRANSFER_CASH_OUT", "STOCK_SPLIT", "RETURN_OF_CAPITAL", "MISCELLANEOUS_EXPENSE", "TRANSFER_SHARES_IN", "TRANSFER_SHARES_OUT", "MARGIN_INTEREST_EXPENSE", "REMINDER", "CORPORATE_ACQUISITION", "STOCK_DIVIDEND", "SHORT_SELL", "BOND_CALL", "BOND_MATURES", "BUY_TO_COVER", "BUY_OPTION", "SELL_OPTION", "EXERCISE_OPTION", "ASSIGN_OPTION", "EXPIRE_OPTION", "OTHER", "SWEEP", "CAPITAL_GAINS_REINVESTED", "_1035_EXCHANGE", "_401K_CONTRIBUTION", "_401K_EMPLOYER_CONTRIBUTION", "LOAN_DISTRIBUTION", "LOAN_PAYMENT", "PENALTY", "ACCOUNT_FEE", "ACCOUNT_MAINTENANCE_FEE", "ACCUMULATION", "ACH_OUT", "ADJUSTED_BUY", "ADJUSTED_SELL", "ADMINISTRATIVE_FEE", "ANNUITY_CREDIT", "ATM_FEE", "ATM_WITHDRAWAL", "ATM_WITHDRAWAL_FEE", "ATM_WITHDRAWAL_FEE_CREDIT", "AUTOMATIC_INVESTMENT", "BAD_CHECK", "BILL_PAY", "BILL_PAY_IN", "BILL_PAY_OUT", "BUY_ACCRUED_INTEREST", "BUY_TO_CLOSE", "BUY_TO_OPEN", "CAPITAL_GAINS_RECIEVED", "CHARGE", "CHARGE_CREDIT", "CHECK", "CHECKBOOK_REORDER_FEE", "CREDIT_IN_LIEU_OF_FRACTIONAL_SHARE", "CS_ADJUSTMENT", "DEATH_BENEFIT_PAYOUT", "DEFERRED_COMPENSATION_CONTRIBUTION", "DEFERRED_COMPENSATION_DISTRIBUTION", "DEPOSIT", "DIRECT_DEPOSIT", "EDUCATIONAL_PLAN_CONTRIBUTION", "ESOP_ALLOCATION", "FEDERAL_TAX_FREE_DIVIDEND", "FEDEX_FEE", "FED_TAX_WITHHELD", "FOREIGN_TAX", "FOREIGN_TAX_CREDIT", "FRACTIONAL_SHARE_LIQUIDATION", "FUND_EXCHANGE", "FUND_EXPENSE", "IRA_CONTRIBUTION", "IRA_DISTRIBUTION", "IRA_NON_QUALIFIED_DISTRIBUTION", "MERGER", "MISC_CREDIT", "MISC_JRL_CASHTO_MARGIN", "MISC_JRL_MARGIN_TO_CASH", "MMF_DIVIDEND", "MMF_IN", "MMF_LIQ", "MMF_REIN", "MMF_SWEEP", "MMF_TRANSACTION", "MONEY_FUNDS_JOURNAL_CASH_TO_MARGIN", "MONEY_FUNDS_JOURNAL_MARGIN_TO_CASH", "MORTALITY_AND_EXPENSE_RISK_CHARGE", "NAME_CHANGE", "NSF_FEE", "ORDER_OUT", "ORDER_OUT_FEE", "OTHER_ANNUITY_FEE", "PAYOUT", "REORGANIZATION_CHARGE", "RETURNED_CHECK_FEE", "ROLLOVER_CONTRIBUTION", "ROTH_CONTRIBUTION", "RTQ_FEE", "SELL_ACCRUED_INTEREST", "SELL_TO_CLOSE", "SELL_TO_OPEN", "SEP_CONTRIBUTION", "SIMPLE_PLAN_CONTRIBUTION", "SPINOFF", "STATE_TAX_FREE_DIVIDEND", "STATE_TAX_WITHHELD", "STAX", "STOCK_FUND_OPTION_JOURNAL_CASH_TO_MARGIN", "STOCK_FUND_OPTION_JOURNAL_MARGIN_TO_CASH", "STOCK_OPTION_EXERCISE", "STOCK_OPTION_WITHHOLDING", "SURRENDER_CHARGE", "SYMBOL_CHANGE", "TAX_FREE_DIVIDEND", "WIRE_FEE", "WIRE_FUNDS_IN", "WIRE_FUNDS_OUT", "WORTHLESS_SECURITIES", "_529_PLAN_CONTRIBUTION", "ADJUSTED_ASSIGN", "REVERSAL", "DVP", "RVP", "ADJUSTMENT", "ADJUSTED_CREDIT", "ADJUSTED_DEBIT", "TENDERED", "ESOP_ALLOCATION_1", "EXCESS_CONTRIBUTION", "RECHARACTERIZATION", "CONVERSION", "ROLLOVER_TO_QUAL", "FEDERAL_TAX_FREE_INTEREST_INCOME", "STATE_TAX_FREE_INTEREST_INCOME", "FORFEITURE", "WITHDRAWAL", "LOAN_WITHDRAWAL", "BALANCE_FORWARD", "GENERIC_CONTRIBUTION", "CAPITAL_CALLS", "DISTRIBUTIONS_OUT", "PRINCIPAL_PAYMENT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def merchant_state(self):
        """Gets the merchant_state of this EnrichedTransaction.  # noqa: E501

        State of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The merchant_state of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._merchant_state

    @merchant_state.setter
    def merchant_state(self, merchant_state):
        """Sets the merchant_state of this EnrichedTransaction.

        State of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param merchant_state: The merchant_state of this EnrichedTransaction.  # noqa: E501
        :type: str
        """

        self._merchant_state = merchant_state

    @property
    def transaction_id(self):
        """Gets the transaction_id of this EnrichedTransaction.  # noqa: E501

        An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The transaction_id of this EnrichedTransaction.  # noqa: E501
        :rtype: int
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this EnrichedTransaction.

        An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param transaction_id: The transaction_id of this EnrichedTransaction.  # noqa: E501
        :type: int
        """

        self._transaction_id = transaction_id

    @property
    def merchant_name(self):
        """Gets the merchant_name of this EnrichedTransaction.  # noqa: E501

        The name of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The merchant_name of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this EnrichedTransaction.

        The name of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param merchant_name: The merchant_name of this EnrichedTransaction.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def merchant_id(self):
        """Gets the merchant_id of this EnrichedTransaction.  # noqa: E501

        Identifier of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard<br>  # noqa: E501

        :return: The merchant_id of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this EnrichedTransaction.

        Identifier of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard<br>  # noqa: E501

        :param merchant_id: The merchant_id of this EnrichedTransaction.  # noqa: E501
        :type: str
        """

        self._merchant_id = merchant_id

    @property
    def simple_description(self):
        """Gets the simple_description of this EnrichedTransaction.  # noqa: E501

        The transaction description that appears at the FI site may not be self-explanatory, i.e., the source, purpose of the transaction may not be evident. Yodlee attempts to simplify and make the transaction meaningful to the consumer, and this simplified transaction description is provided in the simple description field.Note: The simple description field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bill, creditCard, insurance, loan<br>  # noqa: E501

        :return: The simple_description of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._simple_description

    @simple_description.setter
    def simple_description(self, simple_description):
        """Sets the simple_description of this EnrichedTransaction.

        The transaction description that appears at the FI site may not be self-explanatory, i.e., the source, purpose of the transaction may not be evident. Yodlee attempts to simplify and make the transaction meaningful to the consumer, and this simplified transaction description is provided in the simple description field.Note: The simple description field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bill, creditCard, insurance, loan<br>  # noqa: E501

        :param simple_description: The simple_description of this EnrichedTransaction.  # noqa: E501
        :type: str
        """

        self._simple_description = simple_description

    @property
    def sub_type(self):
        """Gets the sub_type of this EnrichedTransaction.  # noqa: E501

        The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The sub_type of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this EnrichedTransaction.

        The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param sub_type: The sub_type of this EnrichedTransaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTH_HOLD", "AUTH_REQUEST", "OVERDRAFT_CHARGE", "CREDIT_ADJUSTMENT", "PIN_DEBIT", "BANK_DIRECT_DEPOSIT", "DIVIDEND_DEPOSIT", "INTEREST_SAVINGS", "INTEREST_ADJUSTMENT", "ONLINE_PURCHASE", "PURCHASED_WITH_CHECK", "RECURRING_BILLING", "TAX_PAYMENT", "PAYMENT_BY_CHECK", "PAYMENT_PLAN", "FEE_REFUND", "WIRE_TRANSFER_CHARGE", "ACCOUNT_TO_ACCOUNT_TRANSFER", "BANK_TO_BANK_TRANSACTION", "BANK_TO_NON_BANK_ACCOUNT_TRANSFER", "CASH_WITHDRAWAL_AT_FI", "ATM_CASH_WITHDRAWAL", "AUTH_PROCESSING", "AUTH_RELEASE", "PRE_AUTH", "AUTH_COMPLETE", "AUTH_VOID", "BALANCE_ENQUIRY", "ACCOUNT_VERIFICATION", "PRE_AUTH_COMPLETION", "SERVICE_CHARGE", "SERVICE_CHARGE_FEE_REFUND", "RETURNED_CHECK_CHARGE", "RETURNED_CHECK_REIMBURSEMENT", "CASH_ADVANCE", "BILL_PAY_CHARGE", "CHECK_IMAGE_SERVICE_CHARGE", "OVERDRAFT_PROTECTION_CHARGE", "STOP_PAYMENT_CHARGE", "CHECKS_ORDERING_CHARGE", "MONTHLY_MAINTENANCE_CHARGE", "DEBIT_CARD_FEE", "CONVENIENCE_FEE", "PERSONAL_LOAN_CREDIT", "CREDIT_CARD_CREDIT", "AUTO_LOAN", "HOME_LOAN_MORTGAGE", "SHORT_TERM_CREDIT", "SIGNATURE_DEBIT", "CONTACT_LESS_DEBIT", "DEFERRED_DEPOSIT", "DEFERRED_BILL_PAY", "INSTALLMENT_PAYMENT", "RECURRING_SUBSCRIPTION_PAYMENT", "HOLD_CHECK_PAYMENT", "CAPITAL_GAINS_DISTIBUTION", "CG_LONG_TERM_DEPOSIT", "OPEN_SALE_DEPOSIT", "INTEREST__CHECK", "PURCHASE_VOID", "PURCHASE_WITH_CREDIT_CARD", "PURCHASE_WITH_DEBIT_CARD", "CHARGE_A_REPEAT_CUSTOMER", "DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT", "FEE_PAYMENT", "FINANCE_CHARGE_REFUND", "TRANSACTION_VOID", "FEE_VOID", "DEBIT_CARD_WITHDRAWAL_AT_STORE", "ELECTRONIC_PAYMENT", "ACH_DEBIT", "ATM_TELLER_DEPOSIT", "POS_DEBIT", "BANK_ADJUSTMENT", "CHARGES_FEES", "INTEREST", "DEPOSITS_CREDITS", "PAYMENT", "PURCHASE", "REFUND", "TRANSFER", "WITHDRAWAL", "OTHER_DEPOSITS", "OTHER_WITHDRAWALS", "ADJUSTMENT", "FINANCE_CHARGE", "OTHER_CHARGES_FEES", "ANNUAL_FEE", "DEPOSIT", "DIRECT_DEPOSIT_SALARY", "INVESTMENT_INCOME_CASH", "SSA", "REWARDS", "CHECK_DEPOSIT", "MOBILE_REMOTE_DEPOSIT", "TELLER_DEPOSIT", "TAX_REFUND", "CREDIT_CARD_PAYMENT", "INSURANCE_PAYMENT", "UTILITIES_PAYMENT", "CHILD_SUPPORT", "LOAN", "PERSONAL_LOAN", "STUDENT_LOAN", "SALES_TAX", "REIMBURSEMENT", "BALANCE_TRANSFER", "WIRE_TRANSFER", "OVERDRAFT_PROTECTION", "DEBIT", "CREDIT", "NSF_FEES"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def merchant_country(self):
        """Gets the merchant_country of this EnrichedTransaction.  # noqa: E501

        Country of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The merchant_country of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._merchant_country

    @merchant_country.setter
    def merchant_country(self, merchant_country):
        """Sets the merchant_country of this EnrichedTransaction.

        Country of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param merchant_country: The merchant_country of this EnrichedTransaction.  # noqa: E501
        :type: str
        """

        self._merchant_country = merchant_country

    @property
    def category_id(self):
        """Gets the category_id of this EnrichedTransaction.  # noqa: E501

        The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :return: The category_id of this EnrichedTransaction.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this EnrichedTransaction.

        The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>  # noqa: E501

        :param category_id: The category_id of this EnrichedTransaction.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnrichedTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrichedTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
