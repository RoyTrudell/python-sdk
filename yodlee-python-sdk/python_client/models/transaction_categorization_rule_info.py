# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.field_operation import FieldOperation  # noqa: F401,E501


class TransactionCategorizationRuleInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rule_clause': 'list[FieldOperation]',
        'source': 'str',
        'priority': 'int',
        'category_id': 'int'
    }

    attribute_map = {
        'rule_clause': 'ruleClause',
        'source': 'source',
        'priority': 'priority',
        'category_id': 'categoryId'
    }

    def __init__(self, rule_clause=None, source=None, priority=None, category_id=None):  # noqa: E501
        """TransactionCategorizationRuleInfo - a model defined in Swagger"""  # noqa: E501

        self._rule_clause = None
        self._source = None
        self._priority = None
        self._category_id = None
        self.discriminator = None

        self.rule_clause = rule_clause
        if source is not None:
            self.source = source
        if priority is not None:
            self.priority = priority
        self.category_id = category_id

    @property
    def rule_clause(self):
        """Gets the rule_clause of this TransactionCategorizationRuleInfo.  # noqa: E501


        :return: The rule_clause of this TransactionCategorizationRuleInfo.  # noqa: E501
        :rtype: list[FieldOperation]
        """
        return self._rule_clause

    @rule_clause.setter
    def rule_clause(self, rule_clause):
        """Sets the rule_clause of this TransactionCategorizationRuleInfo.


        :param rule_clause: The rule_clause of this TransactionCategorizationRuleInfo.  # noqa: E501
        :type: list[FieldOperation]
        """
        if rule_clause is None:
            raise ValueError("Invalid value for `rule_clause`, must not be `None`")  # noqa: E501

        self._rule_clause = rule_clause

    @property
    def source(self):
        """Gets the source of this TransactionCategorizationRuleInfo.  # noqa: E501


        :return: The source of this TransactionCategorizationRuleInfo.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TransactionCategorizationRuleInfo.


        :param source: The source of this TransactionCategorizationRuleInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def priority(self):
        """Gets the priority of this TransactionCategorizationRuleInfo.  # noqa: E501


        :return: The priority of this TransactionCategorizationRuleInfo.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TransactionCategorizationRuleInfo.


        :param priority: The priority of this TransactionCategorizationRuleInfo.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def category_id(self):
        """Gets the category_id of this TransactionCategorizationRuleInfo.  # noqa: E501


        :return: The category_id of this TransactionCategorizationRuleInfo.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this TransactionCategorizationRuleInfo.


        :param category_id: The category_id of this TransactionCategorizationRuleInfo.  # noqa: E501
        :type: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionCategorizationRuleInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionCategorizationRuleInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
