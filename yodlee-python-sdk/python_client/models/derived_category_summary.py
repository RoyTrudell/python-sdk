# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.derived_category_summary_details import DerivedCategorySummaryDetails  # noqa: F401,E501
from python_client.models.derived_transactions_links import DerivedTransactionsLinks  # noqa: F401,E501
from python_client.models.money import Money  # noqa: F401,E501


class DerivedCategorySummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_total': 'Money',
        'details': 'list[DerivedCategorySummaryDetails]',
        'links': 'DerivedTransactionsLinks',
        'category_name': 'str',
        'category_id': 'int',
        'debit_total': 'Money'
    }

    attribute_map = {
        'credit_total': 'creditTotal',
        'details': 'details',
        'links': 'links',
        'category_name': 'categoryName',
        'category_id': 'categoryId',
        'debit_total': 'debitTotal'
    }

    def __init__(self, credit_total=None, details=None, links=None, category_name=None, category_id=None, debit_total=None):  # noqa: E501
        """DerivedCategorySummary - a model defined in Swagger"""  # noqa: E501

        self._credit_total = None
        self._details = None
        self._links = None
        self._category_name = None
        self._category_id = None
        self._debit_total = None
        self.discriminator = None

        if credit_total is not None:
            self.credit_total = credit_total
        if details is not None:
            self.details = details
        if links is not None:
            self.links = links
        if category_name is not None:
            self.category_name = category_name
        if category_id is not None:
            self.category_id = category_id
        if debit_total is not None:
            self.debit_total = debit_total

    @property
    def credit_total(self):
        """Gets the credit_total of this DerivedCategorySummary.  # noqa: E501

        The total of credit transactions for the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The credit_total of this DerivedCategorySummary.  # noqa: E501
        :rtype: Money
        """
        return self._credit_total

    @credit_total.setter
    def credit_total(self, credit_total):
        """Sets the credit_total of this DerivedCategorySummary.

        The total of credit transactions for the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param credit_total: The credit_total of this DerivedCategorySummary.  # noqa: E501
        :type: Money
        """

        self._credit_total = credit_total

    @property
    def details(self):
        """Gets the details of this DerivedCategorySummary.  # noqa: E501

        Credit and debit summary per date.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The details of this DerivedCategorySummary.  # noqa: E501
        :rtype: list[DerivedCategorySummaryDetails]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this DerivedCategorySummary.

        Credit and debit summary per date.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param details: The details of this DerivedCategorySummary.  # noqa: E501
        :type: list[DerivedCategorySummaryDetails]
        """

        self._details = details

    @property
    def links(self):
        """Gets the links of this DerivedCategorySummary.  # noqa: E501

        Link of the API services that corresponds to the value derivation.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The links of this DerivedCategorySummary.  # noqa: E501
        :rtype: DerivedTransactionsLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DerivedCategorySummary.

        Link of the API services that corresponds to the value derivation.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param links: The links of this DerivedCategorySummary.  # noqa: E501
        :type: DerivedTransactionsLinks
        """

        self._links = links

    @property
    def category_name(self):
        """Gets the category_name of this DerivedCategorySummary.  # noqa: E501

        The name of the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The category_name of this DerivedCategorySummary.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this DerivedCategorySummary.

        The name of the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param category_name: The category_name of this DerivedCategorySummary.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    @property
    def category_id(self):
        """Gets the category_id of this DerivedCategorySummary.  # noqa: E501

        Id of the category. This information is provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The category_id of this DerivedCategorySummary.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this DerivedCategorySummary.

        Id of the category. This information is provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param category_id: The category_id of this DerivedCategorySummary.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def debit_total(self):
        """Gets the debit_total of this DerivedCategorySummary.  # noqa: E501

        The total of debit transactions for the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The debit_total of this DerivedCategorySummary.  # noqa: E501
        :rtype: Money
        """
        return self._debit_total

    @debit_total.setter
    def debit_total(self, debit_total):
        """Sets the debit_total of this DerivedCategorySummary.

        The total of debit transactions for the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param debit_total: The debit_total of this DerivedCategorySummary.  # noqa: E501
        :type: Money
        """

        self._debit_total = debit_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DerivedCategorySummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DerivedCategorySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
