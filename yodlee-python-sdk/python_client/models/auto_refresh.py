# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AutoRefresh(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_status': 'str',
        'as_of_date': 'str',
        'status': 'str'
    }

    attribute_map = {
        'additional_status': 'additionalStatus',
        'as_of_date': 'asOfDate',
        'status': 'status'
    }

    def __init__(self, additional_status=None, as_of_date=None, status=None):  # noqa: E501
        """AutoRefresh - a model defined in Swagger"""  # noqa: E501

        self._additional_status = None
        self._as_of_date = None
        self._status = None
        self.discriminator = None

        if additional_status is not None:
            self.additional_status = additional_status
        if as_of_date is not None:
            self.as_of_date = as_of_date
        if status is not None:
            self.status = status

    @property
    def additional_status(self):
        """Gets the additional_status of this AutoRefresh.  # noqa: E501

        Indicates the reason for the status.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The additional_status of this AutoRefresh.  # noqa: E501
        :rtype: str
        """
        return self._additional_status

    @additional_status.setter
    def additional_status(self, additional_status):
        """Sets the additional_status of this AutoRefresh.

        Indicates the reason for the status.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param additional_status: The additional_status of this AutoRefresh.  # noqa: E501
        :type: str
        """
        allowed_values = ["SCHEDULED", "TEMP_ERROR", "SITE_BLOCKING", "SITE_NOT_SUPPORTED", "REAL_TIME_MFA_REQUIRED", "USER_ACTION_REQUIRED", "UNSUBSCRIBED", "MANUAL_ACCOUNT"]  # noqa: E501
        if additional_status not in allowed_values:
            raise ValueError(
                "Invalid value for `additional_status` ({0}), must be one of {1}"  # noqa: E501
                .format(additional_status, allowed_values)
            )

        self._additional_status = additional_status

    @property
    def as_of_date(self):
        """Gets the as_of_date of this AutoRefresh.  # noqa: E501

        Date on which the auto refresh status is determined.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :return: The as_of_date of this AutoRefresh.  # noqa: E501
        :rtype: str
        """
        return self._as_of_date

    @as_of_date.setter
    def as_of_date(self, as_of_date):
        """Sets the as_of_date of this AutoRefresh.

        Date on which the auto refresh status is determined.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>  # noqa: E501

        :param as_of_date: The as_of_date of this AutoRefresh.  # noqa: E501
        :type: str
        """

        self._as_of_date = as_of_date

    @property
    def status(self):
        """Gets the status of this AutoRefresh.  # noqa: E501

        Indicates whether auto refresh is enabled or disabled.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The status of this AutoRefresh.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AutoRefresh.

        Indicates whether auto refresh is enabled or disabled.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param status: The status of this AutoRefresh.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutoRefresh, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoRefresh):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
