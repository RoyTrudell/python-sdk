# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.description import Description  # noqa: F401,E501


class UpdateTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_source': 'str',
        'container': 'str',
        'description': 'Description',
        'memo': 'str',
        'category_id': 'int'
    }

    attribute_map = {
        'category_source': 'categorySource',
        'container': 'container',
        'description': 'description',
        'memo': 'memo',
        'category_id': 'categoryId'
    }

    def __init__(self, category_source=None, container=None, description=None, memo=None, category_id=None):  # noqa: E501
        """UpdateTransaction - a model defined in Swagger"""  # noqa: E501

        self._category_source = None
        self._container = None
        self._description = None
        self._memo = None
        self._category_id = None
        self.discriminator = None

        self.category_source = category_source
        self.container = container
        if description is not None:
            self.description = description
        if memo is not None:
            self.memo = memo
        self.category_id = category_id

    @property
    def category_source(self):
        """Gets the category_source of this UpdateTransaction.  # noqa: E501


        :return: The category_source of this UpdateTransaction.  # noqa: E501
        :rtype: str
        """
        return self._category_source

    @category_source.setter
    def category_source(self, category_source):
        """Sets the category_source of this UpdateTransaction.


        :param category_source: The category_source of this UpdateTransaction.  # noqa: E501
        :type: str
        """
        if category_source is None:
            raise ValueError("Invalid value for `category_source`, must not be `None`")  # noqa: E501
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if category_source not in allowed_values:
            raise ValueError(
                "Invalid value for `category_source` ({0}), must be one of {1}"  # noqa: E501
                .format(category_source, allowed_values)
            )

        self._category_source = category_source

    @property
    def container(self):
        """Gets the container of this UpdateTransaction.  # noqa: E501


        :return: The container of this UpdateTransaction.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this UpdateTransaction.


        :param container: The container of this UpdateTransaction.  # noqa: E501
        :type: str
        """
        if container is None:
            raise ValueError("Invalid value for `container`, must not be `None`")  # noqa: E501
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "bill", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if container not in allowed_values:
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"  # noqa: E501
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def description(self):
        """Gets the description of this UpdateTransaction.  # noqa: E501


        :return: The description of this UpdateTransaction.  # noqa: E501
        :rtype: Description
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateTransaction.


        :param description: The description of this UpdateTransaction.  # noqa: E501
        :type: Description
        """

        self._description = description

    @property
    def memo(self):
        """Gets the memo of this UpdateTransaction.  # noqa: E501


        :return: The memo of this UpdateTransaction.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this UpdateTransaction.


        :param memo: The memo of this UpdateTransaction.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def category_id(self):
        """Gets the category_id of this UpdateTransaction.  # noqa: E501


        :return: The category_id of this UpdateTransaction.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this UpdateTransaction.


        :param category_id: The category_id of this UpdateTransaction.  # noqa: E501
        :type: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
