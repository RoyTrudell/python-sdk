# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Description(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original': 'str',
        'simple': 'str',
        'consumer': 'str'
    }

    attribute_map = {
        'original': 'original',
        'simple': 'simple',
        'consumer': 'consumer'
    }

    def __init__(self, original=None, simple=None, consumer=None):  # noqa: E501
        """Description - a model defined in Swagger"""  # noqa: E501

        self._original = None
        self._simple = None
        self._consumer = None
        self.discriminator = None

        if original is not None:
            self.original = original
        if simple is not None:
            self.simple = simple
        if consumer is not None:
            self.consumer = consumer

    @property
    def original(self):
        """Gets the original of this Description.  # noqa: E501

        Original transaction description as it appears at the FI site.<br><br><b>Applicable containers</b>: bill, creditCard, insurance, loan<br>  # noqa: E501

        :return: The original of this Description.  # noqa: E501
        :rtype: str
        """
        return self._original

    @original.setter
    def original(self, original):
        """Sets the original of this Description.

        Original transaction description as it appears at the FI site.<br><br><b>Applicable containers</b>: bill, creditCard, insurance, loan<br>  # noqa: E501

        :param original: The original of this Description.  # noqa: E501
        :type: str
        """

        self._original = original

    @property
    def simple(self):
        """Gets the simple of this Description.  # noqa: E501

        The transaction description that appears at the FI site may not be self-explanatory, i.e., the source, purpose of the transaction may not be evident. Yodlee attempts to simplify and make the transaction meaningful to the consumer, and this simplified transaction description is provided in the simple description field.Note: The simple description field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bill, creditCard, insurance, loan<br>  # noqa: E501

        :return: The simple of this Description.  # noqa: E501
        :rtype: str
        """
        return self._simple

    @simple.setter
    def simple(self, simple):
        """Sets the simple of this Description.

        The transaction description that appears at the FI site may not be self-explanatory, i.e., the source, purpose of the transaction may not be evident. Yodlee attempts to simplify and make the transaction meaningful to the consumer, and this simplified transaction description is provided in the simple description field.Note: The simple description field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bill, creditCard, insurance, loan<br>  # noqa: E501

        :param simple: The simple of this Description.  # noqa: E501
        :type: str
        """

        self._simple = simple

    @property
    def consumer(self):
        """Gets the consumer of this Description.  # noqa: E501

        The description of the transaction as defined by the consumer. The consumer can define or provide more details of the transaction in this field.<br><br><b>Applicable containers</b>: bill, creditCard, insurance, loan<br>  # noqa: E501

        :return: The consumer of this Description.  # noqa: E501
        :rtype: str
        """
        return self._consumer

    @consumer.setter
    def consumer(self, consumer):
        """Sets the consumer of this Description.

        The description of the transaction as defined by the consumer. The consumer can define or provide more details of the transaction in this field.<br><br><b>Applicable containers</b>: bill, creditCard, insurance, loan<br>  # noqa: E501

        :param consumer: The consumer of this Description.  # noqa: E501
        :type: str
        """

        self._consumer = consumer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Description, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Description):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
