# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateConsent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consent_id': 'int',
        'authorization_url': 'str',
        'provider_id': 'int'
    }

    attribute_map = {
        'consent_id': 'consentId',
        'authorization_url': 'authorizationUrl',
        'provider_id': 'providerId'
    }

    def __init__(self, consent_id=None, authorization_url=None, provider_id=None):  # noqa: E501
        """UpdateConsent - a model defined in Swagger"""  # noqa: E501

        self._consent_id = None
        self._authorization_url = None
        self._provider_id = None
        self.discriminator = None

        if consent_id is not None:
            self.consent_id = consent_id
        if authorization_url is not None:
            self.authorization_url = authorization_url
        if provider_id is not None:
            self.provider_id = provider_id

    @property
    def consent_id(self):
        """Gets the consent_id of this UpdateConsent.  # noqa: E501

        Unique identifier for consent. This is created during consent creation.  # noqa: E501

        :return: The consent_id of this UpdateConsent.  # noqa: E501
        :rtype: int
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this UpdateConsent.

        Unique identifier for consent. This is created during consent creation.  # noqa: E501

        :param consent_id: The consent_id of this UpdateConsent.  # noqa: E501
        :type: int
        """

        self._consent_id = consent_id

    @property
    def authorization_url(self):
        """Gets the authorization_url of this UpdateConsent.  # noqa: E501

        Authorization url generated for the request through PUT Consent to reach endsite.  # noqa: E501

        :return: The authorization_url of this UpdateConsent.  # noqa: E501
        :rtype: str
        """
        return self._authorization_url

    @authorization_url.setter
    def authorization_url(self, authorization_url):
        """Sets the authorization_url of this UpdateConsent.

        Authorization url generated for the request through PUT Consent to reach endsite.  # noqa: E501

        :param authorization_url: The authorization_url of this UpdateConsent.  # noqa: E501
        :type: str
        """

        self._authorization_url = authorization_url

    @property
    def provider_id(self):
        """Gets the provider_id of this UpdateConsent.  # noqa: E501

        Unique identifier for the provider account resource. This is created during account addition.  # noqa: E501

        :return: The provider_id of this UpdateConsent.  # noqa: E501
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this UpdateConsent.

        Unique identifier for the provider account resource. This is created during account addition.  # noqa: E501

        :param provider_id: The provider_id of this UpdateConsent.  # noqa: E501
        :type: int
        """

        self._provider_id = provider_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateConsent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateConsent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
