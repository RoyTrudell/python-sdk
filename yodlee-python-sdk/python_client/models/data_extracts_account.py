# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.account_address import AccountAddress  # noqa: F401,E501
from python_client.models.account_dataset import AccountDataset  # noqa: F401,E501
from python_client.models.bank_transfer_code import BankTransferCode  # noqa: F401,E501
from python_client.models.coverage import Coverage  # noqa: F401,E501
from python_client.models.loan_payoff_details import LoanPayoffDetails  # noqa: F401,E501
from python_client.models.money import Money  # noqa: F401,E501
from python_client.models.reward_balance import RewardBalance  # noqa: F401,E501


class DataExtractsAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_cash': 'Money',
        'include_in_net_worth': 'bool',
        'money_market_balance': 'Money',
        'enrollment_date': 'str',
        'estimated_date': 'str',
        'memo': 'str',
        'guarantor': 'str',
        'interest_paid_last_year': 'Money',
        'last_updated': 'str',
        'balance': 'Money',
        'home_insurance_type': 'str',
        'id': 'int',
        'cash': 'Money',
        'total_credit_line': 'Money',
        'provider_name': 'str',
        'valuation_type': 'str',
        'margin_balance': 'Money',
        'apr': 'float',
        'available_credit': 'Money',
        'current_balance': 'Money',
        'is_manual': 'bool',
        'escrow_balance': 'Money',
        'next_level': 'str',
        'classification': 'str',
        'loan_payoff_amount': 'Money',
        'interest_rate_type': 'str',
        'loan_pay_by_date': 'str',
        'face_amount': 'Money',
        'policy_from_date': 'str',
        'premium_payment_term': 'str',
        'policy_term': 'str',
        'repayment_plan_type': 'str',
        'available_balance': 'Money',
        'account_status': 'str',
        'life_insurance_type': 'str',
        'premium': 'Money',
        'aggregation_source': 'str',
        'is_deleted': 'bool',
        'over_draft_limit': 'Money',
        'nickname': 'str',
        'term': 'str',
        'interest_rate': 'float',
        'death_benefit': 'Money',
        'address': 'AccountAddress',
        'cash_value': 'Money',
        '_401k_loan': 'Money',
        'home_value': 'Money',
        'account_number': 'str',
        'created_date': 'str',
        'interest_paid_ytd': 'Money',
        'provider_account_id': 'int',
        'collateral': 'str',
        'dataset': 'list[AccountDataset]',
        'running_balance': 'Money',
        'due_date': 'str',
        'frequency': 'str',
        'maturity_amount': 'Money',
        'associated_provider_account_id': 'list[int]',
        'is_asset': 'bool',
        'principal_balance': 'Money',
        'total_cash_limit': 'Money',
        'maturity_date': 'str',
        'minimum_amount_due': 'Money',
        'annual_percentage_yield': 'float',
        'account_type': 'str',
        'origination_date': 'str',
        'total_vested_balance': 'Money',
        'reward_balance': 'list[RewardBalance]',
        'source_account_status': 'str',
        'policy_effective_date': 'str',
        'total_unvested_balance': 'Money',
        'annuity_balance': 'Money',
        'account_name': 'str',
        'total_credit_limit': 'Money',
        'policy_status': 'str',
        'short_balance': 'Money',
        'lender': 'str',
        'last_employee_contribution_amount': 'Money',
        'provider_id': 'str',
        'last_payment_date': 'str',
        'primary_reward_unit': 'str',
        'last_payment_amount': 'Money',
        'remaining_balance': 'Money',
        'user_classification': 'str',
        'bank_transfer_code': 'list[BankTransferCode]',
        'expiration_date': 'str',
        'coverage': 'list[Coverage]',
        'loan_pay_off_details': 'LoanPayoffDetails',
        'cash_apr': 'float',
        'displayed_name': 'str',
        'amount_due': 'Money',
        'current_level': 'str',
        'original_loan_amount': 'Money',
        'policy_to_date': 'str',
        'container': 'str',
        'last_employee_contribution_date': 'str',
        'last_payment': 'Money',
        'recurring_payment': 'Money'
    }

    attribute_map = {
        'available_cash': 'availableCash',
        'include_in_net_worth': 'includeInNetWorth',
        'money_market_balance': 'moneyMarketBalance',
        'enrollment_date': 'enrollmentDate',
        'estimated_date': 'estimatedDate',
        'memo': 'memo',
        'guarantor': 'guarantor',
        'interest_paid_last_year': 'interestPaidLastYear',
        'last_updated': 'lastUpdated',
        'balance': 'balance',
        'home_insurance_type': 'homeInsuranceType',
        'id': 'id',
        'cash': 'cash',
        'total_credit_line': 'totalCreditLine',
        'provider_name': 'providerName',
        'valuation_type': 'valuationType',
        'margin_balance': 'marginBalance',
        'apr': 'apr',
        'available_credit': 'availableCredit',
        'current_balance': 'currentBalance',
        'is_manual': 'isManual',
        'escrow_balance': 'escrowBalance',
        'next_level': 'nextLevel',
        'classification': 'classification',
        'loan_payoff_amount': 'loanPayoffAmount',
        'interest_rate_type': 'interestRateType',
        'loan_pay_by_date': 'loanPayByDate',
        'face_amount': 'faceAmount',
        'policy_from_date': 'policyFromDate',
        'premium_payment_term': 'premiumPaymentTerm',
        'policy_term': 'policyTerm',
        'repayment_plan_type': 'repaymentPlanType',
        'available_balance': 'availableBalance',
        'account_status': 'accountStatus',
        'life_insurance_type': 'lifeInsuranceType',
        'premium': 'premium',
        'aggregation_source': 'aggregationSource',
        'is_deleted': 'isDeleted',
        'over_draft_limit': 'overDraftLimit',
        'nickname': 'nickname',
        'term': 'term',
        'interest_rate': 'interestRate',
        'death_benefit': 'deathBenefit',
        'address': 'address',
        'cash_value': 'cashValue',
        '_401k_loan': '401kLoan',
        'home_value': 'homeValue',
        'account_number': 'accountNumber',
        'created_date': 'createdDate',
        'interest_paid_ytd': 'interestPaidYTD',
        'provider_account_id': 'providerAccountId',
        'collateral': 'collateral',
        'dataset': 'dataset',
        'running_balance': 'runningBalance',
        'due_date': 'dueDate',
        'frequency': 'frequency',
        'maturity_amount': 'maturityAmount',
        'associated_provider_account_id': 'associatedProviderAccountId',
        'is_asset': 'isAsset',
        'principal_balance': 'principalBalance',
        'total_cash_limit': 'totalCashLimit',
        'maturity_date': 'maturityDate',
        'minimum_amount_due': 'minimumAmountDue',
        'annual_percentage_yield': 'annualPercentageYield',
        'account_type': 'accountType',
        'origination_date': 'originationDate',
        'total_vested_balance': 'totalVestedBalance',
        'reward_balance': 'rewardBalance',
        'source_account_status': 'sourceAccountStatus',
        'policy_effective_date': 'policyEffectiveDate',
        'total_unvested_balance': 'totalUnvestedBalance',
        'annuity_balance': 'annuityBalance',
        'account_name': 'accountName',
        'total_credit_limit': 'totalCreditLimit',
        'policy_status': 'policyStatus',
        'short_balance': 'shortBalance',
        'lender': 'lender',
        'last_employee_contribution_amount': 'lastEmployeeContributionAmount',
        'provider_id': 'providerId',
        'last_payment_date': 'lastPaymentDate',
        'primary_reward_unit': 'primaryRewardUnit',
        'last_payment_amount': 'lastPaymentAmount',
        'remaining_balance': 'remainingBalance',
        'user_classification': 'userClassification',
        'bank_transfer_code': 'bankTransferCode',
        'expiration_date': 'expirationDate',
        'coverage': 'coverage',
        'loan_pay_off_details': 'loanPayOffDetails',
        'cash_apr': 'cashApr',
        'displayed_name': 'displayedName',
        'amount_due': 'amountDue',
        'current_level': 'currentLevel',
        'original_loan_amount': 'originalLoanAmount',
        'policy_to_date': 'policyToDate',
        'container': 'CONTAINER',
        'last_employee_contribution_date': 'lastEmployeeContributionDate',
        'last_payment': 'lastPayment',
        'recurring_payment': 'recurringPayment'
    }

    def __init__(self, available_cash=None, include_in_net_worth=None, money_market_balance=None, enrollment_date=None, estimated_date=None, memo=None, guarantor=None, interest_paid_last_year=None, last_updated=None, balance=None, home_insurance_type=None, id=None, cash=None, total_credit_line=None, provider_name=None, valuation_type=None, margin_balance=None, apr=None, available_credit=None, current_balance=None, is_manual=None, escrow_balance=None, next_level=None, classification=None, loan_payoff_amount=None, interest_rate_type=None, loan_pay_by_date=None, face_amount=None, policy_from_date=None, premium_payment_term=None, policy_term=None, repayment_plan_type=None, available_balance=None, account_status=None, life_insurance_type=None, premium=None, aggregation_source=None, is_deleted=None, over_draft_limit=None, nickname=None, term=None, interest_rate=None, death_benefit=None, address=None, cash_value=None, _401k_loan=None, home_value=None, account_number=None, created_date=None, interest_paid_ytd=None, provider_account_id=None, collateral=None, dataset=None, running_balance=None, due_date=None, frequency=None, maturity_amount=None, associated_provider_account_id=None, is_asset=None, principal_balance=None, total_cash_limit=None, maturity_date=None, minimum_amount_due=None, annual_percentage_yield=None, account_type=None, origination_date=None, total_vested_balance=None, reward_balance=None, source_account_status=None, policy_effective_date=None, total_unvested_balance=None, annuity_balance=None, account_name=None, total_credit_limit=None, policy_status=None, short_balance=None, lender=None, last_employee_contribution_amount=None, provider_id=None, last_payment_date=None, primary_reward_unit=None, last_payment_amount=None, remaining_balance=None, user_classification=None, bank_transfer_code=None, expiration_date=None, coverage=None, loan_pay_off_details=None, cash_apr=None, displayed_name=None, amount_due=None, current_level=None, original_loan_amount=None, policy_to_date=None, container=None, last_employee_contribution_date=None, last_payment=None, recurring_payment=None):  # noqa: E501
        """DataExtractsAccount - a model defined in Swagger"""  # noqa: E501

        self._available_cash = None
        self._include_in_net_worth = None
        self._money_market_balance = None
        self._enrollment_date = None
        self._estimated_date = None
        self._memo = None
        self._guarantor = None
        self._interest_paid_last_year = None
        self._last_updated = None
        self._balance = None
        self._home_insurance_type = None
        self._id = None
        self._cash = None
        self._total_credit_line = None
        self._provider_name = None
        self._valuation_type = None
        self._margin_balance = None
        self._apr = None
        self._available_credit = None
        self._current_balance = None
        self._is_manual = None
        self._escrow_balance = None
        self._next_level = None
        self._classification = None
        self._loan_payoff_amount = None
        self._interest_rate_type = None
        self._loan_pay_by_date = None
        self._face_amount = None
        self._policy_from_date = None
        self._premium_payment_term = None
        self._policy_term = None
        self._repayment_plan_type = None
        self._available_balance = None
        self._account_status = None
        self._life_insurance_type = None
        self._premium = None
        self._aggregation_source = None
        self._is_deleted = None
        self._over_draft_limit = None
        self._nickname = None
        self._term = None
        self._interest_rate = None
        self._death_benefit = None
        self._address = None
        self._cash_value = None
        self.__401k_loan = None
        self._home_value = None
        self._account_number = None
        self._created_date = None
        self._interest_paid_ytd = None
        self._provider_account_id = None
        self._collateral = None
        self._dataset = None
        self._running_balance = None
        self._due_date = None
        self._frequency = None
        self._maturity_amount = None
        self._associated_provider_account_id = None
        self._is_asset = None
        self._principal_balance = None
        self._total_cash_limit = None
        self._maturity_date = None
        self._minimum_amount_due = None
        self._annual_percentage_yield = None
        self._account_type = None
        self._origination_date = None
        self._total_vested_balance = None
        self._reward_balance = None
        self._source_account_status = None
        self._policy_effective_date = None
        self._total_unvested_balance = None
        self._annuity_balance = None
        self._account_name = None
        self._total_credit_limit = None
        self._policy_status = None
        self._short_balance = None
        self._lender = None
        self._last_employee_contribution_amount = None
        self._provider_id = None
        self._last_payment_date = None
        self._primary_reward_unit = None
        self._last_payment_amount = None
        self._remaining_balance = None
        self._user_classification = None
        self._bank_transfer_code = None
        self._expiration_date = None
        self._coverage = None
        self._loan_pay_off_details = None
        self._cash_apr = None
        self._displayed_name = None
        self._amount_due = None
        self._current_level = None
        self._original_loan_amount = None
        self._policy_to_date = None
        self._container = None
        self._last_employee_contribution_date = None
        self._last_payment = None
        self._recurring_payment = None
        self.discriminator = None

        if available_cash is not None:
            self.available_cash = available_cash
        if include_in_net_worth is not None:
            self.include_in_net_worth = include_in_net_worth
        if money_market_balance is not None:
            self.money_market_balance = money_market_balance
        if enrollment_date is not None:
            self.enrollment_date = enrollment_date
        if estimated_date is not None:
            self.estimated_date = estimated_date
        if memo is not None:
            self.memo = memo
        if guarantor is not None:
            self.guarantor = guarantor
        if interest_paid_last_year is not None:
            self.interest_paid_last_year = interest_paid_last_year
        if last_updated is not None:
            self.last_updated = last_updated
        if balance is not None:
            self.balance = balance
        if home_insurance_type is not None:
            self.home_insurance_type = home_insurance_type
        if id is not None:
            self.id = id
        if cash is not None:
            self.cash = cash
        if total_credit_line is not None:
            self.total_credit_line = total_credit_line
        if provider_name is not None:
            self.provider_name = provider_name
        if valuation_type is not None:
            self.valuation_type = valuation_type
        if margin_balance is not None:
            self.margin_balance = margin_balance
        if apr is not None:
            self.apr = apr
        if available_credit is not None:
            self.available_credit = available_credit
        if current_balance is not None:
            self.current_balance = current_balance
        if is_manual is not None:
            self.is_manual = is_manual
        if escrow_balance is not None:
            self.escrow_balance = escrow_balance
        if next_level is not None:
            self.next_level = next_level
        if classification is not None:
            self.classification = classification
        if loan_payoff_amount is not None:
            self.loan_payoff_amount = loan_payoff_amount
        if interest_rate_type is not None:
            self.interest_rate_type = interest_rate_type
        if loan_pay_by_date is not None:
            self.loan_pay_by_date = loan_pay_by_date
        if face_amount is not None:
            self.face_amount = face_amount
        if policy_from_date is not None:
            self.policy_from_date = policy_from_date
        if premium_payment_term is not None:
            self.premium_payment_term = premium_payment_term
        if policy_term is not None:
            self.policy_term = policy_term
        if repayment_plan_type is not None:
            self.repayment_plan_type = repayment_plan_type
        if available_balance is not None:
            self.available_balance = available_balance
        if account_status is not None:
            self.account_status = account_status
        if life_insurance_type is not None:
            self.life_insurance_type = life_insurance_type
        if premium is not None:
            self.premium = premium
        if aggregation_source is not None:
            self.aggregation_source = aggregation_source
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if over_draft_limit is not None:
            self.over_draft_limit = over_draft_limit
        if nickname is not None:
            self.nickname = nickname
        if term is not None:
            self.term = term
        if interest_rate is not None:
            self.interest_rate = interest_rate
        if death_benefit is not None:
            self.death_benefit = death_benefit
        if address is not None:
            self.address = address
        if cash_value is not None:
            self.cash_value = cash_value
        if _401k_loan is not None:
            self._401k_loan = _401k_loan
        if home_value is not None:
            self.home_value = home_value
        if account_number is not None:
            self.account_number = account_number
        if created_date is not None:
            self.created_date = created_date
        if interest_paid_ytd is not None:
            self.interest_paid_ytd = interest_paid_ytd
        if provider_account_id is not None:
            self.provider_account_id = provider_account_id
        if collateral is not None:
            self.collateral = collateral
        if dataset is not None:
            self.dataset = dataset
        if running_balance is not None:
            self.running_balance = running_balance
        if due_date is not None:
            self.due_date = due_date
        if frequency is not None:
            self.frequency = frequency
        if maturity_amount is not None:
            self.maturity_amount = maturity_amount
        if associated_provider_account_id is not None:
            self.associated_provider_account_id = associated_provider_account_id
        if is_asset is not None:
            self.is_asset = is_asset
        if principal_balance is not None:
            self.principal_balance = principal_balance
        if total_cash_limit is not None:
            self.total_cash_limit = total_cash_limit
        if maturity_date is not None:
            self.maturity_date = maturity_date
        if minimum_amount_due is not None:
            self.minimum_amount_due = minimum_amount_due
        if annual_percentage_yield is not None:
            self.annual_percentage_yield = annual_percentage_yield
        if account_type is not None:
            self.account_type = account_type
        if origination_date is not None:
            self.origination_date = origination_date
        if total_vested_balance is not None:
            self.total_vested_balance = total_vested_balance
        if reward_balance is not None:
            self.reward_balance = reward_balance
        if source_account_status is not None:
            self.source_account_status = source_account_status
        if policy_effective_date is not None:
            self.policy_effective_date = policy_effective_date
        if total_unvested_balance is not None:
            self.total_unvested_balance = total_unvested_balance
        if annuity_balance is not None:
            self.annuity_balance = annuity_balance
        if account_name is not None:
            self.account_name = account_name
        if total_credit_limit is not None:
            self.total_credit_limit = total_credit_limit
        if policy_status is not None:
            self.policy_status = policy_status
        if short_balance is not None:
            self.short_balance = short_balance
        if lender is not None:
            self.lender = lender
        if last_employee_contribution_amount is not None:
            self.last_employee_contribution_amount = last_employee_contribution_amount
        if provider_id is not None:
            self.provider_id = provider_id
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        if primary_reward_unit is not None:
            self.primary_reward_unit = primary_reward_unit
        if last_payment_amount is not None:
            self.last_payment_amount = last_payment_amount
        if remaining_balance is not None:
            self.remaining_balance = remaining_balance
        if user_classification is not None:
            self.user_classification = user_classification
        if bank_transfer_code is not None:
            self.bank_transfer_code = bank_transfer_code
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if coverage is not None:
            self.coverage = coverage
        if loan_pay_off_details is not None:
            self.loan_pay_off_details = loan_pay_off_details
        if cash_apr is not None:
            self.cash_apr = cash_apr
        if displayed_name is not None:
            self.displayed_name = displayed_name
        if amount_due is not None:
            self.amount_due = amount_due
        if current_level is not None:
            self.current_level = current_level
        if original_loan_amount is not None:
            self.original_loan_amount = original_loan_amount
        if policy_to_date is not None:
            self.policy_to_date = policy_to_date
        if container is not None:
            self.container = container
        if last_employee_contribution_date is not None:
            self.last_employee_contribution_date = last_employee_contribution_date
        if last_payment is not None:
            self.last_payment = last_payment
        if recurring_payment is not None:
            self.recurring_payment = recurring_payment

    @property
    def available_cash(self):
        """Gets the available_cash of this DataExtractsAccount.  # noqa: E501

        The amount that is available for an ATM withdrawal, i.e., the cash available after deducting the amount that is already withdrawn from the total cash limit. (totalCashLimit-cashAdvance= availableCash)<br><b>Additional Details:</b> The available cash amount at the account-level can differ from the available cash at the statement-level, as the information in the aggregated card account data provides more up-to-date information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The available_cash of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._available_cash

    @available_cash.setter
    def available_cash(self, available_cash):
        """Sets the available_cash of this DataExtractsAccount.

        The amount that is available for an ATM withdrawal, i.e., the cash available after deducting the amount that is already withdrawn from the total cash limit. (totalCashLimit-cashAdvance= availableCash)<br><b>Additional Details:</b> The available cash amount at the account-level can differ from the available cash at the statement-level, as the information in the aggregated card account data provides more up-to-date information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param available_cash: The available_cash of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._available_cash = available_cash

    @property
    def include_in_net_worth(self):
        """Gets the include_in_net_worth of this DataExtractsAccount.  # noqa: E501

        Used to determine  whether an account to be considered in the networth calculation.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank,creditCard,loan,investment,insurance,realEstate,otherAssets,otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The include_in_net_worth of this DataExtractsAccount.  # noqa: E501
        :rtype: bool
        """
        return self._include_in_net_worth

    @include_in_net_worth.setter
    def include_in_net_worth(self, include_in_net_worth):
        """Sets the include_in_net_worth of this DataExtractsAccount.

        Used to determine  whether an account to be considered in the networth calculation.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank,creditCard,loan,investment,insurance,realEstate,otherAssets,otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param include_in_net_worth: The include_in_net_worth of this DataExtractsAccount.  # noqa: E501
        :type: bool
        """

        self._include_in_net_worth = include_in_net_worth

    @property
    def money_market_balance(self):
        """Gets the money_market_balance of this DataExtractsAccount.  # noqa: E501

        The amount in the money market fund or its equivalent such as bank deposit programs.<br><b>Note:</b> The money market balance field is only applicable to brokerage related accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The money_market_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._money_market_balance

    @money_market_balance.setter
    def money_market_balance(self, money_market_balance):
        """Sets the money_market_balance of this DataExtractsAccount.

        The amount in the money market fund or its equivalent such as bank deposit programs.<br><b>Note:</b> The money market balance field is only applicable to brokerage related accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param money_market_balance: The money_market_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._money_market_balance = money_market_balance

    @property
    def enrollment_date(self):
        """Gets the enrollment_date of this DataExtractsAccount.  # noqa: E501

        Date on which the user is enrolled on the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The enrollment_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_date

    @enrollment_date.setter
    def enrollment_date(self, enrollment_date):
        """Sets the enrollment_date of this DataExtractsAccount.

        Date on which the user is enrolled on the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param enrollment_date: The enrollment_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._enrollment_date = enrollment_date

    @property
    def estimated_date(self):
        """Gets the estimated_date of this DataExtractsAccount.  # noqa: E501

        The date on which the home value was estimated.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The estimated_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._estimated_date

    @estimated_date.setter
    def estimated_date(self, estimated_date):
        """Sets the estimated_date of this DataExtractsAccount.

        The date on which the home value was estimated.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param estimated_date: The estimated_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._estimated_date = estimated_date

    @property
    def memo(self):
        """Gets the memo of this DataExtractsAccount.  # noqa: E501

        The additional description or notes given by the user.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The memo of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this DataExtractsAccount.

        The additional description or notes given by the user.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param memo: The memo of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def guarantor(self):
        """Gets the guarantor of this DataExtractsAccount.  # noqa: E501

        A nonprofit or state organization that works with lender, servicer, school, and the Department of Education to help successfully repay Federal Family Education Loan Program (FFELP) loans. If FFELP student loans default, the guarantor takes ownership of them.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The guarantor of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._guarantor

    @guarantor.setter
    def guarantor(self, guarantor):
        """Sets the guarantor of this DataExtractsAccount.

        A nonprofit or state organization that works with lender, servicer, school, and the Department of Education to help successfully repay Federal Family Education Loan Program (FFELP) loans. If FFELP student loans default, the guarantor takes ownership of them.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param guarantor: The guarantor of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._guarantor = guarantor

    @property
    def interest_paid_last_year(self):
        """Gets the interest_paid_last_year of this DataExtractsAccount.  # noqa: E501

        Interest paid in last calendar year.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The interest_paid_last_year of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._interest_paid_last_year

    @interest_paid_last_year.setter
    def interest_paid_last_year(self, interest_paid_last_year):
        """Sets the interest_paid_last_year of this DataExtractsAccount.

        Interest paid in last calendar year.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param interest_paid_last_year: The interest_paid_last_year of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._interest_paid_last_year = interest_paid_last_year

    @property
    def last_updated(self):
        """Gets the last_updated of this DataExtractsAccount.  # noqa: E501

        The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The last_updated of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this DataExtractsAccount.

        The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param last_updated: The last_updated of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def balance(self):
        """Gets the balance of this DataExtractsAccount.  # noqa: E501

        The total account value. <br><b>Additional Details:</b><br><b>Bank:</b> available balance or current balance.<br><b>Credit Card:</b> running Balance.<br><b>Investment:</b> The total balance of all the investment account, as it appears on the FI site.<br><b>Insurance:</b> CashValue or amountDue<br><b>Loan:</b> principalBalance<br><b>Bill:</b> amountDue<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, bill, otherAssets, otherLiabilities, realEstate<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this DataExtractsAccount.

        The total account value. <br><b>Additional Details:</b><br><b>Bank:</b> available balance or current balance.<br><b>Credit Card:</b> running Balance.<br><b>Investment:</b> The total balance of all the investment account, as it appears on the FI site.<br><b>Insurance:</b> CashValue or amountDue<br><b>Loan:</b> principalBalance<br><b>Bill:</b> amountDue<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, bill, otherAssets, otherLiabilities, realEstate<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param balance: The balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._balance = balance

    @property
    def home_insurance_type(self):
        """Gets the home_insurance_type of this DataExtractsAccount.  # noqa: E501

        Type of home insurance, like -<ul><li>HOME_OWNER</li><li>RENTAL</li><li>RENTER</li><li>etc..</li></ul><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The home_insurance_type of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._home_insurance_type

    @home_insurance_type.setter
    def home_insurance_type(self, home_insurance_type):
        """Sets the home_insurance_type of this DataExtractsAccount.

        Type of home insurance, like -<ul><li>HOME_OWNER</li><li>RENTAL</li><li>RENTER</li><li>etc..</li></ul><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param home_insurance_type: The home_insurance_type of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["HOME_OWNER", "RENTAL", "RENTER", "UNKNOWN", "OTHER"]  # noqa: E501
        if home_insurance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `home_insurance_type` ({0}), must be one of {1}"  # noqa: E501
                .format(home_insurance_type, allowed_values)
            )

        self._home_insurance_type = home_insurance_type

    @property
    def id(self):
        """Gets the id of this DataExtractsAccount.  # noqa: E501

        The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>GET investmentOptions</li><li>GET accounts/historicalBalances</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The id of this DataExtractsAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataExtractsAccount.

        The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>GET investmentOptions</li><li>GET accounts/historicalBalances</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param id: The id of this DataExtractsAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cash(self):
        """Gets the cash of this DataExtractsAccount.  # noqa: E501

        The amount that is available for immediate withdrawal or the total amount available to purchase securities in a brokerage or investment account.<br><b>Note:</b> The cash balance field is only applicable to brokerage related accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The cash of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._cash

    @cash.setter
    def cash(self, cash):
        """Sets the cash of this DataExtractsAccount.

        The amount that is available for immediate withdrawal or the total amount available to purchase securities in a brokerage or investment account.<br><b>Note:</b> The cash balance field is only applicable to brokerage related accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param cash: The cash of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._cash = cash

    @property
    def total_credit_line(self):
        """Gets the total_credit_line of this DataExtractsAccount.  # noqa: E501

        Total credit line is the amount of money that can be charged to a credit card. If credit limit of $5,000 is issued on a credit card, the total charges on the card cannot exceed this amount.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The total_credit_line of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._total_credit_line

    @total_credit_line.setter
    def total_credit_line(self, total_credit_line):
        """Sets the total_credit_line of this DataExtractsAccount.

        Total credit line is the amount of money that can be charged to a credit card. If credit limit of $5,000 is issued on a credit card, the total charges on the card cannot exceed this amount.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param total_credit_line: The total_credit_line of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._total_credit_line = total_credit_line

    @property
    def provider_name(self):
        """Gets the provider_name of this DataExtractsAccount.  # noqa: E501

        Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The provider_name of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this DataExtractsAccount.

        Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param provider_name: The provider_name of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._provider_name = provider_name

    @property
    def valuation_type(self):
        """Gets the valuation_type of this DataExtractsAccount.  # noqa: E501

        The valuation type indicates whether the home value is calculated either manually or by Yodlee Partners.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The valuation_type of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._valuation_type

    @valuation_type.setter
    def valuation_type(self, valuation_type):
        """Sets the valuation_type of this DataExtractsAccount.

        The valuation type indicates whether the home value is calculated either manually or by Yodlee Partners.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param valuation_type: The valuation_type of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["SYSTEM", "MANUAL"]  # noqa: E501
        if valuation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `valuation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(valuation_type, allowed_values)
            )

        self._valuation_type = valuation_type

    @property
    def margin_balance(self):
        """Gets the margin_balance of this DataExtractsAccount.  # noqa: E501

        The amount of borrowed funds used to purchase securities.<br><b>Note</b>: Margin balance is displayed only if the brokerage account is approved for margin. The margin balance field is only applicable to brokerage related accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The margin_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._margin_balance

    @margin_balance.setter
    def margin_balance(self, margin_balance):
        """Sets the margin_balance of this DataExtractsAccount.

        The amount of borrowed funds used to purchase securities.<br><b>Note</b>: Margin balance is displayed only if the brokerage account is approved for margin. The margin balance field is only applicable to brokerage related accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param margin_balance: The margin_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._margin_balance = margin_balance

    @property
    def apr(self):
        """Gets the apr of this DataExtractsAccount.  # noqa: E501

        The annual percentage rate (APR) is the yearly rate of interest on the credit card account.<br><b>Additional Details:</b> The yearly percentage rate charged when a balance is held on a credit card. This rate of interest is applied every month on the outstanding credit card balance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The apr of this DataExtractsAccount.  # noqa: E501
        :rtype: float
        """
        return self._apr

    @apr.setter
    def apr(self, apr):
        """Sets the apr of this DataExtractsAccount.

        The annual percentage rate (APR) is the yearly rate of interest on the credit card account.<br><b>Additional Details:</b> The yearly percentage rate charged when a balance is held on a credit card. This rate of interest is applied every month on the outstanding credit card balance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param apr: The apr of this DataExtractsAccount.  # noqa: E501
        :type: float
        """

        self._apr = apr

    @property
    def available_credit(self):
        """Gets the available_credit of this DataExtractsAccount.  # noqa: E501

        <br><b>Credit Card:</b> Amount that is available to spend on the credit card. It is usually the Total credit line- Running balance- pending charges. <br><b>Loan:</b> The unused portion of  line of credit, on a revolving loan (such as a home-equity line of credit).<br><b>Additional Details:</b><br><b>Note:</b> The available credit amount at the account-level can differ from the available credit field at the statement-level, as the information in the aggregated card account data provides more up-to-date information.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The available_credit of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._available_credit

    @available_credit.setter
    def available_credit(self, available_credit):
        """Sets the available_credit of this DataExtractsAccount.

        <br><b>Credit Card:</b> Amount that is available to spend on the credit card. It is usually the Total credit line- Running balance- pending charges. <br><b>Loan:</b> The unused portion of  line of credit, on a revolving loan (such as a home-equity line of credit).<br><b>Additional Details:</b><br><b>Note:</b> The available credit amount at the account-level can differ from the available credit field at the statement-level, as the information in the aggregated card account data provides more up-to-date information.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param available_credit: The available_credit of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._available_credit = available_credit

    @property
    def current_balance(self):
        """Gets the current_balance of this DataExtractsAccount.  # noqa: E501

        The balance in the account that is available at the beginning of the business day; it is equal to the ledger balance of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The current_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this DataExtractsAccount.

        The balance in the account that is available at the beginning of the business day; it is equal to the ledger balance of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param current_balance: The current_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._current_balance = current_balance

    @property
    def is_manual(self):
        """Gets the is_manual of this DataExtractsAccount.  # noqa: E501

        Indicates if an account is aggregated from a site or it is a manual account i.e. account information manually provided by the user.<br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The is_manual of this DataExtractsAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this DataExtractsAccount.

        Indicates if an account is aggregated from a site or it is a manual account i.e. account information manually provided by the user.<br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param is_manual: The is_manual of this DataExtractsAccount.  # noqa: E501
        :type: bool
        """

        self._is_manual = is_manual

    @property
    def escrow_balance(self):
        """Gets the escrow_balance of this DataExtractsAccount.  # noqa: E501

        The amount a mortgage company holds to pay a consumer's non-mortgage related expenses like insurance and property taxes. <br><b>Additional Details:</b><br><b>Note:</b> The escrow balance field is only applicable to the mortgage account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The escrow_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._escrow_balance

    @escrow_balance.setter
    def escrow_balance(self, escrow_balance):
        """Sets the escrow_balance of this DataExtractsAccount.

        The amount a mortgage company holds to pay a consumer's non-mortgage related expenses like insurance and property taxes. <br><b>Additional Details:</b><br><b>Note:</b> The escrow balance field is only applicable to the mortgage account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param escrow_balance: The escrow_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._escrow_balance = escrow_balance

    @property
    def next_level(self):
        """Gets the next_level of this DataExtractsAccount.  # noqa: E501

        The eligible next level of the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The next_level of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._next_level

    @next_level.setter
    def next_level(self, next_level):
        """Sets the next_level of this DataExtractsAccount.

        The eligible next level of the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param next_level: The next_level of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._next_level = next_level

    @property
    def classification(self):
        """Gets the classification of this DataExtractsAccount.  # noqa: E501

        The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, reward, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The classification of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this DataExtractsAccount.

        The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, reward, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param classification: The classification of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["OTHER", "PERSONAL", "CORPORATE", "SMALL_BUSINESS", "TRUST", "ADD_ON_CARD", "VIRTUAL_CARD"]  # noqa: E501
        if classification not in allowed_values:
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"  # noqa: E501
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def loan_payoff_amount(self):
        """Gets the loan_payoff_amount of this DataExtractsAccount.  # noqa: E501

        The amount to be paid to close the loan account, i.e., the total amount required to meet a borrower's obligation on a loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The loan_payoff_amount of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._loan_payoff_amount

    @loan_payoff_amount.setter
    def loan_payoff_amount(self, loan_payoff_amount):
        """Sets the loan_payoff_amount of this DataExtractsAccount.

        The amount to be paid to close the loan account, i.e., the total amount required to meet a borrower's obligation on a loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param loan_payoff_amount: The loan_payoff_amount of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._loan_payoff_amount = loan_payoff_amount

    @property
    def interest_rate_type(self):
        """Gets the interest_rate_type of this DataExtractsAccount.  # noqa: E501

        The type of the interest rate, for example, fixed or variable.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The interest_rate_type of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._interest_rate_type

    @interest_rate_type.setter
    def interest_rate_type(self, interest_rate_type):
        """Sets the interest_rate_type of this DataExtractsAccount.

        The type of the interest rate, for example, fixed or variable.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param interest_rate_type: The interest_rate_type of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["FIXED", "VARIABLE", "UNKNOWN", "OTHER"]  # noqa: E501
        if interest_rate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interest_rate_type` ({0}), must be one of {1}"  # noqa: E501
                .format(interest_rate_type, allowed_values)
            )

        self._interest_rate_type = interest_rate_type

    @property
    def loan_pay_by_date(self):
        """Gets the loan_pay_by_date of this DataExtractsAccount.  # noqa: E501

        The date by which the payoff amount should be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The loan_pay_by_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._loan_pay_by_date

    @loan_pay_by_date.setter
    def loan_pay_by_date(self, loan_pay_by_date):
        """Sets the loan_pay_by_date of this DataExtractsAccount.

        The date by which the payoff amount should be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param loan_pay_by_date: The loan_pay_by_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._loan_pay_by_date = loan_pay_by_date

    @property
    def face_amount(self):
        """Gets the face_amount of this DataExtractsAccount.  # noqa: E501

        The amount stated on the face of a consumer's policy that will be paid in the event of his or her death or any other event as stated in the insurance policy. The face amount is also referred to as the sum insured or maturity value in India.<br><b>Note:</b> The face amount field is applicable only to life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The face_amount of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._face_amount

    @face_amount.setter
    def face_amount(self, face_amount):
        """Sets the face_amount of this DataExtractsAccount.

        The amount stated on the face of a consumer's policy that will be paid in the event of his or her death or any other event as stated in the insurance policy. The face amount is also referred to as the sum insured or maturity value in India.<br><b>Note:</b> The face amount field is applicable only to life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param face_amount: The face_amount of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._face_amount = face_amount

    @property
    def policy_from_date(self):
        """Gets the policy_from_date of this DataExtractsAccount.  # noqa: E501

        The date the insurance policy began.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The policy_from_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._policy_from_date

    @policy_from_date.setter
    def policy_from_date(self, policy_from_date):
        """Sets the policy_from_date of this DataExtractsAccount.

        The date the insurance policy began.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param policy_from_date: The policy_from_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._policy_from_date = policy_from_date

    @property
    def premium_payment_term(self):
        """Gets the premium_payment_term of this DataExtractsAccount.  # noqa: E501

        The number of years for which premium payments have to be made in a policy.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The premium_payment_term of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._premium_payment_term

    @premium_payment_term.setter
    def premium_payment_term(self, premium_payment_term):
        """Sets the premium_payment_term of this DataExtractsAccount.

        The number of years for which premium payments have to be made in a policy.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param premium_payment_term: The premium_payment_term of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._premium_payment_term = premium_payment_term

    @property
    def policy_term(self):
        """Gets the policy_term of this DataExtractsAccount.  # noqa: E501

        The duration for which the policy is valid or in effect. For example, one year, five years, etc.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The policy_term of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._policy_term

    @policy_term.setter
    def policy_term(self, policy_term):
        """Sets the policy_term of this DataExtractsAccount.

        The duration for which the policy is valid or in effect. For example, one year, five years, etc.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param policy_term: The policy_term of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._policy_term = policy_term

    @property
    def repayment_plan_type(self):
        """Gets the repayment_plan_type of this DataExtractsAccount.  # noqa: E501

        The type of repayment plan that the borrower prefers to repay the loan. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :return: The repayment_plan_type of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._repayment_plan_type

    @repayment_plan_type.setter
    def repayment_plan_type(self, repayment_plan_type):
        """Sets the repayment_plan_type of this DataExtractsAccount.

        The type of repayment plan that the borrower prefers to repay the loan. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :param repayment_plan_type: The repayment_plan_type of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["STANDARD", "GRADUATED", "EXTENDED", "INCOME_BASED", "INCOME_CONTINGENT", "INCOME_SENSITIVE", "PAY_AS_YOU_EARN", "REVISED_PAY_AS_YOU_EARN"]  # noqa: E501
        if repayment_plan_type not in allowed_values:
            raise ValueError(
                "Invalid value for `repayment_plan_type` ({0}), must be one of {1}"  # noqa: E501
                .format(repayment_plan_type, allowed_values)
            )

        self._repayment_plan_type = repayment_plan_type

    @property
    def available_balance(self):
        """Gets the available_balance of this DataExtractsAccount.  # noqa: E501

        The balance in the account that is available for spending. For checking accounts with overdraft, available balance may include overdraft amount, if end site adds overdraft balance to available balance.<br><b>Applicable containers</b>: bank, investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The available_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._available_balance

    @available_balance.setter
    def available_balance(self, available_balance):
        """Sets the available_balance of this DataExtractsAccount.

        The balance in the account that is available for spending. For checking accounts with overdraft, available balance may include overdraft amount, if end site adds overdraft balance to available balance.<br><b>Applicable containers</b>: bank, investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param available_balance: The available_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._available_balance = available_balance

    @property
    def account_status(self):
        """Gets the account_status of this DataExtractsAccount.  # noqa: E501

        The status of the account that is updated by the consumer through an application or an API. Valid Values: AccountStatus<br><b>Additional Details:</b><br><b>ACTIVE:</b> All the added manual and aggregated accounts status will be made \"ACTIVE\" by default. <br><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED<br><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services<br><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The account_status of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_status

    @account_status.setter
    def account_status(self, account_status):
        """Sets the account_status of this DataExtractsAccount.

        The status of the account that is updated by the consumer through an application or an API. Valid Values: AccountStatus<br><b>Additional Details:</b><br><b>ACTIVE:</b> All the added manual and aggregated accounts status will be made \"ACTIVE\" by default. <br><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED<br><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services<br><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param account_status: The account_status of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "TO_BE_CLOSED", "CLOSED", "DELETED"]  # noqa: E501
        if account_status not in allowed_values:
            raise ValueError(
                "Invalid value for `account_status` ({0}), must be one of {1}"  # noqa: E501
                .format(account_status, allowed_values)
            )

        self._account_status = account_status

    @property
    def life_insurance_type(self):
        """Gets the life_insurance_type of this DataExtractsAccount.  # noqa: E501

        Type of life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The life_insurance_type of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._life_insurance_type

    @life_insurance_type.setter
    def life_insurance_type(self, life_insurance_type):
        """Sets the life_insurance_type of this DataExtractsAccount.

        Type of life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param life_insurance_type: The life_insurance_type of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["OTHER", "TERM_LIFE_INSURANCE", "UNIVERSAL_LIFE_INSURANCE", "WHOLE_LIFE_INSURANCE", "VARIABLE_LIFE_INSURANCE", "ULIP", "ENDOWMENT"]  # noqa: E501
        if life_insurance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `life_insurance_type` ({0}), must be one of {1}"  # noqa: E501
                .format(life_insurance_type, allowed_values)
            )

        self._life_insurance_type = life_insurance_type

    @property
    def premium(self):
        """Gets the premium of this DataExtractsAccount.  # noqa: E501

        The financial cost that the policyholder pays to the insurance company to obtain an insurance cover.The premium is paid as a lump sum or in installments during the duration of the policy.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The premium of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """Sets the premium of this DataExtractsAccount.

        The financial cost that the policyholder pays to the insurance company to obtain an insurance cover.The premium is paid as a lump sum or in installments during the duration of the policy.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param premium: The premium of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._premium = premium

    @property
    def aggregation_source(self):
        """Gets the aggregation_source of this DataExtractsAccount.  # noqa: E501

        The source through which the account(s) are added in the system.<br><b>Valid Values</b>: SYSTEM, USER<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The aggregation_source of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_source

    @aggregation_source.setter
    def aggregation_source(self, aggregation_source):
        """Sets the aggregation_source of this DataExtractsAccount.

        The source through which the account(s) are added in the system.<br><b>Valid Values</b>: SYSTEM, USER<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param aggregation_source: The aggregation_source of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if aggregation_source not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_source` ({0}), must be one of {1}"  # noqa: E501
                .format(aggregation_source, allowed_values)
            )

        self._aggregation_source = aggregation_source

    @property
    def is_deleted(self):
        """Gets the is_deleted of this DataExtractsAccount.  # noqa: E501

        Indicates if the account is marked as deleted.<b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The is_deleted of this DataExtractsAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this DataExtractsAccount.

        Indicates if the account is marked as deleted.<b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param is_deleted: The is_deleted of this DataExtractsAccount.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def over_draft_limit(self):
        """Gets the over_draft_limit of this DataExtractsAccount.  # noqa: E501

        The overdraft limit for the account.<br><b>Note:</b> The overdraft limit is provided only for AUS, INDIA, UK, NZ locales.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The over_draft_limit of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._over_draft_limit

    @over_draft_limit.setter
    def over_draft_limit(self, over_draft_limit):
        """Sets the over_draft_limit of this DataExtractsAccount.

        The overdraft limit for the account.<br><b>Note:</b> The overdraft limit is provided only for AUS, INDIA, UK, NZ locales.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param over_draft_limit: The over_draft_limit of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._over_draft_limit = over_draft_limit

    @property
    def nickname(self):
        """Gets the nickname of this DataExtractsAccount.  # noqa: E501

        The nickname of the account as provided by the consumer to identify an account. The account nickname can be used instead of the account name.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The nickname of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this DataExtractsAccount.

        The nickname of the account as provided by the consumer to identify an account. The account nickname can be used instead of the account name.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param nickname: The nickname of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def term(self):
        """Gets the term of this DataExtractsAccount.  # noqa: E501

        The tenure for which the CD account is valid  or in case of loan, the number of years/months over which the loan amount  has to be repaid. <br><b>Additional Details:</b><br>  Bank: The Term field is only applicable for the account type CD.Loan: The period for which the loan agreement is in force. The period, before or at the end of which, the loan should either be repaid or renegotiated for another term.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The term of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this DataExtractsAccount.

        The tenure for which the CD account is valid  or in case of loan, the number of years/months over which the loan amount  has to be repaid. <br><b>Additional Details:</b><br>  Bank: The Term field is only applicable for the account type CD.Loan: The period for which the loan agreement is in force. The period, before or at the end of which, the loan should either be repaid or renegotiated for another term.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param term: The term of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._term = term

    @property
    def interest_rate(self):
        """Gets the interest_rate of this DataExtractsAccount.  # noqa: E501

        <br><b>Bank:</b> The interest rate offered by a FI to its depositors on a bank account.<br><b>Loan:</b> Interest rate applied on the loan.<br><b>Additional Details:</b><br><b>Note:</b> The Interest Rate field is only applicable for the following account types: savings, checking, money market, and certificate of deposit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The interest_rate of this DataExtractsAccount.  # noqa: E501
        :rtype: float
        """
        return self._interest_rate

    @interest_rate.setter
    def interest_rate(self, interest_rate):
        """Sets the interest_rate of this DataExtractsAccount.

        <br><b>Bank:</b> The interest rate offered by a FI to its depositors on a bank account.<br><b>Loan:</b> Interest rate applied on the loan.<br><b>Additional Details:</b><br><b>Note:</b> The Interest Rate field is only applicable for the following account types: savings, checking, money market, and certificate of deposit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param interest_rate: The interest_rate of this DataExtractsAccount.  # noqa: E501
        :type: float
        """

        self._interest_rate = interest_rate

    @property
    def death_benefit(self):
        """Gets the death_benefit of this DataExtractsAccount.  # noqa: E501

        The death benefit amount on a life insurance policy and annuity. It is usually equal to the face amount of the policy, but sometimes can vary for a whole life and universal life insurance policies.<br><b>Note:</b> The death benefit amount field is applicable only to annuities and life insurance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The death_benefit of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._death_benefit

    @death_benefit.setter
    def death_benefit(self, death_benefit):
        """Sets the death_benefit of this DataExtractsAccount.

        The death benefit amount on a life insurance policy and annuity. It is usually equal to the face amount of the policy, but sometimes can vary for a whole life and universal life insurance policies.<br><b>Note:</b> The death benefit amount field is applicable only to annuities and life insurance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param death_benefit: The death_benefit of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._death_benefit = death_benefit

    @property
    def address(self):
        """Gets the address of this DataExtractsAccount.  # noqa: E501

        The home address of the real estate account. The address entity for home address consists of state, zip and city only<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The address of this DataExtractsAccount.  # noqa: E501
        :rtype: AccountAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this DataExtractsAccount.

        The home address of the real estate account. The address entity for home address consists of state, zip and city only<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param address: The address of this DataExtractsAccount.  # noqa: E501
        :type: AccountAddress
        """

        self._address = address

    @property
    def cash_value(self):
        """Gets the cash_value of this DataExtractsAccount.  # noqa: E501

        The amount of cash value available in the consumer's life insurance policy account - except for term insurance policy - for withdrawals, loans, etc. This field is also used to capture the cash value on the home insurance policy.It is the standard that the insurance company generally prefer to reimburse the policyholder for his or her loss, i.e., the cash value is equal to the replacement cost minus depreciation. The cash value is also referred to as surrender value in India for life insurance policies.<br><b>Note:</b> The cash value field is applicable to all types of life insurance (except for term life) and home insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The cash_value of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._cash_value

    @cash_value.setter
    def cash_value(self, cash_value):
        """Sets the cash_value of this DataExtractsAccount.

        The amount of cash value available in the consumer's life insurance policy account - except for term insurance policy - for withdrawals, loans, etc. This field is also used to capture the cash value on the home insurance policy.It is the standard that the insurance company generally prefer to reimburse the policyholder for his or her loss, i.e., the cash value is equal to the replacement cost minus depreciation. The cash value is also referred to as surrender value in India for life insurance policies.<br><b>Note:</b> The cash value field is applicable to all types of life insurance (except for term life) and home insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param cash_value: The cash_value of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._cash_value = cash_value

    @property
    def _401k_loan(self):
        """Gets the _401k_loan of this DataExtractsAccount.  # noqa: E501

        The amount borrowed from the 401k account.<br><b>Note</b>: The 401k loan field is only applicable to the 401k account type.<br><b>Applicable containers</b>: investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The _401k_loan of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self.__401k_loan

    @_401k_loan.setter
    def _401k_loan(self, _401k_loan):
        """Sets the _401k_loan of this DataExtractsAccount.

        The amount borrowed from the 401k account.<br><b>Note</b>: The 401k loan field is only applicable to the 401k account type.<br><b>Applicable containers</b>: investment<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param _401k_loan: The _401k_loan of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self.__401k_loan = _401k_loan

    @property
    def home_value(self):
        """Gets the home_value of this DataExtractsAccount.  # noqa: E501

        The home value of the real estate account.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The home_value of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._home_value

    @home_value.setter
    def home_value(self, home_value):
        """Sets the home_value of this DataExtractsAccount.

        The home value of the real estate account.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param home_value: The home_value of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._home_value = home_value

    @property
    def account_number(self):
        """Gets the account_number of this DataExtractsAccount.  # noqa: E501

        The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment/Bill</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The account_number of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this DataExtractsAccount.

        The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment/Bill</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param account_number: The account_number of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def created_date(self):
        """Gets the created_date of this DataExtractsAccount.  # noqa: E501

        The date on which the account is created in the Yodlee system.<br><b>Additional Details:</b> It is the date when the user links or aggregates the account(s) that are held with the provider to the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The created_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this DataExtractsAccount.

        The date on which the account is created in the Yodlee system.<br><b>Additional Details:</b> It is the date when the user links or aggregates the account(s) that are held with the provider to the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param created_date: The created_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def interest_paid_ytd(self):
        """Gets the interest_paid_ytd of this DataExtractsAccount.  # noqa: E501

        Interest paid from the start of the year to date.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The interest_paid_ytd of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._interest_paid_ytd

    @interest_paid_ytd.setter
    def interest_paid_ytd(self, interest_paid_ytd):
        """Sets the interest_paid_ytd of this DataExtractsAccount.

        Interest paid from the start of the year to date.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param interest_paid_ytd: The interest_paid_ytd of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._interest_paid_ytd = interest_paid_ytd

    @property
    def provider_account_id(self):
        """Gets the provider_account_id of this DataExtractsAccount.  # noqa: E501

        The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The provider_account_id of this DataExtractsAccount.  # noqa: E501
        :rtype: int
        """
        return self._provider_account_id

    @provider_account_id.setter
    def provider_account_id(self, provider_account_id):
        """Sets the provider_account_id of this DataExtractsAccount.

        The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param provider_account_id: The provider_account_id of this DataExtractsAccount.  # noqa: E501
        :type: int
        """

        self._provider_account_id = provider_account_id

    @property
    def collateral(self):
        """Gets the collateral of this DataExtractsAccount.  # noqa: E501

        Property or possession offered to support a loan that can be seized on a default.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The collateral of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._collateral

    @collateral.setter
    def collateral(self, collateral):
        """Sets the collateral of this DataExtractsAccount.

        Property or possession offered to support a loan that can be seized on a default.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param collateral: The collateral of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._collateral = collateral

    @property
    def dataset(self):
        """Gets the dataset of this DataExtractsAccount.  # noqa: E501

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The dataset of this DataExtractsAccount.  # noqa: E501
        :rtype: list[AccountDataset]
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this DataExtractsAccount.

        Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param dataset: The dataset of this DataExtractsAccount.  # noqa: E501
        :type: list[AccountDataset]
        """

        self._dataset = dataset

    @property
    def running_balance(self):
        """Gets the running_balance of this DataExtractsAccount.  # noqa: E501

        The amount that is currently owed on the credit card account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The running_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._running_balance

    @running_balance.setter
    def running_balance(self, running_balance):
        """Sets the running_balance of this DataExtractsAccount.

        The amount that is currently owed on the credit card account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param running_balance: The running_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._running_balance = running_balance

    @property
    def due_date(self):
        """Gets the due_date of this DataExtractsAccount.  # noqa: E501

        The date on which the due amount has to be paid. <br><b>Additional Details:</b><br><b>Credit Card:</b> The monthly date by when the minimum payment is due to be paid on the credit card account. <br><b>Loan:</b> The date on or before which the due amount should be paid.<br><b>Note:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance, bill<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The due_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this DataExtractsAccount.

        The date on which the due amount has to be paid. <br><b>Additional Details:</b><br><b>Credit Card:</b> The monthly date by when the minimum payment is due to be paid on the credit card account. <br><b>Loan:</b> The date on or before which the due amount should be paid.<br><b>Note:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance, bill<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param due_date: The due_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._due_date = due_date

    @property
    def frequency(self):
        """Gets the frequency of this DataExtractsAccount.  # noqa: E501

        The frequency of the billing cycle of the account in case of card and bills. The frequency in which premiums are paid in an insurance policy such as monthly, quarterly, and annually. The frequency in which due amounts are paid in a loan  account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bill, creditCard, insurance, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The frequency of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this DataExtractsAccount.

        The frequency of the billing cycle of the account in case of card and bills. The frequency in which premiums are paid in an insurance policy such as monthly, quarterly, and annually. The frequency in which due amounts are paid in a loan  account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bill, creditCard, insurance, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param frequency: The frequency of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["DAILY", "ONE_TIME", "WEEKLY", "EVERY_2_WEEKS", "SEMI_MONTHLY", "MONTHLY", "QUARTERLY", "SEMI_ANNUALLY", "ANNUALLY", "EVERY_2_MONTHS", "EBILL", "FIRST_DAY_MONTHLY", "LAST_DAY_MONTHLY", "EVERY_4_WEEKS", "UNKNOWN", "OTHER"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def maturity_amount(self):
        """Gets the maturity_amount of this DataExtractsAccount.  # noqa: E501

        The maturity amount on the CD is the amount(principal and interest) paid on or after the maturity date.<br><b>Additional Details:</b> The Maturity Amount field is only applicable for the account type CD(Fixed Deposits).<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The maturity_amount of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._maturity_amount

    @maturity_amount.setter
    def maturity_amount(self, maturity_amount):
        """Sets the maturity_amount of this DataExtractsAccount.

        The maturity amount on the CD is the amount(principal and interest) paid on or after the maturity date.<br><b>Additional Details:</b> The Maturity Amount field is only applicable for the account type CD(Fixed Deposits).<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param maturity_amount: The maturity_amount of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._maturity_amount = maturity_amount

    @property
    def associated_provider_account_id(self):
        """Gets the associated_provider_account_id of this DataExtractsAccount.  # noqa: E501

        The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.<br><b>Additional Details</b>: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The associated_provider_account_id of this DataExtractsAccount.  # noqa: E501
        :rtype: list[int]
        """
        return self._associated_provider_account_id

    @associated_provider_account_id.setter
    def associated_provider_account_id(self, associated_provider_account_id):
        """Sets the associated_provider_account_id of this DataExtractsAccount.

        The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.<br><b>Additional Details</b>: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param associated_provider_account_id: The associated_provider_account_id of this DataExtractsAccount.  # noqa: E501
        :type: list[int]
        """

        self._associated_provider_account_id = associated_provider_account_id

    @property
    def is_asset(self):
        """Gets the is_asset of this DataExtractsAccount.  # noqa: E501

        The account to be considered as an asset or liability.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The is_asset of this DataExtractsAccount.  # noqa: E501
        :rtype: bool
        """
        return self._is_asset

    @is_asset.setter
    def is_asset(self, is_asset):
        """Sets the is_asset of this DataExtractsAccount.

        The account to be considered as an asset or liability.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param is_asset: The is_asset of this DataExtractsAccount.  # noqa: E501
        :type: bool
        """

        self._is_asset = is_asset

    @property
    def principal_balance(self):
        """Gets the principal_balance of this DataExtractsAccount.  # noqa: E501

        The principal or loan balance is the outstanding balance on a loan account, excluding the interest and fees. The principal balance is the original borrowed amount plus any applicable loan fees, minus any principal payments.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The principal_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._principal_balance

    @principal_balance.setter
    def principal_balance(self, principal_balance):
        """Sets the principal_balance of this DataExtractsAccount.

        The principal or loan balance is the outstanding balance on a loan account, excluding the interest and fees. The principal balance is the original borrowed amount plus any applicable loan fees, minus any principal payments.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param principal_balance: The principal_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._principal_balance = principal_balance

    @property
    def total_cash_limit(self):
        """Gets the total_cash_limit of this DataExtractsAccount.  # noqa: E501

        The maximum amount that can be withdrawn from an ATM using the credit card. Credit cards issuer allow cardholders to withdraw cash using their cards - the cash limit is a percent of the overall credit limit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The total_cash_limit of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._total_cash_limit

    @total_cash_limit.setter
    def total_cash_limit(self, total_cash_limit):
        """Sets the total_cash_limit of this DataExtractsAccount.

        The maximum amount that can be withdrawn from an ATM using the credit card. Credit cards issuer allow cardholders to withdraw cash using their cards - the cash limit is a percent of the overall credit limit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param total_cash_limit: The total_cash_limit of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._total_cash_limit = total_cash_limit

    @property
    def maturity_date(self):
        """Gets the maturity_date of this DataExtractsAccount.  # noqa: E501

        The date when a certificate of deposit (CD/FD) matures or the final payment date of a loan at which point the principal amount (including pending interest) is due to be paid.<br><b>Additional Details:</b> The date when a certificate of deposit (CD) matures, i.e., the money in the CD can be withdrawn without paying an early withdrawal penalty.The final payment date of a loan, i.e., the principal amount (including pending interest) is due to be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The maturity_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._maturity_date

    @maturity_date.setter
    def maturity_date(self, maturity_date):
        """Sets the maturity_date of this DataExtractsAccount.

        The date when a certificate of deposit (CD/FD) matures or the final payment date of a loan at which point the principal amount (including pending interest) is due to be paid.<br><b>Additional Details:</b> The date when a certificate of deposit (CD) matures, i.e., the money in the CD can be withdrawn without paying an early withdrawal penalty.The final payment date of a loan, i.e., the principal amount (including pending interest) is due to be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param maturity_date: The maturity_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._maturity_date = maturity_date

    @property
    def minimum_amount_due(self):
        """Gets the minimum_amount_due of this DataExtractsAccount.  # noqa: E501

        The minimum amount due is the lowest amount of money that a consumer is required to pay each month.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, insurance, bill, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The minimum_amount_due of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._minimum_amount_due

    @minimum_amount_due.setter
    def minimum_amount_due(self, minimum_amount_due):
        """Sets the minimum_amount_due of this DataExtractsAccount.

        The minimum amount due is the lowest amount of money that a consumer is required to pay each month.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, insurance, bill, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param minimum_amount_due: The minimum_amount_due of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._minimum_amount_due = minimum_amount_due

    @property
    def annual_percentage_yield(self):
        """Gets the annual_percentage_yield of this DataExtractsAccount.  # noqa: E501

        Annual percentage yield (APY) is a normalized representation of an interest rate, based on a compounding period of one year. APY generally refers to the rate paid to a depositor by a financial institution on an account.<br><b>Applicable containers</b>: bank<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The annual_percentage_yield of this DataExtractsAccount.  # noqa: E501
        :rtype: float
        """
        return self._annual_percentage_yield

    @annual_percentage_yield.setter
    def annual_percentage_yield(self, annual_percentage_yield):
        """Sets the annual_percentage_yield of this DataExtractsAccount.

        Annual percentage yield (APY) is a normalized representation of an interest rate, based on a compounding period of one year. APY generally refers to the rate paid to a depositor by a financial institution on an account.<br><b>Applicable containers</b>: bank<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param annual_percentage_yield: The annual_percentage_yield of this DataExtractsAccount.  # noqa: E501
        :type: float
        """

        self._annual_percentage_yield = annual_percentage_yield

    @property
    def account_type(self):
        """Gets the account_type of this DataExtractsAccount.  # noqa: E501

        The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>OTHER</li></ul><b>bill</b><ul><li>TELEPHONE</li><li>UTILITY</li><li>CABLE</li><li>WIRELESS</li><li>BILLS</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>bill</b><ul><li>BILLS</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The account_type of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this DataExtractsAccount.

        The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>OTHER</li></ul><b>bill</b><ul><li>TELEPHONE</li><li>UTILITY</li><li>CABLE</li><li>WIRELESS</li><li>BILLS</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>bill</b><ul><li>BILLS</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param account_type: The account_type of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def origination_date(self):
        """Gets the origination_date of this DataExtractsAccount.  # noqa: E501

        The date on which the loan is disbursed.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The origination_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._origination_date

    @origination_date.setter
    def origination_date(self, origination_date):
        """Sets the origination_date of this DataExtractsAccount.

        The date on which the loan is disbursed.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param origination_date: The origination_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._origination_date = origination_date

    @property
    def total_vested_balance(self):
        """Gets the total_vested_balance of this DataExtractsAccount.  # noqa: E501

        The total vested balance that appears in an investment account. Such as the 401k account or the equity award account that includes employer provided funding. <br><b>Note:</b> The amount an employee can claim after he or she leaves the organization. The total vested balance field is only applicable to the retirement related accounts such as 401k, equity awards, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The total_vested_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._total_vested_balance

    @total_vested_balance.setter
    def total_vested_balance(self, total_vested_balance):
        """Sets the total_vested_balance of this DataExtractsAccount.

        The total vested balance that appears in an investment account. Such as the 401k account or the equity award account that includes employer provided funding. <br><b>Note:</b> The amount an employee can claim after he or she leaves the organization. The total vested balance field is only applicable to the retirement related accounts such as 401k, equity awards, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param total_vested_balance: The total_vested_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._total_vested_balance = total_vested_balance

    @property
    def reward_balance(self):
        """Gets the reward_balance of this DataExtractsAccount.  # noqa: E501

        Information of different reward balances associated with the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The reward_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: list[RewardBalance]
        """
        return self._reward_balance

    @reward_balance.setter
    def reward_balance(self, reward_balance):
        """Sets the reward_balance of this DataExtractsAccount.

        Information of different reward balances associated with the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param reward_balance: The reward_balance of this DataExtractsAccount.  # noqa: E501
        :type: list[RewardBalance]
        """

        self._reward_balance = reward_balance

    @property
    def source_account_status(self):
        """Gets the source_account_status of this DataExtractsAccount.  # noqa: E501

        Indicates the status of the loan account. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :return: The source_account_status of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._source_account_status

    @source_account_status.setter
    def source_account_status(self, source_account_status):
        """Sets the source_account_status of this DataExtractsAccount.

        Indicates the status of the loan account. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>  # noqa: E501

        :param source_account_status: The source_account_status of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_REPAYMENT", "DEFAULTED", "IN_SCHOOL", "IN_GRACE_PERIOD", "DELINQUENCY", "DEFERMENT"]  # noqa: E501
        if source_account_status not in allowed_values:
            raise ValueError(
                "Invalid value for `source_account_status` ({0}), must be one of {1}"  # noqa: E501
                .format(source_account_status, allowed_values)
            )

        self._source_account_status = source_account_status

    @property
    def policy_effective_date(self):
        """Gets the policy_effective_date of this DataExtractsAccount.  # noqa: E501

        The date on which the insurance policy coverage commences.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The policy_effective_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._policy_effective_date

    @policy_effective_date.setter
    def policy_effective_date(self, policy_effective_date):
        """Sets the policy_effective_date of this DataExtractsAccount.

        The date on which the insurance policy coverage commences.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param policy_effective_date: The policy_effective_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._policy_effective_date = policy_effective_date

    @property
    def total_unvested_balance(self):
        """Gets the total_unvested_balance of this DataExtractsAccount.  # noqa: E501

        The total unvested balance that appears in an investment account.Such as the 401k account or the equity award account that includes employer provided funding. <br><b>Note:</b> The amount the employer contributes is generally subject to vesting and remain unvested for a specific period of time or until fulfillment of certain conditions. The total unvested balance field is only applicable to the retirement related accounts such as 401k, equity awards, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The total_unvested_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._total_unvested_balance

    @total_unvested_balance.setter
    def total_unvested_balance(self, total_unvested_balance):
        """Sets the total_unvested_balance of this DataExtractsAccount.

        The total unvested balance that appears in an investment account.Such as the 401k account or the equity award account that includes employer provided funding. <br><b>Note:</b> The amount the employer contributes is generally subject to vesting and remain unvested for a specific period of time or until fulfillment of certain conditions. The total unvested balance field is only applicable to the retirement related accounts such as 401k, equity awards, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param total_unvested_balance: The total_unvested_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._total_unvested_balance = total_unvested_balance

    @property
    def annuity_balance(self):
        """Gets the annuity_balance of this DataExtractsAccount.  # noqa: E501

        Indicates the contract value of the annuity.<br><b>Note:</b> The annuity balance field is applicable only to annuities.<br><b>Applicable containers</b>: insurance, investment<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The annuity_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._annuity_balance

    @annuity_balance.setter
    def annuity_balance(self, annuity_balance):
        """Sets the annuity_balance of this DataExtractsAccount.

        Indicates the contract value of the annuity.<br><b>Note:</b> The annuity balance field is applicable only to annuities.<br><b>Applicable containers</b>: insurance, investment<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param annuity_balance: The annuity_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._annuity_balance = annuity_balance

    @property
    def account_name(self):
        """Gets the account_name of this DataExtractsAccount.  # noqa: E501

        The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The account_name of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this DataExtractsAccount.

        The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param account_name: The account_name of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def total_credit_limit(self):
        """Gets the total_credit_limit of this DataExtractsAccount.  # noqa: E501

        The maximum amount of credit a financial institution extends to a consumer through a line of credit or a revolving loan like HELOC. <br><b>Additional Details:</b><br><b>Note:</b> The credit limit field is applicable only to LOC and HELOC account types.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The total_credit_limit of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._total_credit_limit

    @total_credit_limit.setter
    def total_credit_limit(self, total_credit_limit):
        """Sets the total_credit_limit of this DataExtractsAccount.

        The maximum amount of credit a financial institution extends to a consumer through a line of credit or a revolving loan like HELOC. <br><b>Additional Details:</b><br><b>Note:</b> The credit limit field is applicable only to LOC and HELOC account types.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param total_credit_limit: The total_credit_limit of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._total_credit_limit = total_credit_limit

    @property
    def policy_status(self):
        """Gets the policy_status of this DataExtractsAccount.  # noqa: E501

        The status of the policy.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The policy_status of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._policy_status

    @policy_status.setter
    def policy_status(self, policy_status):
        """Sets the policy_status of this DataExtractsAccount.

        The status of the policy.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param policy_status: The policy_status of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE", "OTHER"]  # noqa: E501
        if policy_status not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_status` ({0}), must be one of {1}"  # noqa: E501
                .format(policy_status, allowed_values)
            )

        self._policy_status = policy_status

    @property
    def short_balance(self):
        """Gets the short_balance of this DataExtractsAccount.  # noqa: E501

        The sum of the current market values of short positions held in a brokerage account.<br><b>Note:</b> The short balance balance field is only applicable to brokerage related accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The short_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._short_balance

    @short_balance.setter
    def short_balance(self, short_balance):
        """Sets the short_balance of this DataExtractsAccount.

        The sum of the current market values of short positions held in a brokerage account.<br><b>Note:</b> The short balance balance field is only applicable to brokerage related accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param short_balance: The short_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._short_balance = short_balance

    @property
    def lender(self):
        """Gets the lender of this DataExtractsAccount.  # noqa: E501

        The financial institution that provides the loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The lender of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._lender

    @lender.setter
    def lender(self, lender):
        """Sets the lender of this DataExtractsAccount.

        The financial institution that provides the loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param lender: The lender of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._lender = lender

    @property
    def last_employee_contribution_amount(self):
        """Gets the last_employee_contribution_amount of this DataExtractsAccount.  # noqa: E501

        Indicates the last amount contributed by the employee to the 401k account.<br><b>Note:</b> The last employee contribution amount field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The last_employee_contribution_amount of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._last_employee_contribution_amount

    @last_employee_contribution_amount.setter
    def last_employee_contribution_amount(self, last_employee_contribution_amount):
        """Sets the last_employee_contribution_amount of this DataExtractsAccount.

        Indicates the last amount contributed by the employee to the 401k account.<br><b>Note:</b> The last employee contribution amount field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param last_employee_contribution_amount: The last_employee_contribution_amount of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._last_employee_contribution_amount = last_employee_contribution_amount

    @property
    def provider_id(self):
        """Gets the provider_id of this DataExtractsAccount.  # noqa: E501

        Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The provider_id of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this DataExtractsAccount.

        Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param provider_id: The provider_id of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this DataExtractsAccount.  # noqa: E501

        The date on which the payment for the previous or current billing cycle is done.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment date of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the date on which the payment was made for any of the previous billing cycles. The last payment date at the account-level can differ from the last payment date at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance, bill<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The last_payment_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this DataExtractsAccount.

        The date on which the payment for the previous or current billing cycle is done.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment date of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the date on which the payment was made for any of the previous billing cycles. The last payment date at the account-level can differ from the last payment date at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance, bill<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param last_payment_date: The last_payment_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._last_payment_date = last_payment_date

    @property
    def primary_reward_unit(self):
        """Gets the primary_reward_unit of this DataExtractsAccount.  # noqa: E501

        Primary reward unit for this reward program. E.g. miles, points, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The primary_reward_unit of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._primary_reward_unit

    @primary_reward_unit.setter
    def primary_reward_unit(self, primary_reward_unit):
        """Sets the primary_reward_unit of this DataExtractsAccount.

        Primary reward unit for this reward program. E.g. miles, points, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param primary_reward_unit: The primary_reward_unit of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._primary_reward_unit = primary_reward_unit

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this DataExtractsAccount.  # noqa: E501

        Last/Previous payment amount on the account.  Portion of the principal and interest paid on previous month or period to satisfy a loan.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the payment that was made for any of the previous billing cycles.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance, bill<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The last_payment_amount of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this DataExtractsAccount.

        Last/Previous payment amount on the account.  Portion of the principal and interest paid on previous month or period to satisfy a loan.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the payment that was made for any of the previous billing cycles.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance, bill<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param last_payment_amount: The last_payment_amount of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._last_payment_amount = last_payment_amount

    @property
    def remaining_balance(self):
        """Gets the remaining_balance of this DataExtractsAccount.  # noqa: E501

        The sum of the future payments due to be paid to the insurance company during a policy year. It is the policy rate minus the payments made till date.<br><b>Note:</b> The remaining balance field is applicable only to auto insurance and home insurance.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The remaining_balance of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._remaining_balance

    @remaining_balance.setter
    def remaining_balance(self, remaining_balance):
        """Sets the remaining_balance of this DataExtractsAccount.

        The sum of the future payments due to be paid to the insurance company during a policy year. It is the policy rate minus the payments made till date.<br><b>Note:</b> The remaining balance field is applicable only to auto insurance and home insurance.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param remaining_balance: The remaining_balance of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._remaining_balance = remaining_balance

    @property
    def user_classification(self):
        """Gets the user_classification of this DataExtractsAccount.  # noqa: E501

        <b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate, bill, otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>POST accounts</ul><li>GET dataExtracts/userData</li><b>Applicable Values</b><br>  # noqa: E501

        :return: The user_classification of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._user_classification

    @user_classification.setter
    def user_classification(self, user_classification):
        """Sets the user_classification of this DataExtractsAccount.

        <b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate, bill, otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>POST accounts</ul><li>GET dataExtracts/userData</li><b>Applicable Values</b><br>  # noqa: E501

        :param user_classification: The user_classification of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["BUSINESS", "PERSONAL"]  # noqa: E501
        if user_classification not in allowed_values:
            raise ValueError(
                "Invalid value for `user_classification` ({0}), must be one of {1}"  # noqa: E501
                .format(user_classification, allowed_values)
            )

        self._user_classification = user_classification

    @property
    def bank_transfer_code(self):
        """Gets the bank_transfer_code of this DataExtractsAccount.  # noqa: E501

        Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The bank_transfer_code of this DataExtractsAccount.  # noqa: E501
        :rtype: list[BankTransferCode]
        """
        return self._bank_transfer_code

    @bank_transfer_code.setter
    def bank_transfer_code(self, bank_transfer_code):
        """Sets the bank_transfer_code of this DataExtractsAccount.

        Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param bank_transfer_code: The bank_transfer_code of this DataExtractsAccount.  # noqa: E501
        :type: list[BankTransferCode]
        """

        self._bank_transfer_code = bank_transfer_code

    @property
    def expiration_date(self):
        """Gets the expiration_date of this DataExtractsAccount.  # noqa: E501

        The date on which the insurance policy expires or matures.<br><b>Additional Details:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The expiration_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this DataExtractsAccount.

        The date on which the insurance policy expires or matures.<br><b>Additional Details:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param expiration_date: The expiration_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._expiration_date = expiration_date

    @property
    def coverage(self):
        """Gets the coverage of this DataExtractsAccount.  # noqa: E501

        The coverage-related details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The coverage of this DataExtractsAccount.  # noqa: E501
        :rtype: list[Coverage]
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage):
        """Sets the coverage of this DataExtractsAccount.

        The coverage-related details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param coverage: The coverage of this DataExtractsAccount.  # noqa: E501
        :type: list[Coverage]
        """

        self._coverage = coverage

    @property
    def loan_pay_off_details(self):
        """Gets the loan_pay_off_details of this DataExtractsAccount.  # noqa: E501

        The loan payoff details such as date by which the payoff amount should be paid, loan payoff amount, and the outstanding balance on the loan account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The loan_pay_off_details of this DataExtractsAccount.  # noqa: E501
        :rtype: LoanPayoffDetails
        """
        return self._loan_pay_off_details

    @loan_pay_off_details.setter
    def loan_pay_off_details(self, loan_pay_off_details):
        """Sets the loan_pay_off_details of this DataExtractsAccount.

        The loan payoff details such as date by which the payoff amount should be paid, loan payoff amount, and the outstanding balance on the loan account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param loan_pay_off_details: The loan_pay_off_details of this DataExtractsAccount.  # noqa: E501
        :type: LoanPayoffDetails
        """

        self._loan_pay_off_details = loan_pay_off_details

    @property
    def cash_apr(self):
        """Gets the cash_apr of this DataExtractsAccount.  # noqa: E501

        Annual percentage rate applied to cash withdrawals on the card.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The cash_apr of this DataExtractsAccount.  # noqa: E501
        :rtype: float
        """
        return self._cash_apr

    @cash_apr.setter
    def cash_apr(self, cash_apr):
        """Sets the cash_apr of this DataExtractsAccount.

        Annual percentage rate applied to cash withdrawals on the card.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param cash_apr: The cash_apr of this DataExtractsAccount.  # noqa: E501
        :type: float
        """

        self._cash_apr = cash_apr

    @property
    def displayed_name(self):
        """Gets the displayed_name of this DataExtractsAccount.  # noqa: E501

        The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, bill, reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The displayed_name of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._displayed_name

    @displayed_name.setter
    def displayed_name(self, displayed_name):
        """Sets the displayed_name of this DataExtractsAccount.

        The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, bill, reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param displayed_name: The displayed_name of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._displayed_name = displayed_name

    @property
    def amount_due(self):
        """Gets the amount_due of this DataExtractsAccount.  # noqa: E501

        The amount due to be paid for the account.<br><b>Additional Details:</b><b>Credit Card:</b> The total amount due for the purchase of goods or services that must be paid by the due date.<br><b>Loan:</b> The amount due to be paid on the due date.<br><b>Note:</b> The amount due at the account-level can differ from the amount due at the statement-level, as the information in the aggregated card account data provides more up-to-date information.<br><b>Applicable containers</b>: creditCard, loan, insurance, bill<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The amount_due of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this DataExtractsAccount.

        The amount due to be paid for the account.<br><b>Additional Details:</b><b>Credit Card:</b> The total amount due for the purchase of goods or services that must be paid by the due date.<br><b>Loan:</b> The amount due to be paid on the due date.<br><b>Note:</b> The amount due at the account-level can differ from the amount due at the statement-level, as the information in the aggregated card account data provides more up-to-date information.<br><b>Applicable containers</b>: creditCard, loan, insurance, bill<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param amount_due: The amount_due of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._amount_due = amount_due

    @property
    def current_level(self):
        """Gets the current_level of this DataExtractsAccount.  # noqa: E501

        Current level of the reward program the user is associated with. E.g. Silver, Jade etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The current_level of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._current_level

    @current_level.setter
    def current_level(self, current_level):
        """Sets the current_level of this DataExtractsAccount.

        Current level of the reward program the user is associated with. E.g. Silver, Jade etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param current_level: The current_level of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._current_level = current_level

    @property
    def original_loan_amount(self):
        """Gets the original_loan_amount of this DataExtractsAccount.  # noqa: E501

        The amount of loan that the lender has provided.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The original_loan_amount of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._original_loan_amount

    @original_loan_amount.setter
    def original_loan_amount(self, original_loan_amount):
        """Sets the original_loan_amount of this DataExtractsAccount.

        The amount of loan that the lender has provided.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param original_loan_amount: The original_loan_amount of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._original_loan_amount = original_loan_amount

    @property
    def policy_to_date(self):
        """Gets the policy_to_date of this DataExtractsAccount.  # noqa: E501

        The date to which the policy exists.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The policy_to_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._policy_to_date

    @policy_to_date.setter
    def policy_to_date(self, policy_to_date):
        """Sets the policy_to_date of this DataExtractsAccount.

        The date to which the policy exists.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param policy_to_date: The policy_to_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._policy_to_date = policy_to_date

    @property
    def container(self):
        """Gets the container of this DataExtractsAccount.  # noqa: E501

        The type of service. E.g., Bank, Credit Card, Investment, Insurance, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :return: The container of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this DataExtractsAccount.

        The type of service. E.g., Bank, Credit Card, Investment, Insurance, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>  # noqa: E501

        :param container: The container of this DataExtractsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "bill", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if container not in allowed_values:
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"  # noqa: E501
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def last_employee_contribution_date(self):
        """Gets the last_employee_contribution_date of this DataExtractsAccount.  # noqa: E501

        The date on which the last employee contribution was made to the 401k account.<br><b>Note:</b> The last employee contribution date field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The last_employee_contribution_date of this DataExtractsAccount.  # noqa: E501
        :rtype: str
        """
        return self._last_employee_contribution_date

    @last_employee_contribution_date.setter
    def last_employee_contribution_date(self, last_employee_contribution_date):
        """Sets the last_employee_contribution_date of this DataExtractsAccount.

        The date on which the last employee contribution was made to the 401k account.<br><b>Note:</b> The last employee contribution date field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param last_employee_contribution_date: The last_employee_contribution_date of this DataExtractsAccount.  # noqa: E501
        :type: str
        """

        self._last_employee_contribution_date = last_employee_contribution_date

    @property
    def last_payment(self):
        """Gets the last_payment of this DataExtractsAccount.  # noqa: E501

        The last payment made for the account.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bill<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The last_payment of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._last_payment

    @last_payment.setter
    def last_payment(self, last_payment):
        """Sets the last_payment of this DataExtractsAccount.

        The last payment made for the account.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bill<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param last_payment: The last_payment of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._last_payment = last_payment

    @property
    def recurring_payment(self):
        """Gets the recurring_payment of this DataExtractsAccount.  # noqa: E501

        The monthly or periodic payment on a loan that is recurring in nature. The recurring payment amount is usually same as the amount due, unless late fees or other charges are added eventually changing the amount due for a particular month.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :return: The recurring_payment of this DataExtractsAccount.  # noqa: E501
        :rtype: Money
        """
        return self._recurring_payment

    @recurring_payment.setter
    def recurring_payment(self, recurring_payment):
        """Sets the recurring_payment of this DataExtractsAccount.

        The monthly or periodic payment on a loan that is recurring in nature. The recurring payment amount is usually same as the amount due, unless late fees or other charges are added eventually changing the amount due for a particular month.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>  # noqa: E501

        :param recurring_payment: The recurring_payment of this DataExtractsAccount.  # noqa: E501
        :type: Money
        """

        self._recurring_payment = recurring_payment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataExtractsAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataExtractsAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
