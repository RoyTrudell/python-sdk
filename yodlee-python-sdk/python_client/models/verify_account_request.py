# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.verify_transaction_criteria import VerifyTransactionCriteria  # noqa: F401,E501


class VerifyAccountRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container': 'str',
        'account_id': 'int',
        'transaction_criteria': 'list[VerifyTransactionCriteria]'
    }

    attribute_map = {
        'container': 'container',
        'account_id': 'accountId',
        'transaction_criteria': 'transactionCriteria'
    }

    def __init__(self, container=None, account_id=None, transaction_criteria=None):  # noqa: E501
        """VerifyAccountRequest - a model defined in Swagger"""  # noqa: E501

        self._container = None
        self._account_id = None
        self._transaction_criteria = None
        self.discriminator = None

        if container is not None:
            self.container = container
        if account_id is not None:
            self.account_id = account_id
        self.transaction_criteria = transaction_criteria

    @property
    def container(self):
        """Gets the container of this VerifyAccountRequest.  # noqa: E501


        :return: The container of this VerifyAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this VerifyAccountRequest.


        :param container: The container of this VerifyAccountRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["bank", "creditCard", "investment", "insurance", "loan", "reward", "bill", "realEstate", "otherAssets", "otherLiabilities"]  # noqa: E501
        if container not in allowed_values:
            raise ValueError(
                "Invalid value for `container` ({0}), must be one of {1}"  # noqa: E501
                .format(container, allowed_values)
            )

        self._container = container

    @property
    def account_id(self):
        """Gets the account_id of this VerifyAccountRequest.  # noqa: E501


        :return: The account_id of this VerifyAccountRequest.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this VerifyAccountRequest.


        :param account_id: The account_id of this VerifyAccountRequest.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def transaction_criteria(self):
        """Gets the transaction_criteria of this VerifyAccountRequest.  # noqa: E501


        :return: The transaction_criteria of this VerifyAccountRequest.  # noqa: E501
        :rtype: list[VerifyTransactionCriteria]
        """
        return self._transaction_criteria

    @transaction_criteria.setter
    def transaction_criteria(self, transaction_criteria):
        """Sets the transaction_criteria of this VerifyAccountRequest.


        :param transaction_criteria: The transaction_criteria of this VerifyAccountRequest.  # noqa: E501
        :type: list[VerifyTransactionCriteria]
        """
        if transaction_criteria is None:
            raise ValueError("Invalid value for `transaction_criteria`, must not be `None`")  # noqa: E501

        self._transaction_criteria = transaction_criteria

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerifyAccountRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerifyAccountRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
