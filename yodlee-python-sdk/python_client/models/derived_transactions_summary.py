# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.derived_category_summary import DerivedCategorySummary  # noqa: F401,E501
from python_client.models.derived_transactions_links import DerivedTransactionsLinks  # noqa: F401,E501
from python_client.models.money import Money  # noqa: F401,E501


class DerivedTransactionsSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_type': 'str',
        'category_summary': 'list[DerivedCategorySummary]',
        'credit_total': 'Money',
        'links': 'DerivedTransactionsLinks',
        'debit_total': 'Money'
    }

    attribute_map = {
        'category_type': 'categoryType',
        'category_summary': 'categorySummary',
        'credit_total': 'creditTotal',
        'links': 'links',
        'debit_total': 'debitTotal'
    }

    def __init__(self, category_type=None, category_summary=None, credit_total=None, links=None, debit_total=None):  # noqa: E501
        """DerivedTransactionsSummary - a model defined in Swagger"""  # noqa: E501

        self._category_type = None
        self._category_summary = None
        self._credit_total = None
        self._links = None
        self._debit_total = None
        self.discriminator = None

        if category_type is not None:
            self.category_type = category_type
        if category_summary is not None:
            self.category_summary = category_summary
        if credit_total is not None:
            self.credit_total = credit_total
        if links is not None:
            self.links = links
        if debit_total is not None:
            self.debit_total = debit_total

    @property
    def category_type(self):
        """Gets the category_type of this DerivedTransactionsSummary.  # noqa: E501

        Type of categories provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br><b>Applicable Values</b><br>  # noqa: E501

        :return: The category_type of this DerivedTransactionsSummary.  # noqa: E501
        :rtype: str
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type):
        """Sets the category_type of this DerivedTransactionsSummary.

        Type of categories provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br><b>Applicable Values</b><br>  # noqa: E501

        :param category_type: The category_type of this DerivedTransactionsSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["TRANSFER", "DEFERRED_COMPENSATION", "UNCATEGORIZE", "INCOME", "EXPENSE"]  # noqa: E501
        if category_type not in allowed_values:
            raise ValueError(
                "Invalid value for `category_type` ({0}), must be one of {1}"  # noqa: E501
                .format(category_type, allowed_values)
            )

        self._category_type = category_type

    @property
    def category_summary(self):
        """Gets the category_summary of this DerivedTransactionsSummary.  # noqa: E501

        Summary of transaction amouts at category level.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The category_summary of this DerivedTransactionsSummary.  # noqa: E501
        :rtype: list[DerivedCategorySummary]
        """
        return self._category_summary

    @category_summary.setter
    def category_summary(self, category_summary):
        """Sets the category_summary of this DerivedTransactionsSummary.

        Summary of transaction amouts at category level.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param category_summary: The category_summary of this DerivedTransactionsSummary.  # noqa: E501
        :type: list[DerivedCategorySummary]
        """

        self._category_summary = category_summary

    @property
    def credit_total(self):
        """Gets the credit_total of this DerivedTransactionsSummary.  # noqa: E501

        The total of credit transactions for the category type.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The credit_total of this DerivedTransactionsSummary.  # noqa: E501
        :rtype: Money
        """
        return self._credit_total

    @credit_total.setter
    def credit_total(self, credit_total):
        """Sets the credit_total of this DerivedTransactionsSummary.

        The total of credit transactions for the category type.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param credit_total: The credit_total of this DerivedTransactionsSummary.  # noqa: E501
        :type: Money
        """

        self._credit_total = credit_total

    @property
    def links(self):
        """Gets the links of this DerivedTransactionsSummary.  # noqa: E501

        Link of the API services that corresponds to the value derivation.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The links of this DerivedTransactionsSummary.  # noqa: E501
        :rtype: DerivedTransactionsLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DerivedTransactionsSummary.

        Link of the API services that corresponds to the value derivation.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param links: The links of this DerivedTransactionsSummary.  # noqa: E501
        :type: DerivedTransactionsLinks
        """

        self._links = links

    @property
    def debit_total(self):
        """Gets the debit_total of this DerivedTransactionsSummary.  # noqa: E501

        The total of debit transactions for the category type.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :return: The debit_total of this DerivedTransactionsSummary.  # noqa: E501
        :rtype: Money
        """
        return self._debit_total

    @debit_total.setter
    def debit_total(self, debit_total):
        """Sets the debit_total of this DerivedTransactionsSummary.

        The total of debit transactions for the category type.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>  # noqa: E501

        :param debit_total: The debit_total of this DerivedTransactionsSummary.  # noqa: E501
        :type: Money
        """

        self._debit_total = debit_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DerivedTransactionsSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DerivedTransactionsSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
