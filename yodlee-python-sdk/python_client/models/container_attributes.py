# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs, using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. You can generate a client SDK for Python, Java, javascript, PHP or other languages according to your development needs. For more details about our APIs themselves, please refer to https://developer.yodlee.com/Yodlee_API/.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from python_client.models.transaction_days import TransactionDays  # noqa: F401,E501


class ContainerAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank': 'TransactionDays',
        'loan': 'TransactionDays',
        'creditcard': 'TransactionDays',
        'investment': 'TransactionDays',
        'insurance': 'TransactionDays'
    }

    attribute_map = {
        'bank': 'BANK',
        'loan': 'LOAN',
        'creditcard': 'CREDITCARD',
        'investment': 'INVESTMENT',
        'insurance': 'INSURANCE'
    }

    def __init__(self, bank=None, loan=None, creditcard=None, investment=None, insurance=None):  # noqa: E501
        """ContainerAttributes - a model defined in Swagger"""  # noqa: E501

        self._bank = None
        self._loan = None
        self._creditcard = None
        self._investment = None
        self._insurance = None
        self.discriminator = None

        if bank is not None:
            self.bank = bank
        if loan is not None:
            self.loan = loan
        if creditcard is not None:
            self.creditcard = creditcard
        if investment is not None:
            self.investment = investment
        if insurance is not None:
            self.insurance = insurance

    @property
    def bank(self):
        """Gets the bank of this ContainerAttributes.  # noqa: E501


        :return: The bank of this ContainerAttributes.  # noqa: E501
        :rtype: TransactionDays
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this ContainerAttributes.


        :param bank: The bank of this ContainerAttributes.  # noqa: E501
        :type: TransactionDays
        """

        self._bank = bank

    @property
    def loan(self):
        """Gets the loan of this ContainerAttributes.  # noqa: E501


        :return: The loan of this ContainerAttributes.  # noqa: E501
        :rtype: TransactionDays
        """
        return self._loan

    @loan.setter
    def loan(self, loan):
        """Sets the loan of this ContainerAttributes.


        :param loan: The loan of this ContainerAttributes.  # noqa: E501
        :type: TransactionDays
        """

        self._loan = loan

    @property
    def creditcard(self):
        """Gets the creditcard of this ContainerAttributes.  # noqa: E501


        :return: The creditcard of this ContainerAttributes.  # noqa: E501
        :rtype: TransactionDays
        """
        return self._creditcard

    @creditcard.setter
    def creditcard(self, creditcard):
        """Sets the creditcard of this ContainerAttributes.


        :param creditcard: The creditcard of this ContainerAttributes.  # noqa: E501
        :type: TransactionDays
        """

        self._creditcard = creditcard

    @property
    def investment(self):
        """Gets the investment of this ContainerAttributes.  # noqa: E501


        :return: The investment of this ContainerAttributes.  # noqa: E501
        :rtype: TransactionDays
        """
        return self._investment

    @investment.setter
    def investment(self, investment):
        """Sets the investment of this ContainerAttributes.


        :param investment: The investment of this ContainerAttributes.  # noqa: E501
        :type: TransactionDays
        """

        self._investment = investment

    @property
    def insurance(self):
        """Gets the insurance of this ContainerAttributes.  # noqa: E501


        :return: The insurance of this ContainerAttributes.  # noqa: E501
        :rtype: TransactionDays
        """
        return self._insurance

    @insurance.setter
    def insurance(self, insurance):
        """Sets the insurance of this ContainerAttributes.


        :param insurance: The insurance of this ContainerAttributes.  # noqa: E501
        :type: TransactionDays
        """

        self._insurance = insurance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContainerAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
